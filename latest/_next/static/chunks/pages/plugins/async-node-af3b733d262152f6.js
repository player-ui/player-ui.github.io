(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[296],{30876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return h}});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,g=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var r=t.length,i=new Array(r);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"===typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},22274:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/plugins/async-node",function(){return t(65222)}])},43857:function(e,n,t){"use strict";t.d(n,{Z:function(){return j}});var a=t(52322),o=t(2784),r=t(97729),i=t(64033),s=t(30876),l=t(21925),c=t(76808),u=t(55165),d=t(63637),p=t.n(d);function h(){return(h=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function g(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}var m=["id"],f=["id"],y="chakra-skip-nav",b={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},k=(0,c.Gp)((function(e,n){var t=(0,c.mq)("SkipLink",e),a=(0,c.Lr)(e),r=a.id,i=void 0===r?y:r,s=g(a,m),l=p()({},b,t);return o.createElement(c.m$.a,h({},s,{ref:n,href:"#"+i,__css:l}))}));u.Ts&&(k.displayName="SkipNavLink");var N=(0,c.Gp)((function(e,n){var t=e.id,a=void 0===t?y:t,r=g(e,f);return o.createElement(c.m$.div,h({ref:n,id:a,tabIndex:-1,style:{outline:0}},r))}));u.Ts&&(N.displayName="SkipNavContent");var v=t(46977),x=t(55002),w=function(e){var n;return(0,a.jsxs)(i.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(i.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(n=e.tableOfContents)||void 0===n?void 0:n.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},O=function(e){var n=o.useContext(v.Il).bannerExpanded,t="72px",r="calc(100vh - 88px - ".concat(n?t:"0px",")"),s="calc(100vh - 88px - 105px - ".concat(n?t:"0px",")");return(0,a.jsxs)(i.xu,{minH:"100vh",children:[(0,a.jsx)(k,{children:"Skip to Main Content"}),(0,a.jsxs)(i.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(x._g,{}),(0,a.jsx)(i.iz,{}),(0,a.jsx)(i.kC,{children:(0,a.jsx)(i.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(i.xu,{display:{md:"flex"},children:[(0,a.jsx)(i.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4",children:(0,a.jsx)(x.Hy,{})}),(0,a.jsxs)(i.xu,{flex:"1",minW:"0",overflow:"auto",maxH:r,children:[(0,a.jsxs)(i.xu,{minH:s,children:[(0,a.jsx)(N,{}),e.children]}),(0,a.jsx)(i.xu,{pt:"20",children:(0,a.jsx)(x.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(w,{tableOfContents:e.tableOfContents})]})})})]})]})};function j(e){return function(n){return(0,a.jsxs)(O,{children:[(0,a.jsx)(r.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(i.kC,{alignItems:"center",children:(0,a.jsx)(i.W2,{maxW:"container.lg",children:(0,a.jsx)(s.Zo,{components:l.tl,children:n.children})})})]})}}},65222:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});t(2784);var a=t(30876),o=t(43857);function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i,s=(i="PlatformTabs",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",Object.assign({},e))}),l={},c=(0,o.Z)({title:"AsyncNode Plugin",platform:"core,react,ios,android",tableOfContents:[{text:"Async Node Plugin",id:"async-node-plugin",level:1},{text:"Continuous Streaming",id:"continuous-streaming",level:3},{text:"Usage",id:"usage",level:2},{text:"CocoaPods",id:"cocoapods",level:3},{text:"Swift Usage",id:"swift-usage",level:3}]});function u(e){var n=e.components,t=r(e,["components"]);return(0,a.kt)(c,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"async-node-plugin"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#async-node-plugin"}),"Async Node Plugin")),(0,a.kt)("p",null,"The AsyncNode Plugin is used to enable streaming additional content into a flow that has already been loaded and rendered.",(0,a.kt)("br",{parentName:"p"}),"\n","A common use case for this plugin is conversational UI, as the users input more dialogue, new content must be streamed into Player in order to keep the UI up to date."),(0,a.kt)("p",null,"The pillar that makes this possible is the concept of an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNode"),". An ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNode")," is any tree node with the property ",(0,a.kt)("inlineCode",{parentName:"p"},"async: true"),", it represents a placeholder node that will be replaced by a concrete node in the future."),(0,a.kt)("p",null,"In the example below, node with the id \u201csome-async-node\u201d will not be rendered on first render, but will be replaced with a UI asset node at a later time:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "id": "flow-1",\n    "views": [\n      {\n        "id": \'action\',\n        "actions": [\n          {\n            "id": "some-async-node",\n            "async": true,\n          },\n        ],\n      },\n    ],\n  ...\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNodePlugin")," exposes an ",(0,a.kt)("inlineCode",{parentName:"p"},"onAsyncNode")," hook on all platforms. The ",(0,a.kt)("inlineCode",{parentName:"p"},"onAsyncNode")," hook will be invoked with the current node when the plugin is available and an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNode")," is detected during the resolve process. The node used to call the hook with could contain metadata according to content spec."),(0,a.kt)("p",null,"User should tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"onAsyncNode")," hook to examine the node\u2019s metadata before making a decision on what to replace the async node with. The return could be a single asset node or an array of asset nodes."),(0,a.kt)("h3",Object.assign({},{id:"continuous-streaming"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#continuous-streaming"}),"Continuous Streaming")),(0,a.kt)("p",null,"In order to keep streaming in new content, there must be at least 1 or more ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNode"),"s in the view tree at all times.",(0,a.kt)("br",{parentName:"p"}),"\n","This means there must be a constant renewal of new ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncNode"),"s after the previous ones are resolved by the user."),(0,a.kt)("h2",Object.assign({},{id:"usage"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#usage"}),"Usage")),(0,a.kt)(s,{mdxType:"PlatformTabs"},(0,a.kt)("core",null,(0,a.kt)("p",null,"Add the plugin to Player:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { Player } from '@player-ui/player';\nimport { AsyncNodePlugin } from '@player-ui/async-node-plugin';\n\nconst asyncNodePlugin = new AsyncNodePlugin();\n\n// Configuring async node behaviour\nasyncNodePlugin.hooks.onAsyncNode.tap('handleAsync', async (node: Node.Node) => {\n  ...\n  // Determine what to return to be parsed into a concrete UI asset\n});\n\nconst player = new Player({\n  plugins: [\n    asyncNodePlugin\n  ]\n})\n"))),(0,a.kt)("react",null,(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"react")," version of the AsyncNodePlugin is identical to using the core plugin. Refer to core usage for handler configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { ReactPlayer } from '@player-ui/react';\nimport { MetricsPlugin } from '@player-ui/async-node-plugin';\n\nconst asyncNodePlugin = new AsyncNodePlugin();\n\nconst player = new ReactPlayer({\n  plugins: [\n    asyncNodePlugin\n  ]\n})\n"))),(0,a.kt)("ios",null,(0,a.kt)("h3",Object.assign({},{id:"cocoapods"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#cocoapods"}),"CocoaPods")),(0,a.kt)("p",null,"Add the subspec to your ",(0,a.kt)("inlineCode",{parentName:"p"},"Podfile")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),"pod 'PlayerUI/AsyncNodePlugin'\n")),(0,a.kt)("h3",Object.assign({},{id:"swift-usage"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#swift-usage"}),"Swift Usage")),(0,a.kt)("p",null,"In integration code"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),'var body: some View {\n    SwiftUIPlayer(\n        flow: flow,\n        plugins: [\n          AsyncNodePlugin { node in\n              // Determine what to return either using the singleNode or multiNode case\n              // Then JSON can be provided using the concrete case, see below for using the encodable case\n              return .singleNode(.concrete(jsContext?.evaluateScript("""\n                  ({"asset": {"id": "text", "type": "text", "value":"new node from the hook"}})\n                  """) ?? JSValue()))\n\n              // OR\n              return .multiNode([\n                .concrete(jsContext?.evaluateScript("""\n                  ({"asset": {"id": "text", "type": "text", "value":"1st value in the multinode"}})\n                  """) ?? JSValue()),\n                .concrete(jsContext?.evaluateScript("""\n                  ({"asset": {"id": "async-node-2", "async": "true" }})\n                  """) ?? JSValue())\n              ])\n\n          }\n        ],\n        result: $resultBinding\n    )\n}\n')),(0,a.kt)("p",null,"The plugin also provides a default asset placeholder struct that is encodable, instead of passing in the JSON string users can use\n",(0,a.kt)("inlineCode",{parentName:"p"},"AssetPlaceholderNode")," which includes an ",(0,a.kt)("inlineCode",{parentName:"p"},"asset")," key that takes any user defined Encodable struct as the value. Assuming the following encodable struct is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"struct PlaceholderNode: Codable, Equatable, AssetData {\n    public var id: String\n    public var type: String\n    var value: String?\n\n    public init(id: String, type: String, value: String? = nil) {\n        self.id = id\n        self.type = type\n        self.value = value\n    }\n}\n")),(0,a.kt)("p",null,"Instead of using the JSON string above, the following can be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),'return .singleNode(.encodable(PlaceholderNode(id: "text", type: "text", value: "new node from the hook")))\n\n// OR\n\nreturn .multiNode([\n    ReplacementNode.encodable(PlaceholderNode(id: "text", type: "text", value: "1st value in the multinode")),\n    ReplacementNode.encodable(AsyncNode(id: "id"))])\n')),(0,a.kt)("p",null,"Note: the AsyncNode struct is already defined in the plugin with the ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," property defaulted to true so only ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," needs to be passed in"),(0,a.kt)("p",null,"As a convenience to the user, the AsyncNodePlugin just takes a callback which has the content to be returned, this is provided to the plugin which calls the the ",(0,a.kt)("inlineCode",{parentName:"p"},"onAsyncNode")," hook tap method")),(0,a.kt)("android",null,(0,a.kt)("p",null,"In build.gradle"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'implementation "com.intuit.player.plugins:async-node:$PLAYER_VERSION"\n')),(0,a.kt)("p",null,"In integration code"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'import com.intuit.player.plugins.asyncnode.AsyncNodePlugin\n\nval asyncNodePlugin = AsyncNodePlugin()\n\n// Configuring async node behaviour\nasyncNodePlugin.hooks.onAsyncNode.tap("handleAsync") { hookContext, node ->\n    ...\n    // Determine what to return in the form of a list of maps representing UI asset to be parsed\n    // e.g.\n    // listOf(\n    //  mapOf(\n    //    "asset" to mapOf(\n    //      "id" to "asset-1",\n    //      "type" to "text",\n    //      "value" to "new asset!"\n    //    )\n    //  )\n    // )\n}\n\nAndroidPlayer(asyncNodePlugin)\n')))),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/plugins/async-node.mdx"}),"Help to improve this page")))}u.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return n=22274,e(e.s=n);var n}));var n=e.O();_N_E=n}]);