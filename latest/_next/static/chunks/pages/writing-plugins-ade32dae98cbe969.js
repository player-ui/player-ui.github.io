(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7684],{30876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"===typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),h=i,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"===typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"===typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80138:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writing-plugins",function(){return t(23132)}])},43857:function(e,n,t){"use strict";t.d(n,{Z:function(){return C}});var a=t(52322),i=t(2784),r=t(97729),o=t(64033),l=t(30876),s=t(21925),p=t(76808),c=t(55165),u=t(63637),d=t.n(u);function h(){return(h=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function m(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}var f=["id"],y=["id"],g="chakra-skip-nav",w={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},k=(0,p.Gp)((function(e,n){var t=(0,p.mq)("SkipLink",e),a=(0,p.Lr)(e),r=a.id,o=void 0===r?g:r,l=m(a,f),s=d()({},w,t);return i.createElement(p.m$.a,h({},l,{ref:n,href:"#"+o,__css:s}))}));c.Ts&&(k.displayName="SkipNavLink");var v=(0,p.Gp)((function(e,n){var t=e.id,a=void 0===t?g:t,r=m(e,y);return i.createElement(p.m$.div,h({ref:n,id:a,tabIndex:-1,style:{outline:0}},r))}));c.Ts&&(v.displayName="SkipNavContent");var b=t(46977),x=t(96882),P=function(e){var n;return(0,a.jsxs)(o.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(o.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(n=e.tableOfContents)||void 0===n?void 0:n.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},j=function(e){var n=i.useContext(b.Il).bannerExpanded,t="72px",r="calc(100vh - 88px - ".concat(n?t:"0px",")"),l="calc(100vh - 88px - 105px - ".concat(n?t:"0px",")");return(0,a.jsxs)(o.xu,{minH:"100vh",children:[(0,a.jsx)(k,{children:"Skip to Main Content"}),(0,a.jsxs)(o.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(x._g,{}),(0,a.jsx)(o.iz,{}),(0,a.jsx)(o.kC,{children:(0,a.jsx)(o.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(o.xu,{display:{md:"flex"},children:[(0,a.jsx)(o.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4",children:(0,a.jsx)(x.Hy,{})}),(0,a.jsxs)(o.xu,{flex:"1",minW:"0",overflow:"auto",maxH:r,children:[(0,a.jsxs)(o.xu,{minH:l,children:[(0,a.jsx)(v,{}),e.children]}),(0,a.jsx)(o.xu,{pt:"20",children:(0,a.jsx)(x.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(P,{tableOfContents:e.tableOfContents})]})})})]})]})};function C(e){return function(n){return(0,a.jsxs)(j,{children:[(0,a.jsx)(r.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(o.kC,{alignItems:"center",children:(0,a.jsx)(o.W2,{maxW:"container.lg",children:(0,a.jsx)(l.Zo,{components:s.tl,children:n.children})})})]})}}},23132:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});t(2784);var a=t(30876),i=t(43857);function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o,l=(o="PlatformTabs",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",Object.assign({},e))}),s={},p=(0,i.Z)({title:"Player Team",platform:"core,react",tableOfContents:[{text:"Writing a Plugin",id:"writing-a-plugin",level:1}]});function c(e){var n=e.components,t=r(e,["components"]);return(0,a.kt)(p,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"writing-a-plugin"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#writing-a-plugin"}),"Writing a Plugin")),(0,a.kt)("p",null," While we have published a majority of the plugins we have developed, there will always be new use cases that may require new functionality. Writing a plugin in the easiest way to extend Player functionality for these cases. Plugins work slightly differently on each platform so in this guide we will cover how to write a plugin for each platform. "),(0,a.kt)(l,{mdxType:"PlatformTabs"},(0,a.kt)("core",null,(0,a.kt)("p",null,"Core plugins are the easiest way to extend Player functionality regardless of what platform you are using Player on. To make writing core plugins easy ",(0,a.kt)("inlineCode",{parentName:"p"},"@player-ui/player")," exposes an interface ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerPlugin")," that denotes everything needed. The two mandatory features are a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property which is lets Player know how to refer to the plugin and an implemented ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," function that takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"player")," object. Optionally a ",(0,a.kt)("inlineCode",{parentName:"p"},"symbol")," property can be used to provide a unique identifier that can be used to retrieve the plugin from Player. "),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," function is where the actual logic of the plugin lives. By tapping the hooks exposed via ",(0,a.kt)("inlineCode",{parentName:"p"},"player.hooks")," you gain access to the internal pipeline of components that comprise Player and can inject your functionality into their exposed hooks. For example if you want to do something any time Player\u2019s state changes you could do the following: "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"apply(player: Player) {\n  player.hooks.state.tap(this.name, (state) => {\n    {/* Your logic here */}\n  });\n}\n")),(0,a.kt)("p",null,"Some components expose hooks themselves which may require multiple levels of taps which is not uncommon. For example if you wanted to modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewInstance")," before it was resolved you would do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"apply(player: Player) {\n  player.hooks.viewController.tap(this.name, (vc) => {\n    vc.hooks.view.tap(this.name, (vc) => {\n      {/* Your logic here */}\n    })\n  });\n}\n")),(0,a.kt)("p",null,"It is not uncommon for core plugins to have constructors for cases where the plugin needs to take some configuration. In cases where plugin configs are more complicated than basic feature flags, it is recommended to make an interface to represent the config object. As an added benefit it also makes it easier to down stream consumers to use your plugin. "),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: For the React Player you can import and load the plugin the same way you would a React Player Plugin but for the iOS and Android Players you will need to wrap the javascript bundle in a iOS/Android plugin to ensure it is available on your platform."))),(0,a.kt)("react",null,(0,a.kt)("p",null,"React Player Plugins are very similar to core plugins in both their composition and use. The ",(0,a.kt)("inlineCode",{parentName:"p"},"@player-ui/react")," package exposes an interface ",(0,a.kt)("inlineCode",{parentName:"p"},"WebPlayerPlugin")," that, much like the ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerPlugin")," interface provides the necessary attributes that are required for a React Player plugin. Again a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," attribute is required and a function ",(0,a.kt)("inlineCode",{parentName:"p"},"applyWeb")," is required that takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"WebPlayer")," instance. Similarly to core plugins in the ",(0,a.kt)("inlineCode",{parentName:"p"},"applyWeb")," function you have access to the React Player object and access to the three exposed hooks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"webComponent")," hook allows you to modify a React component that is stored in the React Player for use when it renders content. This happens during the initialization phase and ise useful if you want to wrap components in various content providers. "),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"playerComponent")," hook allows you to modify a component or execute functionality when the React Player is rendering a component after the view has been reconciled in Player. This is useful if you want to inject additional props to components or collect data on which component was rendered. "),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"onBeforeViewReset")," hook is fired when the view is resetting to undefined and you want to execute some asynchronous tasks. ")),(0,a.kt)("p",null,"Below is an example of a basic ",(0,a.kt)("inlineCode",{parentName:"p"},"WebPlayerPlugin")," that would expose a function to every component that gets loaded in the React Player:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"export const FunctionContext = React.createContext<{\n  function: ();\n}>({ handler: () => {} });\n\nexport const useFunction = (): () => {\n  const { function } = React.useContext(FunctionContext);\n  return function;\n};\n\nexport class FunctionPlugin implements WebPlayerPlugin {\n  name = 'function-plugin';\n  private function: ();\n\n  constructor(fn = defaultFunction) {\n    this.function = fn;\n  }\n\n  applyWeb(wp: WebPlayer) {\n    wp.hooks.webComponent.tap(this.name, (Comp) => {\n      const { function } = this;\n\n      return () => (\n        <FunctionContext.Provider value={{ function }}>\n          <Comp />\n        </FunctionContext.Provider>\n      );\n    });\n  }\n")),(0,a.kt)("p",null,"Lastly React plugins can also act as a core plugin in cases where core functionality needs to be extended for the React plugin to work. Since both the ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerPlugin")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"WebPlayerPlugin")," are typescript interfaces a plugin can implement both and be considered a valid plugin. ")),(0,a.kt)("ios",null,"iOS Player Plugins are very similar to core and react plugins in both their composition and use. The `PlayerUI/Core` subspec exposes an interface `NativePlugin` that, much like the core `PlayerPlugin` interfaces, provides the necessary attributes that are required for an iOS Player plugin. A `pluginName` attributed is required, and a function `apply` is required that takes an instance of a Player implementation. Similarly to core plugins, in the `apply` function you have access to the Player object and access to the hooks. `apply` uses generics to future proof so plugins can be used for multiple Player implementations should they be created.",(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"player")," passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," exposes hooks from the core player, as well as hooks specific to that player implementation. For the current state of this project, the ",(0,a.kt)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," is the primary iOS Player, and exposes two hooks for the SwiftUI layer specifically:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"view")," hook allows you to modify the root view that will be displayed in the SwiftUIPlayer body. This is useful for applying changes to the environment for the SwiftUI view tree, or apply ViewModifiers and such."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"transition")," hook allows you to specify a ",(0,a.kt)("inlineCode",{parentName:"li"},"PlayerViewTransition")," object to be applied when the flow transitions from one view to another, to animate the transition.")),(0,a.kt)("p",null,"Below is an example of a basic ",(0,a.kt)("inlineCode",{parentName:"p"},"NativePlugin")," that sets a value in the EnvironmentValues when the plugin is included:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),'import PlayerUI\n\nclass EnvironmentPlugin: NativePlugin {\n    let pluginName = "EnvironmentPlugin"\n\n    func apply<P>(player: P) where P: HeadlessPlayer {\n      guard let player = player as? SwiftUIPlayer else { return }\n      player.hooks.view.tap(name: pluginName) { (view: AnyView) -> AnyView in\n          return AnyView(view.environment(\\.someEnvironmentKey, someValue))\n      }\n    }\n}\n')))))}c.isMDXComponent=!0}},function(e){e.O(0,[6525,204,3795,9774,2888,179],(function(){return n=80138,e(e.s=n);var n}));var n=e.O();_N_E=n}]);