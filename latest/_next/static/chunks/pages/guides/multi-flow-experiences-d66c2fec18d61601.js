(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4924],{30876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"===typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"===typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},25848:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/multi-flow-experiences",function(){return t(97251)}])},43857:function(e,n,t){"use strict";t.d(n,{Z:function(){return O}});var r=t(52322),a=t(2784),i=t(97729),l=t(64033),o=t(30876),s=t(21925),p=t(76808),c=t(55165),d=t(63637),u=t.n(d);function m(){return(m=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function f(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}var h=["id"],g=["id"],y="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},w=(0,p.Gp)((function(e,n){var t=(0,p.mq)("SkipLink",e),r=(0,p.Lr)(e),i=r.id,l=void 0===i?y:i,o=f(r,h),s=u()({},k,t);return a.createElement(p.m$.a,m({},o,{ref:n,href:"#"+l,__css:s}))}));c.Ts&&(w.displayName="SkipNavLink");var b=(0,p.Gp)((function(e,n){var t=e.id,r=void 0===t?y:t,i=f(e,g);return a.createElement(p.m$.div,m({ref:n,id:r,tabIndex:-1,style:{outline:0}},i))}));c.Ts&&(b.displayName="SkipNavContent");var x=t(46977),v=t(96882),j=function(e){var n;return(0,r.jsxs)(l.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,r.jsx)(l.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(n=e.tableOfContents)||void 0===n?void 0:n.map((function(e){return(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},N=function(e){var n=a.useContext(x.Il).bannerExpanded,t="72px",i="calc(100vh - 88px - ".concat(n?t:"0px",")"),o="calc(100vh - 88px - 105px - ".concat(n?t:"0px",")");return(0,r.jsxs)(l.xu,{minH:"100vh",children:[(0,r.jsx)(w,{children:"Skip to Main Content"}),(0,r.jsxs)(l.kC,{flexDir:"column",padding:"2",children:[(0,r.jsx)(v._g,{}),(0,r.jsx)(l.iz,{}),(0,r.jsx)(l.kC,{children:(0,r.jsx)(l.xu,{as:"main",w:"100%",mx:"auto",children:(0,r.jsxs)(l.xu,{display:{md:"flex"},children:[(0,r.jsx)(l.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4",children:(0,r.jsx)(v.Hy,{})}),(0,r.jsxs)(l.xu,{flex:"1",minW:"0",overflow:"auto",maxH:i,children:[(0,r.jsxs)(l.xu,{minH:o,children:[(0,r.jsx)(b,{}),e.children]}),(0,r.jsx)(l.xu,{pt:"20",children:(0,r.jsx)(v.$_,{})})]}),e.tableOfContents&&(0,r.jsx)(j,{tableOfContents:e.tableOfContents})]})})})]})]})};function O(e){return function(n){return(0,r.jsxs)(N,{children:[(0,r.jsx)(i.default,{children:(0,r.jsxs)("title",{children:["Player - ",e.title]})}),(0,r.jsx)(l.kC,{alignItems:"center",children:(0,r.jsx)(l.W2,{maxW:"container.lg",children:(0,r.jsx)(o.Zo,{components:s.tl,children:n.children})})})]})}}},97251:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});t(2784);var r=t(30876),a=t(43857);function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l,o=(l="PlatformTabs",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",Object.assign({},e))}),s={},p=(0,a.Z)({title:"Multi-Flow Experiences",tableOfContents:[{text:"Multi-Flow Experiences",id:"multi-flow-experiences",level:1},{text:"Flow Manager",id:"flow-manager",level:2},{text:"Managed Player",id:"managed-player",level:2},{text:"Callbacks and Error Handling",id:"callbacks-and-error-handling",level:3},{text:"Error Handling",id:"error-handling",level:3}]});function c(e){var n=e.components,t=i(e,["components"]);return(0,r.kt)(p,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",Object.assign({},{id:"multi-flow-experiences"}),(0,r.kt)("a",Object.assign({parentName:"h1"},{href:"#multi-flow-experiences"}),"Multi-Flow Experiences")),(0,r.kt)("p",null,"One large use-case for Player involves orchestrating experiences that span multiple screens that may need to communicate with a back-end between stages. This is commonly used for stepped-flows, onboarding workflows, etc, and manifests as using the response from one Player flow to determine the next one. To facilitate this back-and-forth, Player ships with support for creating a flow-manager.  "),(0,r.kt)("h2",Object.assign({},{id:"flow-manager"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#flow-manager"}),"Flow Manager")),(0,r.kt)("p",null,"A flow-manager is an interface for asynchronously stepping through a series of flows in a multi-flow experience. Its API mirrors that of the JavaScript ",(0,r.kt)("a",Object.assign({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"}),"iteration protocol"),"; each flow is loaded by calling ",(0,r.kt)("inlineCode",{parentName:"p"},".next()")," using the result of the previous flow (if one exists). Implementations are able to leverage this response to retrieve the ",(0,r.kt)("em",{parentName:"p"},"next")," flow in the series, or mark the cycle as complete by returning ",(0,r.kt)("inlineCode",{parentName:"p"},"done"),". "),(0,r.kt)("p",null,(0,r.kt)("img",Object.assign({parentName:"p"},{src:"/flow-manager.png?darkModeInvert",alt:"Flow Manager"}))),(0,r.kt)("p",null,"The standardization of this contract allows any client to manage a series of Player flows without needing to repeat the underlying Player-side orchestration."),(0,r.kt)("p",null,"An abridged version of the API is described below:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface FlowManager {\n  /**\n   * An iterator implementation that takes the result of the previous flow and returns a new one or completion marker.\n   * If `done: true` is returned, the multi-flow experience is completed.\n   *\n   * @param previousValue - The result of the previous flow.\n   */\n  next: (prevResponse: CompletedState) => Promise<FinalState | NextState<Flow>>;\n\n  /**\n   * Called when the flow is ended early (the react tree is torn down)\n   * Allows clients the opportunity to save-data before destroying the tree\n   */\n  terminate?: (player: Player) => void;\n}\n")),(0,r.kt)("p",null,"Shown above is also an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"terminate")," callback. This is used when a flow is ended prematurely (user closes a view) as a means of gathering any critical information from the running player before shutting down. "),(0,r.kt)("h2",Object.assign({},{id:"managed-player"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#managed-player"}),"Managed Player")),(0,r.kt)(o,{mdxType:"PlatformTabs"},(0,r.kt)("react",null,(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayer")," component from the ",(0,r.kt)("inlineCode",{parentName:"p"},"@player-ui/react")," module orchestrates running flows through Player using a provided ",(0,r.kt)("inlineCode",{parentName:"p"},"flow-manager"),". Any provided configuration/plugins will be passed along to the underlying ",(0,r.kt)("inlineCode",{parentName:"p"},"WebPlayer")," instance, and ",(0,r.kt)("inlineCode",{parentName:"p"},"React.Suspense")," is used while awaiting the next ",(0,r.kt)("inlineCode",{parentName:"p"},"flow-manager")," response. "),(0,r.kt)("p",null,"Simply render the ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayer")," with a flow-manager: "),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"import { ManagedPlayer } from '@player-ui/react';\n\nexport const App = () => {\n  return <ManagedPlayer manager={myFlowManager} />\n}\n")),(0,r.kt)("h3",Object.assign({},{id:"callbacks-and-error-handling"}),(0,r.kt)("a",Object.assign({parentName:"h3"},{href:"#callbacks-and-error-handling"}),"Callbacks and Error Handling")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayer")," also includes callbacks for ",(0,r.kt)("inlineCode",{parentName:"p"},"onComplete")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onError")," to handle the completion of a multi-flow experience. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fallbackComponent")," is an optional prop that accepts a React component that will be rendered in case of an error. It\u2019s given access to the thrown ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," object, as well as a ",(0,r.kt)("inlineCode",{parentName:"p"},"retry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," callback: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retry")," \u2014 Retries the last failed request (the last call to ",(0,r.kt)("inlineCode",{parentName:"li"},"next()"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reset")," \u2014 Restarts the multi-flow from the begining, calling ",(0,r.kt)("inlineCode",{parentName:"li"},"next()")," with an empty context. "))),(0,r.kt)("ios",null,(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayer")," SwiftUI Component from the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerUI/SwiftUI")," subspec orchestrates running flows through Player using a provided ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowManager"),". Any provided configuration or plugins are passed along to the underlying ",(0,r.kt)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," instance. "),(0,r.kt)("p",null,"When constructing the ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayer")," you supply views to be used for error scenarios, as well as what is displayed while the FlowManager is fetching flows."),(0,r.kt)("h3",Object.assign({},{id:"error-handling"}),(0,r.kt)("a",Object.assign({parentName:"h3"},{href:"#error-handling"}),"Error Handling")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fallback")," parameter receives a ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagedPlayerErrorContext")," object when called, this object contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," that was thrown, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"retry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," functions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retry")," \u2014 Retries the last failed request (the last call to ",(0,r.kt)("inlineCode",{parentName:"li"},"next()"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reset")," \u2014 Restarts the multi-flow from the begining, calling ",(0,r.kt)("inlineCode",{parentName:"li"},"next()")," with an empty context. ")),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),'import PlayerUI\n\nstruct App: View {\n    var body: some View {\n        ManagedPlayer(\n            plugins: [...],\n            flowManager: myFlowManager,\n            onComplete: { result in },\n            fallback: { errorContext in Text("Error!") },\n            loading: { Text("Loading...") }\n        )\n    }\n}\n')))))}c.isMDXComponent=!0}},function(e){e.O(0,[6525,204,3795,9774,2888,179],(function(){return n=25848,e(e.s=n);var n}));var n=e.O();_N_E=n}]);