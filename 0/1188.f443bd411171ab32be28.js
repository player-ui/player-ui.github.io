"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[1188],{83190:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>h});var n=a(52112);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),y=i,h=c["".concat(l,".").concat(y)]||c[y]||g[y]||s;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},11188:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});a(52112);var n=a(83190),i=a(60742);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s.apply(this,arguments)}const r=(o="PlatformTabs",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.yg)("div",e)});var o;const l={},d=(0,i.A)({title:"Custom Assets",tableOfContents:[{text:"Custom Assets",id:"custom-assets",level:1},{text:"Create Your Asset",id:"create-your-asset",level:3},{text:"Register it Using a Plugin",id:"register-it-using-a-plugin",level:3},{text:"Rendering Nested Assets",id:"rendering-nested-assets",level:3},{text:"Data",id:"data",level:3},{text:"ModelReference",id:"modelreference",level:4},{text:"WrappedFunction",id:"wrappedfunction",level:4},{text:"WrappedAsset",id:"wrappedasset",level:4},{text:"View",id:"view",level:3},{text:"Asset",id:"asset",level:3},{text:"UncontrolledAsset",id:"uncontrolledasset",level:4},{text:"ControlledAsset",id:"controlledasset",level:4},{text:"Linking the View",id:"linking-the-view",level:4},{text:"Additional Topics",id:"additional-topics",level:3},{text:"Interacting with the Data Model without a transform",id:"interacting-with-the-data-model-without-a-transform",level:4},{text:"Registering your Asset",id:"registering-your-asset",level:4},{text:"Why Would I Register my Asset as a Variant?",id:"why-would-i-register-my-asset-as-a-variant",level:5},{text:"Extending DecodableAsset",id:"extending-decodableasset",level:3},{text:"Implementing initView",id:"implementing-initview",level:4},{text:"Implementing hydrate",id:"implementing-hydrate",level:4},{text:"Accessing Data",id:"accessing-data",level:4},{text:"Nested assets",id:"nested-assets",level:4},{text:"Styling",id:"styling",level:4},{text:"Registering assets",id:"registering-assets",level:3},{text:"Partial match asset registration overrides",id:"partial-match-asset-registration-overrides",level:4}]});function p(e){let{components:t,...a}=e;return(0,n.yg)(d,s({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"custom-assets"},(0,n.yg)("a",{parentName:"h1",href:"#custom-assets"},"Custom Assets")),(0,n.yg)("p",null,"One of the conscious design decisions we made when building Player was to abstract away the actual asset implementation and open it up for users to bring their own when using Player. This way you can seamlessly integrate Player into your existing experiences and reuse UI assets you may have already built. Below we’ve outlined the way to build custom assets on the various platforms Player supports."),(0,n.yg)(r,{mdxType:"PlatformTabs"},(0,n.yg)("react",null,(0,n.yg)("h3",{id:"create-your-asset"},(0,n.yg)("a",{parentName:"h3",href:"#create-your-asset"},"Create Your Asset")),(0,n.yg)("p",null,"First and foremost you need to create a component to handle rendering of your asset. Without any form of transforms, the props to the component will be those from the incoming player content. It’s recommended that you attach the ",(0,n.yg)("inlineCode",{parentName:"p"},"id"),", and any other html properties to the root of the asset’s tree:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},"const CustomAssetComp = (props) => {\n  return (\n    <div id={props.id} style={{ color: 'purple' }}>\n      {props.text}\n    </div>\n  );\n};\n")),(0,n.yg)("p",null,"Assuming your authored JSON has a string property named text, this will render that."),(0,n.yg)("h3",{id:"register-it-using-a-plugin"},(0,n.yg)("a",{parentName:"h3",href:"#register-it-using-a-plugin"},"Register it Using a Plugin")),(0,n.yg)("p",null,"Now that we have a React component to render our asset, let’s create a plugin to register with Player:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},"class CustomAssetPlugin implements ReactPlayerPlugin{\n  applyReact(reactPlayer) {\n    new WebAssetProvider([['custom', CustomAssetComp]]).applyReact(reactPlayer);\n  }\n}\n")),(0,n.yg)("p",null,"Typically you register assets by type, but the registry acts by finding the most specific partial object match. This allows you to register more specific implementations for assets of the same type."),(0,n.yg)("h3",{id:"rendering-nested-assets"},(0,n.yg)("a",{parentName:"h3",href:"#rendering-nested-assets"},"Rendering Nested Assets")),(0,n.yg)("p",null,"Often times, assets contain a reference or slot to another asset. For this to function properly, the custom asset needs to defer to the React Player to render the sub-asset. Say for instance we change our custom asset to now support a ",(0,n.yg)("inlineCode",{parentName:"p"},"header")," property that takes another asset."),(0,n.yg)("p",null,"Use the ReactAsset Component from the ",(0,n.yg)("inlineCode",{parentName:"p"},"@player-ui/react")," package with the nested asset as props to dynamically determine the rendering implementation to use:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-jsx"},"import { ReactAsset } from '@player-ui/react';\n\nconst CustomAssetComp = (props) => {\n  return (\n    <div id={props.id} style={{ color: 'purple' }}>\n      {props.header && <ReactAsset {...props.header} />}\n      {props.text}\n    </div>\n  );\n};\n")),(0,n.yg)("p",null,"This would automatically find the appropriate handler for the ",(0,n.yg)("inlineCode",{parentName:"p"},"props.header")," asset and use that to render.")),(0,n.yg)("ios",null,(0,n.yg)("p",null,"SwiftUI Player assets are made of 3 parts:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"/#Data"},"Data"),": Decodable AssetData"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"/#View"},"View"),": A SwiftUI View"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"/#Asset"},"Asset"),": SwiftUIAsset implementation to tie the two together")),(0,n.yg)("h3",{id:"data"},(0,n.yg)("a",{parentName:"h3",href:"#data"},"Data")),(0,n.yg)("p",null,"SwiftUI Player relies on assets decoding data that conforms to ",(0,n.yg)("inlineCode",{parentName:"p"},"AssetData"),", this is necessary, because ",(0,n.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"type")," are needed to determine what registered Swift type to decode to. You can include any decodable types in this struct as needed to match the structure of the asset that is returned from the core player."),(0,n.yg)("p",null,"Beyond this, there are a few wrapper types that handle some player specific features:"),(0,n.yg)("h4",{id:"modelreference"},(0,n.yg)("a",{parentName:"h4",href:"#modelreference"},"ModelReference")),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"ModelReference")," is a wrapper that gets the raw JSValue from Player for a specific node in your asset data. This wrapper exists because if a reference to the data model is used in content, such as:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "asset": {\n    "id": "someId",\n    "type": "text",\n    "value": "{{count}}"\n  }\n}\n')),(0,n.yg)("p",null,"While ",(0,n.yg)("inlineCode",{parentName:"p"},"count")," will not necessarily be a string, in the underlying JavaScript layer, if the entire string value is just a reference to the data model, it is replaced with the exact value from the data model. This means that if ",(0,n.yg)("inlineCode",{parentName:"p"},"count")," is a number in the data model, when you receive it in the swift layer it will be an ",(0,n.yg)("inlineCode",{parentName:"p"},"Int"),". So ",(0,n.yg)("inlineCode",{parentName:"p"},"ModelReference")," gives you a quick helper to get it as a string:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"struct TextData: AssetData {\n  var id: String\n  var type: String\n  var value: ModelReference\n}\n...\ntextData.value.stringValue\n")),(0,n.yg)("p",null,"You can also access ",(0,n.yg)("inlineCode",{parentName:"p"},"someModelReference.rawValue")," if you need to access the underlying JSValue for some other casting."),(0,n.yg)("h4",{id:"wrappedfunction"},(0,n.yg)("a",{parentName:"h4",href:"#wrappedfunction"},"WrappedFunction")),(0,n.yg)("p",null,"JavaScript plugins loaded into the core player, when you have a plugin that extends JSBasePlugin, can transform the resolved asset before it reaches the Swift layer. In many situations, this results in functions being added to an asset to ensure that the same functionality is used on all platforms, and reduce code duplication. ",(0,n.yg)("inlineCode",{parentName:"p"},"WrappedFunction")," gives you a light wrapper to help decode and call those functions. It takes generic parameter that defines the return type of the function:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},'struct ActionData: AssetData {\n  var id: String\n  var type: String\n  var run: WrappedFunction<Void>\n}\n\n// You can pass any number of arguments to the function\n// so it\'s important to know what the transform added function\n// expects\n\ndata.run()\ndata.run("arg1", 2)\n')),(0,n.yg)("h4",{id:"wrappedasset"},(0,n.yg)("a",{parentName:"h4",href:"#wrappedasset"},"WrappedAsset")),(0,n.yg)("p",null,"Last but not least, ",(0,n.yg)("inlineCode",{parentName:"p"},"WrappedAsset")," represents another asset being defined as a part of this asset. This will be a very common pattern as Player content is intended to be semantic and dynamic. Therefore we need to know that there is an asset in our data, but not what it is, as the implementation is not guaranteed."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"struct ActionData: AssetData {\n  var id: String\n  var type: String\n  var label: WrappedAsset\n  var run: WrappedFunction<Void>\n}\n")),(0,n.yg)("p",null,"Rendering these nested assets will be described below."),(0,n.yg)("h3",{id:"view"},(0,n.yg)("a",{parentName:"h3",href:"#view"},"View")),(0,n.yg)("p",null,"The view for a SwiftUI Asset is a regular SwiftUI ",(0,n.yg)("inlineCode",{parentName:"p"},"View"),". Any standard SwiftUI components and concepts will work as normal. The only differentiating factor when it comes to Player assets, is the ",(0,n.yg)("inlineCode",{parentName:"p"},"WrappedAsset")," and rendering it. ",(0,n.yg)("inlineCode",{parentName:"p"},"WrappedAsset")," contains a ",(0,n.yg)("inlineCode",{parentName:"p"},"SwiftUIAsset?"),", so in the event it was not decodable, it will be ",(0,n.yg)("inlineCode",{parentName:"p"},"nil"),", otherwise, you can access it’s ",(0,n.yg)("inlineCode",{parentName:"p"},"view")," property to get a type-erased ",(0,n.yg)("inlineCode",{parentName:"p"},"AnyView")," and render it in your view:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"struct ActionView: View {\n  var body: some View {\n    Button(action: {}, label: {\n      if let label = decodedAssetData.label.asset {\n        label.view\n      }\n    })\n  }\n}\n")),(0,n.yg)("h3",{id:"asset"},(0,n.yg)("a",{parentName:"h3",href:"#asset"},"Asset")),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"SwiftUIAsset")," is the glue between the ",(0,n.yg)("inlineCode",{parentName:"p"},"View")," and the ",(0,n.yg)("inlineCode",{parentName:"p"},"Data"),". Player will handle decoding data, and updating the data in an ",(0,n.yg)("inlineCode",{parentName:"p"},"ObservableObject")," viewModel that contains the ",(0,n.yg)("inlineCode",{parentName:"p"},"Data")," you tell it to decode."),(0,n.yg)("h4",{id:"uncontrolledasset"},(0,n.yg)("a",{parentName:"h4",href:"#uncontrolledasset"},"UncontrolledAsset")),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"UncontrolledAsset")," is uncontrolled because you do not specify a ",(0,n.yg)("inlineCode",{parentName:"p"},"viewModel")," type, and receive an implicit ",(0,n.yg)("inlineCode",{parentName:"p"},"AssetViewModel<T: AssetData>"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"class ActionAsset: UncontrolledAsset<ActionData> {\n    // Populated for you, but copied here for reference\n    @ObservedObject var model: AssetViewModel<ActionData>\n}\n")),(0,n.yg)("h4",{id:"controlledasset"},(0,n.yg)("a",{parentName:"h4",href:"#controlledasset"},"ControlledAsset")),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"ControlledAsset")," lets you define the viewModel type, as long as it subclasses ",(0,n.yg)("inlineCode",{parentName:"p"},"AssetViewModel<T: AssetData>"),", this way you still receive updated data and user info whenever Player changes state, but you can add other functionality to the ",(0,n.yg)("inlineCode",{parentName:"p"},"viewModel"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"class ActionViewModel: AssetViewModel<ActionData> {\n    public required init(_ data: ActionData, userInfo: [CodingUserInfoKey: Any]) {\n      super.init(data, userInfo: userInfo)\n    }\n}\nclass ActionAsset: ControlledAsset<ActionData, ActionViewModel> {\n    // Populated for you, but copied here for reference\n    @ObservedObject var model: ActionViewModel\n}\n")),(0,n.yg)("h4",{id:"linking-the-view"},(0,n.yg)("a",{parentName:"h4",href:"#linking-the-view"},"Linking the View")),(0,n.yg)("p",null,"In either situation, your asset implementation needs only to override the view property and return the type erased view you want to use."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},"class ActionAsset: UncontrolledAsset<ActionData> {\n        public override var view: AnyView { AnyView(ActionView(model: model)) }\n}\n")),(0,n.yg)("h3",{id:"additional-topics"},(0,n.yg)("a",{parentName:"h3",href:"#additional-topics"},"Additional Topics")),(0,n.yg)("h4",{id:"interacting-with-the-data-model-without-a-transform"},(0,n.yg)("a",{parentName:"h4",href:"#interacting-with-the-data-model-without-a-transform"},"Interacting with the Data Model without a transform")),(0,n.yg)("p",null,"If data needs to be set or retrieved without the use of a transform, the ",(0,n.yg)("inlineCode",{parentName:"p"},"InProgressState")," is available in an environment object, where the ",(0,n.yg)("inlineCode",{parentName:"p"},"DataController")," can be accessed, as well as other utilities:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},'struct SomeView: View {\n  @Environment(\\.inProgressState) var state: InProgressState?\n  var body: some View {\n    Button(action: {\n      state?.controllers?.data.set(["count": 5])\n    }, label: {...})\n  }\n}\n')),(0,n.yg)("p",null,"If your experience will be used on multiple platforms, it is not advised to use this method, a transform will ensure the same logic is followed on all 3 platforms and is strongly encouraged."),(0,n.yg)("h4",{id:"registering-your-asset"},(0,n.yg)("a",{parentName:"h4",href:"#registering-your-asset"},"Registering your Asset")),(0,n.yg)("p",null,"When registering your asset with an ",(0,n.yg)("inlineCode",{parentName:"p"},"AssetRegistry"),", it can either be registered as a new type, if it is an entirely new construct, or registered as a variant of an existing asset type, to only be rendered under certain conditions."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},'// Convenience function for just registering for type\nplayer.assetRegistry.register("example", asset: ExampleAsset.self)\n')),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-swift"},'player.assetRegistry.register(["type": "example", "metaData": ["role": "someRole"]], for: ExampleAsset.self)\n')),(0,n.yg)("p",null,"In the latter case, it is recommended to extend the original asset, so as to avoid boilerplate for data and construction, and just override the render function. If your variant will have additional data decoded that the original asset does not have, you will need to create the whole asset."),(0,n.yg)("h5",{id:"why-would-i-register-my-asset-as-a-variant"},(0,n.yg)("a",{parentName:"h5",href:"#why-would-i-register-my-asset-as-a-variant"},"Why Would I Register my Asset as a Variant?")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Transform backed assets have functions that are attached to them, through shared JavaScript plugins. This simplifies setting data from the asset, by giving simple functions like ",(0,n.yg)("inlineCode",{parentName:"p"},"run")," in the reference ",(0,n.yg)("inlineCode",{parentName:"p"},"ActionAsset")," for example. Swift only asset types will not have any convenience functions.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Registering as a variant allows you to maintain usage of the transform backed asset as well as your new asset, so both can be used by the same ",(0,n.yg)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," instance, including in the same flow. This also maintains the semantics of Player content, an ",(0,n.yg)("inlineCode",{parentName:"p"},"action")," asset is always an ",(0,n.yg)("inlineCode",{parentName:"p"},"action")," type of interaction, but with ",(0,n.yg)("inlineCode",{parentName:"p"},"metaData"),", it can be displayed differently.")))),(0,n.yg)("android",null,(0,n.yg)("p",null,"In order to render an asset a renderer for that type must be registered in the Android Player. If a renderer is found, then Player will delegate rendering when that type is encountered, otherwise Player will skip that node. Creating and registering such a renderer requires the following:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#extending-decodableasset"},"Extending DecodableAsset"),(0,n.yg)("ol",{parentName:"li"},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#implementing-initview"},"Implementing ",(0,n.yg)("inlineCode",{parentName:"a"},"initView")," and ",(0,n.yg)("inlineCode",{parentName:"a"},"hydrate"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#accessing-data"},"Define data structure")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#nested-assets"},"Nested assets")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#styling"},"Styling")))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"#registering-assets"},"Registering assets"))),(0,n.yg)("h3",{id:"extending-decodableasset"},(0,n.yg)("a",{parentName:"h3",href:"#extending-decodableasset"},"Extending DecodableAsset")),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"DecodableAsset")," is a subclass of ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," that contains data decoding capabilities built on ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/Kotlin/kotlinx.serialization"},"Kotlinx Serialization"),". This is the recommended approach for creating an asset and will be consolidated with ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," in future versions of the Android Player. On top of the requirements for subclassing ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset"),", subclassing ",(0,n.yg)("inlineCode",{parentName:"p"},"DecodableAsset")," requires passing a ",(0,n.yg)("inlineCode",{parentName:"p"},"KSerializer<Data>")," for the data class that represents the data for that asset."),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," is the base structure used by Player to convert parsed content into Android Views. Each implementation is instantiated with an ",(0,n.yg)("inlineCode",{parentName:"p"},"AssetContext")," and is required to implement two methods, ",(0,n.yg)("inlineCode",{parentName:"p"},"initView")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"hydrate"),". The separation of logic between these two methods allow for views to be cached and optimize the render process. However, both of these methods are only used internally via the ",(0,n.yg)("inlineCode",{parentName:"p"},"render")," method. ",(0,n.yg)("inlineCode",{parentName:"p"},"render")," is the main entry point for getting the Android view representation of that asset. It automatically handles the caching and hydration optimizations, only rebuilding and rehydrating when a dependency has changed. The caller would be responsible for handling that view (i.e. injecting it into a ViewGroup)."),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," instance is ",(0,n.yg)("em",{parentName:"p"},"not")," guaranteed, meaning that state maintained within a ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," may not persist between ",(0,n.yg)("inlineCode",{parentName:"p"},"initView")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"hydrate")," calls. If state is required, that can be accomplished by creating a custom ",(0,n.yg)("inlineCode",{parentName:"p"},"View"),"."),(0,n.yg)("p",null,"Some asset implementations may encounter a situation where the cached view is no longer the corresponding representation of the asset. Under this circumstance, the asset can request a full re-render by calling ",(0,n.yg)("inlineCode",{parentName:"p"},"invalidateView")," from any point in the hydration context."),(0,n.yg)("h4",{id:"implementing-initview"},(0,n.yg)("a",{parentName:"h4",href:"#implementing-initview"},"Implementing ",(0,n.yg)("inlineCode",{parentName:"a"},"initView"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"fun initView(): View\n")),(0,n.yg)("p",null,"The only goal of ",(0,n.yg)("inlineCode",{parentName:"p"},"initView")," is to build an Android View. This can be done through inflation, programmatic building, or some framework, as long as the View that is returned represents the corresponding asset. Top-level view creation and any one-time configuration operations should be done in this step. It is best practice to ensure that any access of the asset model is not done in this phase, as ",(0,n.yg)("inlineCode",{parentName:"p"},"initView")," is not guaranteed to be called if the data changes."),(0,n.yg)("h4",{id:"implementing-hydrate"},(0,n.yg)("a",{parentName:"h4",href:"#implementing-hydrate"},"Implementing ",(0,n.yg)("inlineCode",{parentName:"a"},"hydrate"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"fun View.hydrate()\n")),(0,n.yg)("p",null,"Hydration is the process responsible for populating the view with the data from the asset model. Any dependencies on the data model should be handled in this step. This includes accessing data, transform functions, or even nested assets. Any views created in ",(0,n.yg)("inlineCode",{parentName:"p"},"hydrate")," will not be automatically cached, but will persist on the UI unless explicitly removed. It is necessary to be vigilant when constructing and removing these views."),(0,n.yg)("h4",{id:"accessing-data"},(0,n.yg)("a",{parentName:"h4",href:"#accessing-data"},"Accessing Data")),(0,n.yg)("p",null,"In most cases, there is some additional data that is used to make the rendering more meaningful. For instance, the intent of the previous ",(0,n.yg)("inlineCode",{parentName:"p"},"text")," asset example was to render a View that displayed the string contained in ",(0,n.yg)("inlineCode",{parentName:"p"},"value"),". Access to such data will be provided through a ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," member on the ",(0,n.yg)("inlineCode",{parentName:"p"},"DecodableAsset"),". This ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," member is a type specified when defining the subclass."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"class TextAsset(assetContext: AssetContext) : DecodableAsset<TextAsset.Data>(Data.serializer()) {\n\n    @Serializable\n    data class Data(\n       val value: String\n    )\n\n}\n")),(0,n.yg)("p",null,"With this defined, the ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," can be accessed as an instance of ",(0,n.yg)("inlineCode",{parentName:"p"},"TextAsset.Data"),". It’s important to note that if ",(0,n.yg)("inlineCode",{parentName:"p"},"value")," isn’t defined in the content, this will cause a crash because there isn’t a default value provided. If you have optional fields, make sure the data class is structured appropriately:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"@Serializable\ndata class Data(\n   val value: String? = null\n)\n")),(0,n.yg)("p",null,"As a fallback, data can still be accessed via the Asset instance attached to the AssetContext. The Asset instance is a link into the underlying asset node, which provides a set of getter methods to retrieve data."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},'// type specific getters should throw an error if the type doesn\'t conform\n// although, in some cases, the getter may just return null\nval stringToRender: String = asset.getString("value")\n')),(0,n.yg)("h4",{id:"nested-assets"},(0,n.yg)("a",{parentName:"h4",href:"#nested-assets"},"Nested assets")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'// ...\n{\n    "id": "some-card",\n    "type": "card",\n    "title": {\n        "asset": {\n            "id": "some-text",\n            "type": "text",\n            "value": "This is a text asset"\n        }\n    }\n}\n// ...\n')),(0,n.yg)("p",null,"Compound assets can be defined such that the asset model contains child assets. These child assets must be wrapped in an asset object. In the example above, there is an ",(0,n.yg)("inlineCode",{parentName:"p"},"card")," asset that delegates to a ",(0,n.yg)("inlineCode",{parentName:"p"},"text")," asset to render a title. The child asset can be directly described as a ",(0,n.yg)("inlineCode",{parentName:"p"},"RenderableAsset")," in the data class."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"@Serializable\ndata class Data(\n   val title: RenderableAsset? = null\n)\n")),(0,n.yg)("p",null,"A helper is provided to reduce overhead with rendering an asset into a layout. ",(0,n.yg)("inlineCode",{parentName:"p"},"into")," will show or hide the target ",(0,n.yg)("inlineCode",{parentName:"p"},"ViewGroup")," based on whether the ",(0,n.yg)("inlineCode",{parentName:"p"},"View")," is null."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"// title_container is a view extension referencing a FrameLayout in an XML layout\ndata.title.render() into title_container\n")),(0,n.yg)("h4",{id:"styling"},(0,n.yg)("a",{parentName:"h4",href:"#styling"},"Styling")),(0,n.yg)("p",null,"Styling can be done completely independently, but the API is designed such that ",(0,n.yg)("inlineCode",{parentName:"p"},"render")," can accept any number of style resources. This allows parent assets to declare any styles that they’d like the child asset to use. These styles are automatically overlaid onto the current Android Context."),(0,n.yg)("p",null,"In the above ",(0,n.yg)("inlineCode",{parentName:"p"},"card")," asset example, the ",(0,n.yg)("inlineCode",{parentName:"p"},"card")," may want to set some text styles to make any text that’s rendered look like a title (i.e. bold, larger, etc)."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"// from the card render\n// assuming that R.style.Text_Title defines these text styles\nval title: View = data.title.render(R.style.Text_Title)\n// the above is shorthand for:\nval title: View = data.title.withStyles(R.style.Text_Title).render()\n")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"// from the text render\n// create TextView with the styled context\nfun initView() = TextView(context)\n\n// ensure that the provided view is a TextView and set the text accordingly\n// otherwise, invalidate the view\nfun View.hydrate() {\n    when (this) {\n        is TextView -> text = data.value\n        else -> invalidateView()\n    }\n}\n")),(0,n.yg)("h3",{id:"registering-assets"},(0,n.yg)("a",{parentName:"h3",href:"#registering-assets"},"Registering assets")),(0,n.yg)("p",null,"Registering assets is done in the ",(0,n.yg)("inlineCode",{parentName:"p"},"AndroidPlayerPlugin"),". Each plugin only needs to implement an ",(0,n.yg)("inlineCode",{parentName:"p"},"apply")," method which gives the plugin the opportunity to supplement core player functionality. The ",(0,n.yg)("inlineCode",{parentName:"p"},"AndroidPlayer")," instance contains an asset registry where assets should be register. A helper method has been created to make registration as simple as providing the type and a factory. The factory method must take an AssetContext, and is recommended to just be the constructor of your asset."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},'// registering "some-asset" with SomeAsset constructor\nandroidPlayer.registerAsset("some-asset", ::SomeAsset)\n')),(0,n.yg)("h4",{id:"partial-match-asset-registration-overrides"},(0,n.yg)("a",{parentName:"h4",href:"#partial-match-asset-registration-overrides"},"Partial match asset registration overrides")),(0,n.yg)("p",null,"This allows registration of multiple assets for the same type, but can match based on other parts of the object"),(0,n.yg)("p",null,"Consider the following asset structure with metaData:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'// ...\n{\n    // unique identifier to distinguish between other assets in the content\n    "id": "some-asset",\n    // type identifier that is used to determine how to render\n    "type": "action",\n    // additional fields used for rendering\n    "label": {...},\n    // metadata\n    "metaData": {\n        "role": "back"\n    }\n}\n// ...\n')),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},'// registering "action" with BackActionAsset constructor\nval map = mapOf("type" to "action", "metaData" to mapOf("role" to "back"))\nandroidPlayer.assetRegistry.set(map, ::BackActionAsset)\n')),(0,n.yg)("p",null,"This asset will only be used when decoding a view in the JSON tree that is type action, and has the ",(0,n.yg)("inlineCode",{parentName:"p"},"back")," role.\nIn this scenario, the custom action asset implementation would still have access to the transformed values of a regular action asset, such as the ",(0,n.yg)("inlineCode",{parentName:"p"},"run")," method."),(0,n.yg)("p",null,"When creating a new plugin, remember to register it when building the AndroidPlayer!"))),(0,n.yg)("hr",null),(0,n.yg)("p",null,(0,n.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/assets/custom.mdx"},"Help to improve this page")))}p.isMDXComponent=!0},60742:(e,t,a)=>{a.d(t,{A:()=>x});var n=a(52112),i=a(9495),s=a(32532),r=a(83190),o=a(48884),l=a(90283),d=a(14769),p=a(63420),c=a(23013),g=a(47482),y=a(52947),h=a(4380),u=a(13516),m="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var w=(0,c.R)((function(e,t){const a=(0,g.Vl)("SkipLink",e),{id:n=m,...i}=(0,y.MN)(e);return(0,u.jsx)(h.B.a,{...i,ref:t,href:`#${n}`,__css:f(a)})}));w.displayName="SkipNavLink";var v=(0,c.R)((function(e,t){const{id:a=m,...n}=e;return(0,u.jsx)(h.B.div,{ref:t,id:a,tabIndex:-1,style:{outline:0},...n})}));v.displayName="SkipNavContent";var b=a(67435),N=a(63192);const A=e=>n.createElement(l.az,{display:{base:"none",xl:"block"}},"Table Of Contents",n.createElement(d._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>n.createElement("li",{key:e.text},n.createElement("a",{href:`#${e.id}`},e.text)))))),C=e=>{const{bannerExpanded:t}=n.useContext(b.BR),a="72px",s=`calc(100vh - 88px - ${t?a:"0px"})`,r=`calc(100vh - 88px - 105px - ${t?a:"0px"})`;return n.createElement(l.az,{minH:"100vh"},n.createElement(w,null,"Skip to Main Content"),n.createElement(i.s,{flexDir:"column",padding:"2"},n.createElement(N.IS,null),n.createElement(p.c,null),n.createElement(i.s,null,n.createElement(l.az,{as:"main",w:"100%",mx:"auto"},n.createElement(l.az,{display:{md:"flex"}},n.createElement(l.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:s,pr:"8",ml:"4"},n.createElement(N.E1,null)),n.createElement(l.az,{flex:"1",minW:"0",overflow:"auto",maxH:s},n.createElement(l.az,{minH:r},n.createElement(v,null),e.children),n.createElement(l.az,{pt:"20"},n.createElement(N.wi,null))),e.tableOfContents&&n.createElement(A,{tableOfContents:e.tableOfContents}))))))};function x(e){return e=>n.createElement(C,null,n.createElement(i.s,{alignItems:"center"},n.createElement(s.m,{maxW:"container.lg"},n.createElement(r.xA,{components:o.Ul},e.children))))}}}]);
//# sourceMappingURL=1188.f443bd411171ab32be28.js.map