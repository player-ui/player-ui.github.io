(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[584],{30876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"===typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"===typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},41569:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/content/data-expressions",function(){return t(60973)}])},43857:function(e,n,t){"use strict";t.d(n,{Z:function(){return O}});var a=t(52322),r=t(2784),i=t(97729),o=t(64033),s=t(30876),l=t(21925),p=t(76808),d=t(55165),u=t(63637),c=t.n(u);function m(){return(m=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function h(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}var f=["id"],g=["id"],k="chakra-skip-nav",b={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},y=(0,p.Gp)((function(e,n){var t=(0,p.mq)("SkipLink",e),a=(0,p.Lr)(e),i=a.id,o=void 0===i?k:i,s=h(a,f),l=c()({},b,t);return r.createElement(p.m$.a,m({},s,{ref:n,href:"#"+o,__css:l}))}));d.Ts&&(y.displayName="SkipNavLink");var x=(0,p.Gp)((function(e,n){var t=e.id,a=void 0===t?k:t,i=h(e,g);return r.createElement(p.m$.div,m({ref:n,id:a,tabIndex:-1,style:{outline:0}},i))}));d.Ts&&(x.displayName="SkipNavContent");var v=t(46977),N=t(96882),j=function(e){var n;return(0,a.jsxs)(o.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(o.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(n=e.tableOfContents)||void 0===n?void 0:n.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},w=function(e){var n=r.useContext(v.Il).bannerExpanded,t="72px",i="calc(100vh - 88px - ".concat(n?t:"0px",")"),s="calc(100vh - 88px - 105px - ".concat(n?t:"0px",")");return(0,a.jsxs)(o.xu,{minH:"100vh",children:[(0,a.jsx)(y,{children:"Skip to Main Content"}),(0,a.jsxs)(o.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(N._g,{}),(0,a.jsx)(o.iz,{}),(0,a.jsx)(o.kC,{children:(0,a.jsx)(o.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(o.xu,{display:{md:"flex"},children:[(0,a.jsx)(o.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4",children:(0,a.jsx)(N.Hy,{})}),(0,a.jsxs)(o.xu,{flex:"1",minW:"0",overflow:"auto",maxH:i,children:[(0,a.jsxs)(o.xu,{minH:s,children:[(0,a.jsx)(x,{}),e.children]}),(0,a.jsx)(o.xu,{pt:"20",children:(0,a.jsx)(N.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(j,{tableOfContents:e.tableOfContents})]})})})]})]})};function O(e){return function(n){return(0,a.jsxs)(w,{children:[(0,a.jsx)(i.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(o.kC,{alignItems:"center",children:(0,a.jsx)(o.W2,{maxW:"container.lg",children:(0,a.jsx)(s.Zo,{components:l.tl,children:n.children})})})]})}}},60973:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});t(2784);var a=t(30876),r=t(43857);function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o={},s=(0,r.Z)({title:"Data & Expressions",tableOfContents:[{text:"Data",id:"data",level:1},{text:"Bindings",id:"bindings",level:2},{text:"Query Syntax",id:"query-syntax",level:3},{text:"Nested Bindings",id:"nested-bindings",level:3},{text:"Nested Expressions",id:"nested-expressions",level:3},{text:"Expressions",id:"expressions",level:1},{text:"Using Expressions and Data in a View",id:"using-expressions-and-data-in-a-view",level:2},{text:"Using Expressions for Inline Text Formatting",id:"using-expressions-for-inline-text-formatting",level:2},{text:"Built-in Expressions",id:"built-in-expressions",level:2}]});function l(e){var n=e.components,t=i(e,["components"]);return(0,a.kt)(s,Object.assign({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"data"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#data"}),"Data")),(0,a.kt)("p",null,"Data is central to a lot of the functionality and features of Player. The easiest way to deal with data is to supply it in the initial payload when starting a flow. This will ",(0,a.kt)("em",{parentName:"p"},"seed")," the model with data and allow you to easily reference values"),(0,a.kt)("h2",Object.assign({},{id:"bindings"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#bindings"}),"Bindings")),(0,a.kt)("p",null,"A binding is a representation of a path within the data-model. In simple terms, it\u2019s a dot (",(0,a.kt)("inlineCode",{parentName:"p"},"."),") separated string showing the path of the properties within the data object."),(0,a.kt)("p",null,"Given the following data model:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'data: {\n  foo: {\n    bar: {\n      baz: "hello world!"\n    },\n    array: [\n      {\n        property: "another value"\n      }\n    ]\n  },\n}\n')),(0,a.kt)("p",null,"Then the binding ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar.baz")," will reference the value ",(0,a.kt)("inlineCode",{parentName:"p"},'"hello world!"'),". Assets that write data to the data model would overwrite ",(0,a.kt)("inlineCode",{parentName:"p"},'"hello world"')," when setting to that binding. Using brackets instead of the dot-notation is accepted, similar to accessig properties in real Javascript objects. Unlike Javascript, when using the bracket-notation, surrounding quotes are only required if you need a literal ",(0,a.kt)("inlineCode",{parentName:"p"},"[")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"]")," in your property name."),(0,a.kt)("p",null,"The following bindings are all equivalent:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo.bar.baz")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo['bar'][\"baz\"]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo[bar].baz"))),(0,a.kt)("p",null,"For most bindings, it is recommended to use the dot-notation for all properties when possible. Doing so is consistent, simpler, and the most performant."),(0,a.kt)("p",null,"Note that you can also use integers to access into arrays in the data model. ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar.array.0.property")," will reference ",(0,a.kt)("inlineCode",{parentName:"p"},'"another value"'),"."),(0,a.kt)("h3",Object.assign({},{id:"query-syntax"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#query-syntax"}),"Query Syntax")),(0,a.kt)("p",null,"Bindings also allow for query access into arrays using a ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"value")," pair to find the first matching item in the array."),(0,a.kt)("p",null,"The query syntax takes the form ",(0,a.kt)("inlineCode",{parentName:"p"},"array[key=value]"),". Where ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," is the property name you want to compare and ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is the value you want to match against. The binding resolves to the first item in the array that has a matching property and value."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"data: {\n  model: {\n    array: [\n      {\n        name: 'alpha',\n        foo: 'bar',\n      },\n      {\n        name: 'bravo',\n        foo: 'baz',\n      },\n      {\n        name: 'charlie',\n        foo: 'qux',\n      },\n    ];\n  }\n}\n")),(0,a.kt)("p",null,"For the given data, the following bindings are all equivalent and will point to the first element in the array:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model.array[0]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'model.array[name="alpha"]')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'model.array[foo="bar"]'))),(0,a.kt)("p",null,"Quotes around the key or the value of the query are only required when needing to use ambiguous literal characters, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"["),", ",(0,a.kt)("inlineCode",{parentName:"p"},"]"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"="),"."),(0,a.kt)("p",null,"Note that the query syntax resolves to the object of the matching query, not to any specific property on the object. If you want to access a specific property, add additional path information after the query. E.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"model.array[name=bravo].name"),"."),(0,a.kt)("h3",Object.assign({},{id:"nested-bindings"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#nested-bindings"}),"Nested Bindings")),(0,a.kt)("p",null,"Nested bindings allow you to construct a binding path that is relative to a 2nd path or based on some dynamic property. This behavior follows similar model lookup rules that can be used elsewhere in Player."),(0,a.kt)("p",null,"The syntax for a nested binding is a subpath that is wrapped in double curly braces. E.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"normal.path.{{nested.path}}.more.normal.path"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'data: {\n  colors: {\n    yellow: {\n      hex: "#ffff00"\n      rgb: "rgb(255, 255, 0)"\n    },\n    red: {\n      hex: "#ff0000",\n      rgb: "rgb(255, 0, 0)"\n    }\n  },\n  favorites: {\n    color: "yellow",\n    food: "tacos",\n    nestedPath: "colors.yellow"\n  }\n}\n')),(0,a.kt)("p",null,"With this data model, ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.{{favorite.color}}.hex")," will return the hex value for yellow, ",(0,a.kt)("inlineCode",{parentName:"p"},'"#ffff00"'),". Any syntax for a regular binding is also valid as part of a nested binding, including further nesting."),(0,a.kt)("p",null,"References to bindings that contains sub-paths ",(0,a.kt)("inlineCode",{parentName:"p"},"{{favorite.nestedPath}}.hex")," will expand to ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.yellow.hex"),"."),(0,a.kt)("h3",Object.assign({},{id:"nested-expressions"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#nested-expressions"}),"Nested Expressions")),(0,a.kt)("p",null,"Just like binding segments can contain other bindings, segments can also contain expressions. For this, they use a segment surrounded by `:"),(0,a.kt)("p",null,"Suppose there exists a ",(0,a.kt)("inlineCode",{parentName:"p"},"getFavoriteColor()")," expression that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow"),". The following path would resolve to ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.yellow.hex"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{}),"colors.`getFavoriteColor()`.hex\n")),(0,a.kt)("p",null,"Similar to the bracket notation: ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),". Paths can use brackets instead of dots for paths:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{}),"colors[`getFavoriteColor()`].hex\n")),(0,a.kt)("h1",Object.assign({},{id:"expressions"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#expressions"}),"Expressions")),(0,a.kt)("p",null,"Expressions are callable functions that allow for dynamic behavior of Player and it\u2019s views."),(0,a.kt)("p",null,"These functions can be used in ",(0,a.kt)("inlineCode",{parentName:"p"},"ACTION")," nodes in the navigation section, calculated values in a property of an asset, or anywhere else expressions are valid."),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/expression"}),"Expression Plugin")," for registering custom functions."),(0,a.kt)("h2",Object.assign({},{id:"using-expressions-and-data-in-a-view"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#using-expressions-and-data-in-a-view"}),"Using Expressions and Data in a View")),(0,a.kt)("p",null,"Expressions in the view are strings wrapped in: ",(0,a.kt)("inlineCode",{parentName:"p"},"@[")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"]@"),"."),(0,a.kt)("p",null,"For instance, to call a ",(0,a.kt)("inlineCode",{parentName:"p"},"sum")," expression you may use:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "value": "The sum is @[ sum(1, 2, 3) ]@ dollars"\n}\n')),(0,a.kt)("p",null,"Player will handle resolving that value into the proper string before handing it to the UI layers to render. (",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": "The sum is 6 dollars" }'),")"),(0,a.kt)("p",null,"If an expression is the sole property value:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "value": "@[ sum(1, 2, 3) ]@"\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"raw")," value of the expression will replace that property rather than being wrapped in a string: ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": 6 }')),(0,a.kt)("p",null,"Data is referenced by wrapping the binding in ",(0,a.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"}}"),". This can be used in an expression: ",(0,a.kt)("inlineCode",{parentName:"p"},"@[ {{foo.bar}} + {{foo.baz}} ]@")," or within a string: ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": "Hello {{foo.name}}" }')),(0,a.kt)("p",null,"Similar to expressions, any property only consisting of a data value lookup, will get replaced by the raw value."),(0,a.kt)("h2",Object.assign({},{id:"using-expressions-for-inline-text-formatting"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#using-expressions-for-inline-text-formatting"}),"Using Expressions for Inline Text Formatting")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"format")," expression is used to replace provided value with appropriate format.\nFor instance, to format a number into ",(0,a.kt)("inlineCode",{parentName:"p"},"currency"),", you may use:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),"{\n  \"value\": \"Total amount is: @[ format('12122016', 'currency') ]@\"\n}\n")),(0,a.kt)("p",null,"To see the list of currently supported format types, check out ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/common-types.md"}),"Common Types Plugin"),"."),(0,a.kt)("h2",Object.assign({},{id:"built-in-expressions"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#built-in-expressions"}),"Built-in Expressions")),(0,a.kt)("p",null,"There are a few expressions built into Player. These are pretty basic, so if you\u2019re looking for extend this \u2014 check out the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/common-expressions"}),"Common Expressions Plugin")," or the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/expression"}),"Expression Plugin")," to add more."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"name"),(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"description"),(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"arguments"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"getDataval")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Fetches a value from the model. This is equivalent to using the ",(0,a.kt)("inlineCode",{parentName:"td"},"{{foo.bar}}")," syntax."),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"setDataVal")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Sets a value from the model. This is equivalent to using ",(0,a.kt)("inlineCode",{parentName:"td"},"{{foo.bar}} = 'value'")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"value"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"deleteDataVal")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Clears a value from the model."),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"))))))}l.isMDXComponent=!0}},function(e){e.O(0,[6525,204,3795,9774,2888,179],(function(){return n=41569,e(e.s=n);var n}));var n=e.O();_N_E=n}]);