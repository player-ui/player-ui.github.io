"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[9311],{83190:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var a=t(52112);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,g=u["".concat(s,".").concat(c)]||u[c]||y[c]||l;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},29311:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});t(52112);var a=t(83190),r=t(60742);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}const i=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},o=i("PlatformTabs"),s=i("Alert"),p={},d=(0,r.A)({title:"Getting Started",tableOfContents:[{text:"Getting Started",id:"getting-started",level:1},{text:"Install Dependencies",id:"install-dependencies",level:3},{text:"Release Optimization",id:"release-optimization",level:4},{text:"Configuration",id:"configuration",level:3},{text:"Render Content",id:"render-content",level:3},{text:"ViewModel",id:"viewmodel",level:4},{text:"PlayerViewModel",id:"playerviewmodel",level:5},{text:"PlayerFragment",id:"playerfragment",level:5},{text:"JS Runtime",id:"js-runtime",level:4}]});function u(e){let{components:n,...t}=e;return(0,a.yg)(d,l({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"getting-started"},(0,a.yg)("a",{parentName:"h1",href:"#getting-started"},"Getting Started")),(0,a.yg)("p",null,"Getting started with Player is simple."),(0,a.yg)("h3",{id:"install-dependencies"},(0,a.yg)("a",{parentName:"h3",href:"#install-dependencies"},"Install Dependencies")),(0,a.yg)("p",null,"The first dependency you’ll need to pull in is the Player itself. Additionally, you’ll need an assets plugin to define any UI — we’ll use the reference assets as an example."),(0,a.yg)(o,{mdxType:"PlatformTabs"},(0,a.yg)("react",null,(0,a.yg)("p",null,"You can do this by running"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @player-ui/react\nyarn add @player-ui/reference-assets-plugin-react\n")),(0,a.yg)("p",null,"or"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @player-ui/react\nnpm install @player-ui/reference-assets-plugin-react\n"))),(0,a.yg)("ios",null,(0,a.yg)("p",null,"In your ",(0,a.yg)("inlineCode",{parentName:"p"},"Podfile")," you’ll need to add ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerUI")," as a dependency and the ",(0,a.yg)("inlineCode",{parentName:"p"},"ReferenceAssets")," plugin to use the base set of assets."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"source 'https://github.com/player-ui/player'\n\ntarget 'MyApp' do\n  # Add the pod to your target\n  pod 'PlayerUI'\n  pod 'PlayerUI/ReferenceAssets' # For example only\nend\n"))),(0,a.yg)("android",null,(0,a.yg)("p",null,"Configure the Android Player dependencies in your ",(0,a.yg)("inlineCode",{parentName:"p"},"build.gradle(.kts)")," files."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // Android Player\n    implementation("com.intuit.playerui:player:$playerVersion")\n    // Optional - reference assets\n    implementation("com.intuit.playerui.plugins:reference-assets:$playerVersion")\n}\n')),(0,a.yg)("h4",{id:"release-optimization"},(0,a.yg)("a",{parentName:"h4",href:"#release-optimization"},"Release Optimization")),(0,a.yg)("p",null,"The Android Player dependency automatically pulls in both the ",(0,a.yg)("inlineCode",{parentName:"p"},"dev")," as well as the ",(0,a.yg)("inlineCode",{parentName:"p"},"prod")," versions of the underlying JS scripts."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"dev")," scripts are handy for debugging shared JS code through the JS debugger in debug builds, but they are not necessary for consumer facing release builds."),(0,a.yg)("p",null,"To optimize the release bundles, it is highly recommended to exclude the ",(0,a.yg)("inlineCode",{parentName:"p"},"dev")," scripts, as well as enabling V8 to strip out unused code from the final bundle."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'buildTypes {\n    getByName("release") {\n        isMinifyEnabled = true\n        isShrinkResources = true\n        packagingOptions {\n            exclude("**/*.dev.js")\n        }\n    }\n}\n')))),(0,a.yg)(s,{status:"warning",description:"The reference assets aren't intended for production use. They exist as an example of how to create assets and can be used to help get started.",mdxType:"Alert"}),(0,a.yg)("h3",{id:"configuration"},(0,a.yg)("a",{parentName:"h3",href:"#configuration"},"Configuration")),(0,a.yg)("p",null,"Next, in your code you’ll need to initialize Player. This is where you would also initialize any plugins you want to use with Player and create the configuration for Player itself. Below is a minimal example of this."),(0,a.yg)(o,{mdxType:"PlatformTabs"},(0,a.yg)("react",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { ReactPlayer } from '@player-ui/react';\nimport { ReferenceAssetsPlugin } from '@player-ui/reference-assets-plugin-react';\n\n// create a new web-player instance\n\nconst reactPlayer = new ReactPlayer({\n  plugins: [new ReferenceAssetsPlugin()],\n});\n"))),(0,a.yg)("ios",null,(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," is just a normal SwiftUI View and can be inserted anywhere in your hierarchy."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},"import PlayerUI\n\nvar body: some View {\n  SwiftUIPlayer(\n    plugins: [ReferenceAssetsPlugin()],\n  )\n}\n"))),(0,a.yg)("android",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"// create Android Player with reference assets plugin\nval player = AndroidPlayer(\n    listOf(\n        ReferenceAssetsPlugin(),\n        // Any other plugins\n    )\n)\n")),(0,a.yg)("p",null,"Apart from providing a list of plugins while setting up ",(0,a.yg)("inlineCode",{parentName:"p"},"AndroidPlayer"),", you can also provide a ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," object that has the following options:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"debuggable")," - Indicates if the runtime is debuggable on android through chromium devtools, enabling this would let you set breakpoints in js code as you’re running it on android."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"coroutineExceptionHandler")," - ",(0,a.yg)("a",{parentName:"li",href:"https://kotlinlang.org/docs/exception-handling.html#coroutineexceptionhandler"},"CoroutineExceptionHandler")," should handle all uncaught exceptions while using the runtime coroutine scope."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"timeout")," - Timeout for the JS thread. If none is provided then it is set as ",(0,a.yg)("inlineCode",{parentName:"li"},"if (debuggable) Int.MAX_VALUE.toLong() else 5000"),".")))),(0,a.yg)("h3",{id:"render-content"},(0,a.yg)("a",{parentName:"h3",href:"#render-content"},"Render Content")),(0,a.yg)("p",null,"Now that you have a Player instance created. You’ll need to start it with some ",(0,a.yg)("a",{parentName:"p",href:"/content"},"content"),"."),(0,a.yg)(o,{mdxType:"PlatformTabs"},(0,a.yg)("react",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const content = {/* your content here */}\nreactPlayer.start(content);\n")),(0,a.yg)("p",null,"With Player running your content, you’ll need to actually render out what is processes. To do this, you can use the React Player’s component API to insert it into your React tree."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const MyApp = () => {\n  return <reactPlayer.Component />;\n};\n"))),(0,a.yg)("ios",null,(0,a.yg)("p",null,"Expanding on the ",(0,a.yg)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," creation above, providing a ",(0,a.yg)("inlineCode",{parentName:"p"},"flow")," will start the Player automatically, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"result")," will update the ",(0,a.yg)("inlineCode",{parentName:"p"},"Binding<Result<CompletedState, PlayerError>?>")," that you pass to it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},"import PlayerUI\n\nstruct MyApp: View {\n  @State var result: Result<CompletedState, PlayerError>? = nil\n  @ObservedObject var viewModel: MyViewModel\n  var body: some View {\n    SwiftUIPlayer(\n      flow: $viewModel.flowString,\n      plugins: [ReferenceAssetsPlugin()],\n      result: $result\n    )\n  }\n}\n"))),(0,a.yg)("android",null,(0,a.yg)("p",null,"To receive view updates, you must add a handler to render the views which are represented as ",(0,a.yg)("inlineCode",{parentName:"p"},"RenderableAsset"),"s."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"// handle view updates - should be done before starting the Player\nplayer.onUpdate { asset: RenderableAsset? ->\n    // render asset as View `into` view tree\n    asset?.render() into binding.playerContainer\n}\n\n// start Player\nplayer.start(content)\n")),(0,a.yg)("p",null,"When you’re done with Player, release any native runtime memory used to instantiate Player or run the flow."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"player.release()\n")),(0,a.yg)("p",null,"Creating your own ",(0,a.yg)("inlineCode",{parentName:"p"},"AndroidPlayer")," instance is fairly simple, but it grows in complexity when considering proper resources management and app orchestration. We provide a Fragment/ViewModel integration to make it easier to properly integrate into your app and account for these concerns. "),(0,a.yg)("h4",{id:"viewmodel"},(0,a.yg)("a",{parentName:"h4",href:"#viewmodel"},"ViewModel")),(0,a.yg)("p",null,"With the ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerViewModel")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerFragment"),", the above orchestration is done for you. All that is needed is to provide concrete implementations of each and add the fragment to your app."),(0,a.yg)("h5",{id:"playerviewmodel"},(0,a.yg)("a",{parentName:"h5",href:"#playerviewmodel"},"PlayerViewModel")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerViewModel")," requires an ",(0,a.yg)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," to be supplied in the constructor. The AsyncFlowIterator is what tells Player which flows to run. This can be hardcoded into the view model or expected as an argument, as shown below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"class SimplePlayerViewModel(flows: AsyncFlowIterator) : PlayerViewModel(flows) {\n    override val plugins = listOf(ReferenceAssetsPlugin())\n}\n")),(0,a.yg)("h5",{id:"playerfragment"},(0,a.yg)("a",{parentName:"h5",href:"#playerfragment"},"PlayerFragment")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerFragment")," is a simple Android ",(0,a.yg)("inlineCode",{parentName:"p"},"Fragment")," that only requires a specific ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerViewModel")," to be defined. If your view model requires the ",(0,a.yg)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," to be passed as part of the constructor, you can leverage the ",(0,a.yg)("inlineCode",{parentName:"p"},"PlayerViewModel.Factory")," to produce it, as shown below."),(0,a.yg)("p",null,"Specifically, this fragment takes a flow as an argument to the constructor and creates a single-flow ",(0,a.yg)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," instance using the pseudo-constructor helper."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"class SimplePlayerFragment(override val flow: String) : PlayerFragment() {\n    override val playerViewModel by viewModels<SimplePlayerViewModel> {\n        PlayerViewModel.Factory(AsyncFlowIterator(flow), ::SimplePlayerViewModel)\n    }\n}\n")),(0,a.yg)("h4",{id:"js-runtime"},(0,a.yg)("a",{parentName:"h4",href:"#js-runtime"},"JS Runtime")),(0,a.yg)("p",null,"As the core Player is written in TypeScript, we need a JVM compatible JavaScript runtime to power a JVM based Player. There are several options to choose from, however, deciding on a specific runtime implementation is difficult to do at the library layer. Different use cases may demand different trade-offs regarding supporting multiple platforms, size, and speed. Thus, the base JVM Player implementation was done with a custom runtime abstraction, powered by ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Kotlin/kotlinx.serialization"},"kotlinx.serialization"),", to enable consumers to choose the runtime based on their needs."),(0,a.yg)("p",null,"To support a specific runtime implementation, there needs to be code connecting the runtime constructs to the Player runtime abstraction. The Player project has implemented this layer for several runtimes, described below. It is possible to define your own, but the abstraction definition is not yet final, and therefore not appropriately documented. You can take inspiration from the existing implementations, or file an issue for a runtime you wish to see supported by our team."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Runtimes"),(0,a.yg)("th",{parentName:"tr",align:null},"Platforms"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/eclipsesource/J2V8"},"J2V8")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"android"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"linux"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"macos"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/facebook/hermes"},"Hermes")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"android"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/oracle/graaljs"},"GraalJS")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"linux"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"macos"),", ",(0,a.yg)("inlineCode",{parentName:"td"},"win"))))),(0,a.yg)(s,{status:"info",description:"Each of the artifacts for the above are defined as `com.intuit.playerui:$runtime-$platform`, i.e. `com.intuit.playerui:j2v8-android`",mdxType:"Alert"}),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"HeadlessPlayer")," does not define a hard dependency on any specific runtime, however, the ",(0,a.yg)("inlineCode",{parentName:"p"},"AndroidPlayer")," does transitively depends on the ",(0,a.yg)("inlineCode",{parentName:"p"},"j2v8")," runtime, as the first class approach. To override, the transitive dependency would need to be explicitly excluded and the actual runtime dependency would need to be added:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // Android Player dependency\n    implementation("com.intuit.playerui", "android", PLAYER_VERSION) {\n        // J2V8 included for release versions\n        exclude(group = "com.intuit.playerui", module = "j2v8-android")\n        // Debuggable J2V8 included for canary versions\n        exclude(group = "com.intuit.playerui", module = "j2v8-android-debug")\n    }\n    // Override with Hermes runtime for example\n    implementation("com.intuit.playerui", "hermes-android", PLAYER_VERSION)\n}\n')),(0,a.yg)(s,{status:"warning",description:"If your application includes dependencies that may transitively depend on `com.intuit.playerui:android`, you would likely need to ensure the default runtime is transitively exlucded from those as well, either manually or as a global strategy.",mdxType:"Alert"}))),(0,a.yg)("p",null,"Congrats! You’ve got Player up and running. If you need additional functionality you can add more plugins to extend Player’s functionality. Head over to the ",(0,a.yg)("a",{parentName:"p",href:"./plugins"},"Plugins")," section to take a look at the Plugins we’ve developed or take a look at the ",(0,a.yg)("a",{parentName:"p",href:"./architecture"},"Architecture")," section to see how you can write your own."),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/getting-started.mdx"},"Help to improve this page")))}u.isMDXComponent=!0},60742:(e,n,t)=>{t.d(n,{A:()=>C});var a=t(52112),r=t(9495),l=t(32532),i=t(83190),o=t(48884),s=t(90283),p=t(14769),d=t(63420),u=t(23013),y=t(47482),c=t(52947),g=t(4380),m=t(13516),h="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var w=(0,u.R)((function(e,n){const t=(0,y.Vl)("SkipLink",e),{id:a=h,...r}=(0,c.MN)(e);return(0,m.jsx)(g.B.a,{...r,ref:n,href:`#${a}`,__css:f(t)})}));w.displayName="SkipNavLink";var b=(0,u.R)((function(e,n){const{id:t=h,...a}=e;return(0,m.jsx)(g.B.div,{ref:n,id:t,tabIndex:-1,style:{outline:0},...a})}));b.displayName="SkipNavContent";var v=t(67435),N=t(63192);const P=e=>a.createElement(s.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(p._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),x=e=>{const{bannerExpanded:n}=a.useContext(v.BR),t="72px",l=`calc(100vh - 88px - ${n?t:"0px"})`,i=`calc(100vh - 88px - 105px - ${n?t:"0px"})`;return a.createElement(s.az,{minH:"100vh"},a.createElement(w,null,"Skip to Main Content"),a.createElement(r.s,{flexDir:"column",padding:"2"},a.createElement(N.IS,null),a.createElement(d.c,null),a.createElement(r.s,null,a.createElement(s.az,{as:"main",w:"100%",mx:"auto"},a.createElement(s.az,{display:{md:"flex"}},a.createElement(s.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:l,pr:"8",ml:"4"},a.createElement(N.E1,null)),a.createElement(s.az,{flex:"1",minW:"0",overflow:"auto",maxH:l},a.createElement(s.az,{minH:i},a.createElement(b,null),e.children),a.createElement(s.az,{pt:"20"},a.createElement(N.wi,null))),e.tableOfContents&&a.createElement(P,{tableOfContents:e.tableOfContents}))))))};function C(e){return e=>a.createElement(x,null,a.createElement(r.s,{alignItems:"center"},a.createElement(l.m,{maxW:"container.lg"},a.createElement(i.xA,{components:o.Ul},e.children))))}}}]);
//# sourceMappingURL=9311.003b47b41f5faea6148d.js.map