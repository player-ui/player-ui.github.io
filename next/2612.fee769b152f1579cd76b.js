"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[2612],{83190:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>c});var a=n(52112);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,c=d["".concat(p,".").concat(u)]||d[u]||y[u]||o;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52612:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});n(52112);var a=n(83190),r=n(60742);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}const i={},l=(0,r.A)({title:"Schema",tableOfContents:[{text:"Schema",id:"schema",level:1},{text:"Structure",id:"structure",level:2},{text:"Data Types",id:"data-types",level:2},{text:"Arrays",id:"arrays",level:2},{text:"Validation",id:"validation",level:2},{text:"Formatting",id:"formatting",level:2},{text:"Default Value",id:"default-value",level:2}]});function p(e){let{components:t,...n}=e;return(0,a.yg)(l,o({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"schema"},(0,a.yg)("a",{parentName:"h1",href:"#schema"},"Schema")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"schema")," section of the content describes the relationship between the ",(0,a.yg)("inlineCode",{parentName:"p"},"view")," and the ",(0,a.yg)("inlineCode",{parentName:"p"},"data"),". It breaks down properties of the model’s object into data-types, each with their own spot for validation, formatting, or default-values."),(0,a.yg)("h2",{id:"structure"},(0,a.yg)("a",{parentName:"h2",href:"#structure"},"Structure")),(0,a.yg)("p",null,"The ",(0,a.yg)("em",{parentName:"p"},"root")," of the data object uses the ",(0,a.yg)("inlineCode",{parentName:"p"},"ROOT")," keyword in the schema:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "ROOT": {\n    "myProperty1": {\n      "type": "MyCustomType"\n    }\n  }\n}\n')),(0,a.yg)("p",null,"This describes a ",(0,a.yg)("inlineCode",{parentName:"p"},"myProperty1")," key on the data-model which corresponds to a ",(0,a.yg)("em",{parentName:"p"},"type")," of ",(0,a.yg)("inlineCode",{parentName:"p"},"MyCustomType"),". Structural data-types can be added to the schema as a sibling to ",(0,a.yg)("inlineCode",{parentName:"p"},"ROOT")," and are referenced by name from the previous type."),(0,a.yg)("p",null,"To add a ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," property to the ",(0,a.yg)("inlineCode",{parentName:"p"},"myProperty1")," example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "ROOT": {\n    "myProperty1": {\n      "type": "MyCustomType"\n    }\n  },\n  "MyCustomType": {\n    "name": {\n      "type": "StringType"\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Now the path ",(0,a.yg)("inlineCode",{parentName:"p"},"myProperty1.name")," in the model points to a ",(0,a.yg)("inlineCode",{parentName:"p"},"StringType"),". There are a number of basic built-in core types, like ",(0,a.yg)("inlineCode",{parentName:"p"},"StringType"),", that provide a base set of formatting/validation/default value support out of the box. Read more about those below."),(0,a.yg)("h2",{id:"data-types"},(0,a.yg)("a",{parentName:"h2",href:"#data-types"},"Data Types")),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"DataType")," is a collection of the validation rules, formatting, and default values for a given path in the model. See the above ",(0,a.yg)("a",{parentName:"p",href:"#Structure"},"structure")," docs on how to author these in JSON content."),(0,a.yg)("p",null,"As in the above ",(0,a.yg)("inlineCode",{parentName:"p"},"StringType")," example, there are a number of pre-existing base types that can be utilized in the schema to describe a data type, and an extension mechanism for supplying additional base-types for use in the authored content. See the ",(0,a.yg)("a",{parentName:"p",href:"/plugins/types-provider"},"types-provider-plugin")," for an easy way to extend these."),(0,a.yg)("p",null,"For any given path described by the schema, Player will merge the rules defined by the ",(0,a.yg)("em",{parentName:"p"},"base")," type (if one exists), and the rules defined specifically for that path in the authored content. Any custom formatter/default values take precedence over the default ones, and any custom validations are ran ",(0,a.yg)("em",{parentName:"p"},"before")," the base ones."),(0,a.yg)("p",null,"Check out the ",(0,a.yg)("a",{parentName:"p",href:"/plugins/common-types"},"CommonTypes")," plugin for a list of easy to consume DataTypes for your application."),(0,a.yg)("h2",{id:"arrays"},(0,a.yg)("a",{parentName:"h2",href:"#arrays"},"Arrays")),(0,a.yg)("p",null,"Sometimes the data you’re using represents an array or list of things. To indicate this in the schema add a ",(0,a.yg)("inlineCode",{parentName:"p"},"isArray: true")," property to the reference of the top level array. For example, if the data you’re representing looks like:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "pets": [\n    {\n      "name": "Frodo",\n      "type": "cat"\n    },\n    {\n      "name": "Ginger",\n      "type": "dog"\n    }\n  ]\n}\n')),(0,a.yg)("p",null,"the corresponding schema would be:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "ROOT": {\n    "pets": {\n      "type": "PetType",\n      "isArray": true\n    }\n  },\n  "PetType": {\n    "name": {\n      "type": "StringType"\n    },\n    "type": {\n      "type": "StringType"\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Each item in the array will be formatted/validated using the same rule-set."),(0,a.yg)("h2",{id:"validation"},(0,a.yg)("a",{parentName:"h2",href:"#validation"},"Validation")),(0,a.yg)("p",null,"To attach a validation to a path in the data-model, add a reference to a validator in the data-type definition for that path under a ",(0,a.yg)("inlineCode",{parentName:"p"},"validation")," property:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "MyCustomType": {\n    "name": {\n      "type": "StringType",\n      "validation": [\n        {\n          "type": "length",\n          "max": 20,\n          "min": 5\n        }\n      ]\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Each ",(0,a.yg)("em",{parentName:"p"},"validation")," reference must include a ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," property which corresponds to the name of the validator to run. Player includes some validators out-of-the-box, and custom ",(0,a.yg)("inlineCode",{parentName:"p"},"validators")," can be registered as well. See ",(0,a.yg)("a",{parentName:"p",href:"../plugins/common-types"},"the Common Types Plugin")," docs for more details around which validators are supported, and how to add custom ones."),(0,a.yg)("p",null,"Any additional properties on the validation reference are passed as ",(0,a.yg)("em",{parentName:"p"},"options")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"validator"),". In the example above, a hypothetical ",(0,a.yg)("inlineCode",{parentName:"p"},"length")," validator can take a ",(0,a.yg)("inlineCode",{parentName:"p"},"min")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"max")," as the boundaries for the length of a string."),(0,a.yg)("h2",{id:"formatting"},(0,a.yg)("a",{parentName:"h2",href:"#formatting"},"Formatting")),(0,a.yg)("p",null,"Similar to adding validations, formatting is added to a data-type through a reference to a ",(0,a.yg)("inlineCode",{parentName:"p"},"formatter"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "MyCustomType": {\n    "name": {\n      "type": "NumberType",\n      "format": {\n        "type": "commaNumber",\n        "decimalPlaces": 3\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Just like in validations, the ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," of the formatter corresponds to the name of a formatter to use (",(0,a.yg)("inlineCode",{parentName:"p"},"commaNumber")," in this case). This hypothetical ",(0,a.yg)("inlineCode",{parentName:"p"},"commaNumber")," formatter would be responsible for translating the data stored in the model to/from what’s displayed to the user. Any additional properties on the ",(0,a.yg)("inlineCode",{parentName:"p"},"format")," object get passed to the respective formatter function as options. In the above example, the options would include ",(0,a.yg)("inlineCode",{parentName:"p"},"{ decimalPlaces: 3 }"),"."),(0,a.yg)("p",null,"Custom formatters can be registered with Player, and thus exposed for use within the authored content."),(0,a.yg)("p",null,"The transition from the data stored in the ",(0,a.yg)("em",{parentName:"p"},"model")," to the user is considered ",(0,a.yg)("em",{parentName:"p"},"formating")," where the inverse (what a user sees to the ",(0,a.yg)("em",{parentName:"p"},"model")," is ",(0,a.yg)("em",{parentName:"p"},"deformatting"),"). Not every formatter has a handler for both ",(0,a.yg)("em",{parentName:"p"},"formatting")," and ",(0,a.yg)("em",{parentName:"p"},"deformatting"),", and it’s entirely up the formatter to define the requirements for data handling in these scenarios."),(0,a.yg)("p",null,"Read more about formatting ",(0,a.yg)("a",{parentName:"p",href:"/guides/formatting"},"here")),(0,a.yg)("h2",{id:"default-value"},(0,a.yg)("a",{parentName:"h2",href:"#default-value"},"Default Value")),(0,a.yg)("p",null,"Any schema or data type can supply a default value to use when setting or getting the value from the data-model.\nSimply supply the ",(0,a.yg)("inlineCode",{parentName:"p"},"default")," property in either the type reference in the schema or the base type definition. Any read from a binding with a ",(0,a.yg)("inlineCode",{parentName:"p"},"default")," property will return it’s default if the underlying model’s value is undefined. ",(0,a.yg)("strong",{parentName:"p"},"Note:")," Reading a value (and it’s default) will not ",(0,a.yg)("em",{parentName:"p"},"set")," the value in the model to it’s default. The exception to this rule is for bindings that are tracked for validations."),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/content/schema.mdx"},"Help to improve this page")))}p.isMDXComponent=!0},60742:(e,t,n)=>{n.d(t,{A:()=>O});var a=n(52112),r=n(9495),o=n(32532),i=n(83190),l=n(48884),p=n(90283),s=n(14769),m=n(63420),d=n(23013),y=n(47482),u=n(52947),c=n(4380),h=n(13516),g="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var v=(0,d.R)((function(e,t){const n=(0,y.Vl)("SkipLink",e),{id:a=g,...r}=(0,u.MN)(e);return(0,h.jsx)(c.B.a,{...r,ref:t,href:`#${a}`,__css:f(n)})}));v.displayName="SkipNavLink";var b=(0,d.R)((function(e,t){const{id:n=g,...a}=e;return(0,h.jsx)(c.B.div,{ref:t,id:n,tabIndex:-1,style:{outline:0},...a})}));b.displayName="SkipNavContent";var N=n(67435),x=n(63192);const C=e=>a.createElement(p.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(s._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),w=e=>{const{bannerExpanded:t}=a.useContext(N.BR),n="72px",o=`calc(100vh - 88px - ${t?n:"0px"})`,i=`calc(100vh - 88px - 105px - ${t?n:"0px"})`;return a.createElement(p.az,{minH:"100vh"},a.createElement(v,null,"Skip to Main Content"),a.createElement(r.s,{flexDir:"column",padding:"2"},a.createElement(x.IS,null),a.createElement(m.c,null),a.createElement(r.s,null,a.createElement(p.az,{as:"main",w:"100%",mx:"auto"},a.createElement(p.az,{display:{md:"flex"}},a.createElement(p.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:o,pr:"8",ml:"4"},a.createElement(x.E1,null)),a.createElement(p.az,{flex:"1",minW:"0",overflow:"auto",maxH:o},a.createElement(p.az,{minH:i},a.createElement(b,null),e.children),a.createElement(p.az,{pt:"20"},a.createElement(x.wi,null))),e.tableOfContents&&a.createElement(C,{tableOfContents:e.tableOfContents}))))))};function O(e){return e=>a.createElement(w,null,a.createElement(r.s,{alignItems:"center"},a.createElement(o.m,{maxW:"container.lg"},a.createElement(i.xA,{components:l.Ul},e.children))))}}}]);
//# sourceMappingURL=2612.fee769b152f1579cd76b.js.map