"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[8570],{83190:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var a=n(52112);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),y=r,d=c["".concat(p,".").concat(y)]||c[y]||m[y]||o;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},18570:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});n(52112);var a=n(83190),r=n(4478);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}const l=(i="PlatformTabs",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var i;const p={},s=(0,r.A)({title:"Types Provider",platform:"core,ios",tableOfContents:[{text:"Types Provider Plugin",id:"types-provider-plugin",level:1},{text:"Example",id:"example",level:2},{text:"CocoaPods",id:"cocoapods",level:3},{text:"Swift Usage",id:"swift-usage",level:3},{text:"Custom Validator",id:"custom-validator",level:4},{text:"Custom Formatter",id:"custom-formatter",level:4},{text:"Formatting Options",id:"formatting-options",level:5},{text:"Custom Types",id:"custom-types",level:4},{text:"Options in the CustomType",id:"options-in-the-customtype",level:5}]});function u(e){let{components:t,...n}=e;return(0,a.yg)(s,o({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"types-provider-plugin"},(0,a.yg)("a",{parentName:"h1",href:"#types-provider-plugin"},"Types Provider Plugin")),(0,a.yg)("p",null,"Similar to the ",(0,a.yg)("a",{parentName:"p",href:"./expression"},"Expression Plugin"),", this plugin adds support for easily exposing new ",(0,a.yg)("inlineCode",{parentName:"p"},"DataTypes"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"formats"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"validations")," to Player’s content."),(0,a.yg)("h2",{id:"example"},(0,a.yg)("a",{parentName:"h2",href:"#example"},"Example")),(0,a.yg)(l,{mdxType:"PlatformTabs"},(0,a.yg)("core",null,(0,a.yg)("p",null,"Define a new validation type:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { ValidatorFunction } from '@player-ui/player';\n\nconst customValidator: ValidatorFunction = (context, value) => {\n  if (value === 'bad-value') {\n    return {\n      message: \"This is a bad value.\"\n    }\n  }\n}\n")),(0,a.yg)("p",null,"Create a new ",(0,a.yg)("inlineCode",{parentName:"p"},"DataType")," that references it: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { Schema } from '@player-ui/player';\n\nconst CustomDataType: Schema.DataType = {\n  name: 'CustomType',\n  validation: [\n    {\n      type: \"custom-validator\"\n    }\n  ]\n}\n")),(0,a.yg)("p",null,"Register it with Player:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { Player } from '@player-ui/player';\nimport { TypesProviderPlugin } from '@player-ui/types-provider-plugin';\n\nconst player = new Player({\n  plugins: [\n    new TypesProviderPlugin({\n      types: [CustomDataType],\n      validations: [\n        ['custom-validator', customValidator]\n      ]\n    })\n  ]\n});\n")),(0,a.yg)("p",null,"Given a data-type reference to ",(0,a.yg)("inlineCode",{parentName:"p"},"CustomType")," in the content, your new validation will be used:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "schema": {\n    "ROOT": {\n      "data": {\n        "type": "CustomDataType"\n      }\n    }\n  }\n}\n'))),(0,a.yg)("ios",null,(0,a.yg)("p",null,"The swift ",(0,a.yg)("inlineCode",{parentName:"p"},"TypesProviderPlugin")," enables adding custom data types, formatters and validation purely through swift code. While in general, the recommendation would be to share a single JavaScript implementation to multiple platforms, some use cases may need a native integration."),(0,a.yg)("h3",{id:"cocoapods"},(0,a.yg)("a",{parentName:"h3",href:"#cocoapods"},"CocoaPods")),(0,a.yg)("p",null,"Add the subspec to your ",(0,a.yg)("inlineCode",{parentName:"p"},"Podfile")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"pod 'PlayerUI/TypesProviderPlugin'\n")),(0,a.yg)("h3",{id:"swift-usage"},(0,a.yg)("a",{parentName:"h3",href:"#swift-usage"},"Swift Usage")),(0,a.yg)("h4",{id:"custom-validator"},(0,a.yg)("a",{parentName:"h4",href:"#custom-validator"},"Custom Validator")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},'let validationFunction = { context, value, options in\n    if value == goodValue {\n      return nil // Return nil to pass the validation\n    } else {\n      return ["message": "This Value is bad!"]\n    }\n}\n\nlet validator = ValidationDeclaration(\n  type: "customValidator",\n  handler: validationFunction\n)\n\nlet plugin = TypesProviderPlugin(types: [], validators: [validator], formats: [])\n')),(0,a.yg)("p",null,"then in the JSON schema for your type:”"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"schema": {\n    "ROOT": {\n      "<yourBinding>": {\n        "validation": [\n            {"type": "customValidator"}\n        ]\n      }\n    }\n  }\n')),(0,a.yg)("h4",{id:"custom-formatter"},(0,a.yg)("a",{parentName:"h4",href:"#custom-formatter"},"Custom Formatter")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},'let formatFunction = {value, options in\n  if let stringValue = value as? String {\n    return stringValue.replacingOccurrences(of: ".", with: ",") // Turn all periods into commas\n  } else {\n    return value \n  }\n}\n\nlet formatter = FormatDeclaration(\n  name: "customFormatter",\n  format: formatFunction,\n  deformat: nil\n)\nlet plugin = TypesProviderPlugin(types: [], validators: [], formats: [formatter])\n')),(0,a.yg)("p",null,"then in the JSON schema for your type:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"schema": {\n    "ROOT": {\n      "<yourBinding>": {\n          "format": {\n              "type": "customFormatter"\n          }\n      }\n    }\n  }\n')),(0,a.yg)("h5",{id:"formatting-options"},(0,a.yg)("a",{parentName:"h5",href:"#formatting-options"},"Formatting Options")),(0,a.yg)("p",null,"The second parameter passed to the format/deformat functions is for additional options, it is of type ",(0,a.yg)("inlineCode",{parentName:"p"},"[String: Any]")," and contains any other keys that were passed alongside the ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," of the formatter:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"format": {\n  "type": "customFormatter",\n  "character": "X"\n}\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},'let formatFunction = {value, options in\n  if let stringValue = value as? String {\n    let char = options["character"] as? String ?? ","\n    return stringValue.replacingOccurrences(of: ".", with: char)\n    // Turn all periods into the specified character\n  } else {\n    return value \n  }\n}\n')),(0,a.yg)("h4",{id:"custom-types"},(0,a.yg)("a",{parentName:"h4",href:"#custom-types"},"Custom Types")),(0,a.yg)("p",null,"Just as you can define custom formats and validation, you can define a custom type that encapsulates that functionality into a type, to avoid the need to keep specifying options, this is how the ",(0,a.yg)("a",{parentName:"p",href:"./plugins/common-types"},"common-types")," are defined, so when you choose a type like ",(0,a.yg)("inlineCode",{parentName:"p"},"DateType")," the formatting is already set up."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},'let type = CustomType(\n  type: "CustomType",\n  validation: [\n    ValidationReference(type: "customValidator")\n  ],\n  format: FormatReference(type: "customFormatter")\n)\n\n// Construct the plugin\nlet plugin = TypesProviderPlugin(types: [type], validators: [validator], formats: [formatter])\n')),(0,a.yg)("p",null,"then in your JSON schema:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'"schema": {\n    "ROOT": {\n      "foo": {\n        "type": "CustomType"\n      }\n    }\n  }\n')),(0,a.yg)("h5",{id:"options-in-the-customtype"},(0,a.yg)("a",{parentName:"h5",href:"#options-in-the-customtype"},"Options in the CustomType")),(0,a.yg)("p",null,"You can supply options to formatters of your custom type in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ValidationReference")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"FormatReference"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-swift"},'let type = CustomType(\n  type: "CustomType",\n  validation: [\n    ValidationReference(type: "customValidator")\n  ],\n  format: FormatReference(type: "customFormatter", options: ["character": "X"])\n)\n')))),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/plugins/types-provider.mdx"},"Help to improve this page")))}u.isMDXComponent=!0},4478:(e,t,n)=>{n.d(t,{A:()=>C});var a=n(52112),r=n(95055),o=n(69724),l=n(83190),i=n(31021),p=n(4323),s=n(377),u=n(11716),c=n(34787),m=n(38484),y=n(52947),d=n(39325),g=n(13516),f="chakra-skip-nav";function h(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var v=(0,c.R)((function(e,t){const n=(0,m.Vl)("SkipLink",e),{id:a=f,...r}=(0,y.MN)(e);return(0,g.jsx)(d.B.a,{...r,ref:t,href:`#${a}`,__css:h(n)})}));v.displayName="SkipNavLink";var N=(0,c.R)((function(e,t){const{id:n=f,...a}=e;return(0,g.jsx)(d.B.div,{ref:t,id:n,tabIndex:-1,style:{outline:0},...a})}));N.displayName="SkipNavContent";var b=n(11049),x=n(51856);const O=e=>a.createElement(p.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(s._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),w=e=>{const{bannerExpanded:t}=a.useContext(b.BR),n="72px",o=`calc(100vh - 88px - ${t?n:"0px"})`,l=`calc(100vh - 88px - 105px - ${t?n:"0px"})`;return a.createElement(p.az,{minH:"100vh"},a.createElement(v,null,"Skip to Main Content"),a.createElement(r.s,{flexDir:"column",padding:"2"},a.createElement(x.IS,null),a.createElement(u.c,null),a.createElement(r.s,null,a.createElement(p.az,{as:"main",w:"100%",mx:"auto"},a.createElement(p.az,{display:{md:"flex"}},a.createElement(p.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:o,pr:"8",ml:"4"},a.createElement(x.E1,null)),a.createElement(p.az,{flex:"1",minW:"0",overflow:"auto",maxH:o},a.createElement(p.az,{minH:l},a.createElement(N,null),e.children),a.createElement(p.az,{pt:"20"},a.createElement(x.wi,null))),e.tableOfContents&&a.createElement(O,{tableOfContents:e.tableOfContents}))))))};function C(e){return e=>a.createElement(w,null,a.createElement(r.s,{alignItems:"center"},a.createElement(o.m,{maxW:"container.lg"},a.createElement(l.xA,{components:i.Ul},e.children))))}}}]);
//# sourceMappingURL=8570.9b279400d94c9d77be90.js.map