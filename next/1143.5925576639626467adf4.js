"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[1143],{83190:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var o=n(52112);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,y=h["".concat(s,".").concat(d)]||h[d]||m[d]||i;return n?o.createElement(y,r(r({ref:t},p),{},{components:n})):o.createElement(y,r({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81143:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});n(52112);var o=n(83190),a=n(21525);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i.apply(this,arguments)}const r={},l=(0,a.A)({title:"DSL Plugins",tableOfContents:[{text:"DSl Plugins",id:"dsl-plugins",level:1},{text:"CLI Hooks",id:"cli-hooks",level:2},{text:"identifyContentType",id:"identifycontenttype",level:3},{text:"compileContent",id:"compilecontent",level:3},{text:"Compilation Hooks",id:"compilation-hooks",level:2},{text:"preProcessFlow",id:"preprocessflow",level:3},{text:"postProcessFlow",id:"postprocessflow",level:3},{text:"schemaGenerator",id:"schemagenerator",level:3},{text:"createSchemaNode",id:"createschemanode",level:4},{text:"onEnd",id:"onend",level:3}]});function s(e){let{components:t,...n}=e;return(0,o.yg)(l,i({},r,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"dsl-plugins"},(0,o.yg)("a",{parentName:"h1",href:"#dsl-plugins"},"DSl Plugins")),(0,o.yg)("p",null,"Much like the rest of Player, DSL compilation supports plugins that can influce how content gets compiled and generated. DSL Plugins are a subset of CLI Plugins that use either the hooks available on the CLI itself or on the DSL compiler instance created by the CLI. This section will cover the hooks that are available for use and why you might want to tap them. "),(0,o.yg)("h2",{id:"cli-hooks"},(0,o.yg)("a",{parentName:"h2",href:"#cli-hooks"},"CLI Hooks")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"createCompilerContext")," function available to plugins that extend the ",(0,o.yg)("inlineCode",{parentName:"p"},"PlayerCLIPlugin")," class gives access to the ",(0,o.yg)("inlineCode",{parentName:"p"},"CompilationContext")," instance. This class manages the context around DSL compilation and exposes two related hooks."),(0,o.yg)("h3",{id:"identifycontenttype"},(0,o.yg)("a",{parentName:"h3",href:"#identifycontenttype"},(0,o.yg)("inlineCode",{parentName:"a"},"identifyContentType"))),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"identifyContentType")," hooks’s purpose is to allow plugins to inject custom behavior around detecting what kind of file is being compiled. By default there are three types of content the CLI is aware of (",(0,o.yg)("inlineCode",{parentName:"p"},"view"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"flow"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"schema"),"). Its methods for detecting which kind of content is contained within a file is very rudimentary (the logic can be found ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/player-ui/tools/blob/main/language/dsl/src/compiler/utils.ts#L5"},"here"),"). In order to allow desired convention or orchestrate the compilation of custom file types, this hook provides a mechanism for allowing that custom logic to be injected. The result of this hook is used in the next hook"),(0,o.yg)("h3",{id:"compilecontent"},(0,o.yg)("a",{parentName:"h3",href:"#compilecontent"},(0,o.yg)("inlineCode",{parentName:"a"},"compileContent"))),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"compileContent")," hook’s purpose is to allow the custom compilation logic for any identified file type. As it is an ",(0,o.yg)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")," it will take the first result returned from a tap who was able to return a result for the compilation for the given file of the identified type. In the case where no external logic is added, the hook will attempt to compile any of its known content types with the built in compiler instance. "),(0,o.yg)("h2",{id:"compilation-hooks"},(0,o.yg)("a",{parentName:"h2",href:"#compilation-hooks"},"Compilation Hooks")),(0,o.yg)("p",null,"The CLI will initialize an instance of the ",(0,o.yg)("inlineCode",{parentName:"p"},"DSLCompiler")," and provide a reference to it via the ",(0,o.yg)("inlineCode",{parentName:"p"},"onCreateDSLCompiler")," function available to plugins that extend the ",(0,o.yg)("inlineCode",{parentName:"p"},"PlayerCLIPlugin")," class. On the compiler itself, the following hook are available to modify the behavior of how DSL content is compiled."),(0,o.yg)("h3",{id:"preprocessflow"},(0,o.yg)("a",{parentName:"h3",href:"#preprocessflow"},(0,o.yg)("inlineCode",{parentName:"a"},"preProcessFlow"))),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"Note: Only called for ",(0,o.yg)("inlineCode",{parentName:"em"},"view")," or ",(0,o.yg)("inlineCode",{parentName:"em"},"flow")," content")),(0,o.yg)("p",null,"This hook allows transformations on the content before it is compiled. This enables the injection of additonal data or resolving any integration specific convention into something that may be understood by the compiler. This hook can also be used to collate information on what is being compiled for use later. "),(0,o.yg)("h3",{id:"postprocessflow"},(0,o.yg)("a",{parentName:"h3",href:"#postprocessflow"},(0,o.yg)("inlineCode",{parentName:"a"},"postProcessFlow"))),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"Note: Only called for ",(0,o.yg)("inlineCode",{parentName:"em"},"view")," or ",(0,o.yg)("inlineCode",{parentName:"em"},"flow")," content")),(0,o.yg)("p",null,"This hook allows transformations on the content after it is compiled. This allows modifications to the compiled content which in some cases may be preferable as manipulating JSON may be easier than a React Tree. "),(0,o.yg)("h3",{id:"schemagenerator"},(0,o.yg)("a",{parentName:"h3",href:"#schemagenerator"},(0,o.yg)("inlineCode",{parentName:"a"},"schemaGenerator"))),(0,o.yg)("p",null,"This hook gives access to the internal ",(0,o.yg)("inlineCode",{parentName:"p"},"SchemaGenerator")," object which is responsible for compiling the schema. On this generator there are the following hooks. "),(0,o.yg)("h4",{id:"createschemanode"},(0,o.yg)("a",{parentName:"h4",href:"#createschemanode"},(0,o.yg)("inlineCode",{parentName:"a"},"createSchemaNode"))),(0,o.yg)("p",null,"This hook allows custom logic for processing schema nodes as they are generated. This enables arbitrary properties to be statically or dynamically added based on the authored schema node. One potential usecase of this is to allow integration specific semantic conventions to be defined and injected into the final schema. For example, the presence of a specific ",(0,o.yg)("inlineCode",{parentName:"p"},"Symbol")," might mean that a property needs to be injected or even that the schema tree from this point on needs to be modified. "),(0,o.yg)("h3",{id:"onend"},(0,o.yg)("a",{parentName:"h3",href:"#onend"},(0,o.yg)("inlineCode",{parentName:"a"},"onEnd"))),(0,o.yg)("p",null,"This hook is called to signal that the compilation of all files has been completed. This allows any post processing on the output as a whole to take place as a part of the build process. This may include actions like moving or bundling the compilation results or writing new files based on information collected via other hooks on the files that were processed. "),(0,o.yg)("hr",null),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/dsl/plugins.mdx"},"Help to improve this page")))}s.isMDXComponent=!0},21525:(e,t,n)=>{n.d(t,{A:()=>N});var o=n(52112),a=n(9495),i=n(32532),r=n(83190),l=n(37766),s=n(90283),c=n(14769),p=n(63420),h=n(23013),m=n(47482),d=n(52947),y=n(53868),f=n(13516),u="chakra-skip-nav";function g(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var b=(0,h.R)((function(e,t){const n=(0,m.Vl)("SkipLink",e),{id:o=u,...a}=(0,d.MN)(e);return(0,f.jsx)(y.B.a,{...a,ref:t,href:`#${o}`,__css:g(n)})}));b.displayName="SkipNavLink";var v=(0,h.R)((function(e,t){const{id:n=u,...o}=e;return(0,f.jsx)(y.B.div,{ref:t,id:n,tabIndex:-1,style:{outline:0},...o})}));v.displayName="SkipNavContent";var w=n(43298),C=n(2063);const x=e=>o.createElement(s.az,{display:{base:"none",xl:"block"}},"Table Of Contents",o.createElement(c._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>o.createElement("li",{key:e.text},o.createElement("a",{href:`#${e.id}`},e.text)))))),k=e=>{const{bannerExpanded:t}=o.useContext(w.BR),n="72px",i=`calc(100vh - 88px - ${t?n:"0px"})`,r=`calc(100vh - 88px - 105px - ${t?n:"0px"})`;return o.createElement(s.az,{minH:"100vh"},o.createElement(b,null,"Skip to Main Content"),o.createElement(a.s,{flexDir:"column",padding:"2"},o.createElement(C.IS,null),o.createElement(p.c,null),o.createElement(a.s,null,o.createElement(s.az,{as:"main",w:"100%",mx:"auto"},o.createElement(s.az,{display:{md:"flex"}},o.createElement(s.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4"},o.createElement(C.E1,null)),o.createElement(s.az,{flex:"1",minW:"0",overflow:"auto",maxH:i},o.createElement(s.az,{minH:r},o.createElement(v,null),e.children),o.createElement(s.az,{pt:"20"},o.createElement(C.wi,null))),e.tableOfContents&&o.createElement(x,{tableOfContents:e.tableOfContents}))))))};function N(e){return e=>o.createElement(k,null,o.createElement(a.s,{alignItems:"center"},o.createElement(i.m,{maxW:"container.lg"},o.createElement(r.xA,{components:l.Ul},e.children))))}}}]);
//# sourceMappingURL=1143.5925576639626467adf4.js.map