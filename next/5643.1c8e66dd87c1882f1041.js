"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[5643],{83190:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var a=t(52112);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),g=i,y=d["".concat(s,".").concat(g)]||d[g]||m[g]||r;return t?a.createElement(y,o(o({ref:n},c),{},{components:t})):a.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},55643:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});t(52112);var a=t(83190),i=t(21525);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}const o={},l=(0,i.A)({title:"DSL Content Overview",tableOfContents:[{text:"TSX/JSX Content Authoring (Player DSL)",id:"tsxjsx-content-authoring-player-dsl",level:1},{text:"DSL Benefits",id:"dsl-benefits",level:2},{text:"Easier maintainability",id:"easier-maintainability",level:4},{text:"Better development experience",id:"better-development-experience",level:4},{text:"Easier to extend",id:"easier-to-extend",level:4},{text:"Writing DSL Content",id:"writing-dsl-content",level:2},{text:"Basic Setup",id:"basic-setup",level:3},{text:"Basic Format and File Layout",id:"basic-format-and-file-layout",level:3},{text:"Navigation",id:"navigation",level:3},{text:"Bindings and Expressions",id:"bindings-and-expressions",level:3},{text:"View",id:"view",level:3},{text:"Schema",id:"schema",level:3},{text:"Compiling DSL Content",id:"compiling-dsl-content",level:2}]});function s(e){let{components:n,...t}=e;return(0,a.yg)(l,r({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"tsxjsx-content-authoring-player-dsl"},(0,a.yg)("a",{parentName:"h1",href:"#tsxjsx-content-authoring-player-dsl"},"TSX/JSX Content Authoring (Player DSL)")),(0,a.yg)("p",null,"While Player content ",(0,a.yg)("em",{parentName:"p"},"can")," be written directly in JSON, it’s definitely not the preferable authoring format. To take advantage of existing developer tool-chains, Player provides a mechanism for authoring content in (J/T)SX as React components and simple TypeScript objects. The Player CLI can then be used to transpile the React tree into a JSON content."),(0,a.yg)("h2",{id:"dsl-benefits"},(0,a.yg)("a",{parentName:"h2",href:"#dsl-benefits"},"DSL Benefits")),(0,a.yg)("p",null,"At a high level, the benefits to writing Player content in the DSL can be summarized by three key factors:"),(0,a.yg)("h4",{id:"easier-maintainability"},(0,a.yg)("a",{parentName:"h4",href:"#easier-maintainability"},"Easier maintainability")),(0,a.yg)("p",null,"Simply put, DSL code more concise than its JSON equivalent. That means there is less code for you to have to maintain. Also, as its easier to read than JSON, when you do need to make updates to it, its much more wieldy to work with. "),(0,a.yg)("h4",{id:"better-development-experience"},(0,a.yg)("a",{parentName:"h4",href:"#better-development-experience"},"Better development experience")),(0,a.yg)("p",null,"Since the DSL leverages a lot of standard TypeScript language features, most editors will offer quality of life features like typechecking, suggestions, and code generation. All of this is in service of shortening the feedback loop of writing content and ensuring it is what you intended for it. "),(0,a.yg)("h4",{id:"easier-to-extend"},(0,a.yg)("a",{parentName:"h4",href:"#easier-to-extend"},"Easier to extend")),(0,a.yg)("p",null,"The DSL now offers a easily accessible programatic hook into Player content. This allows custom tooling to be created around your DSL integration much easier that before. Common patterns can be extracted into higher level compoennts, functions can be created to generate code, and code generation can be integrated into almost any process where relevant data is present. "),(0,a.yg)("p",null,"For a further explination on the benefits, see the DSL Benefits section in the ",(0,a.yg)("a",{parentName:"p",href:"./views.mdx#dsl-benefits-in-views"},"DSL Views")," and the ",(0,a.yg)("a",{parentName:"p",href:"./schema.mdx#dsl-benefit-in-schema"},"DSL Schema")),(0,a.yg)("h2",{id:"writing-dsl-content"},(0,a.yg)("a",{parentName:"h2",href:"#writing-dsl-content"},"Writing DSL Content")),(0,a.yg)("p",null,"In order to use the DSL to write content, your plugin library should ship a DSL component package. These will define the primitive ",(0,a.yg)("em",{parentName:"p"},"components")," to use to build up the tree. Authorship of these components is covered in the ",(0,a.yg)("a",{parentName:"p",href:"../assets/dsl"},"Writing DSL Components")," secton. The Player Reference Assets ship their own DSL Components via the ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-ui/reference-assets-components")," pacakge."),(0,a.yg)("p",null,"In the examples below, we will use the Player Reference Assets Components."),(0,a.yg)("h3",{id:"basic-setup"},(0,a.yg)("a",{parentName:"h3",href:"#basic-setup"},"Basic Setup")),(0,a.yg)("p",null,"To get started, you’ll need the following dependencies in your ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "dependencies": {\n        "@player-tools/dsl": "0.4.1",\n        "@player-tools/cli": "0.4.1",\n        "@player-ui/reference-assets-components": "0.6.0",\n        "@types/react": "17.0.39",\n        "react": "17.0.2"\n    }\n}\n')),(0,a.yg)("p",null,"Next, you’ll need to configure your environment for DSL Compilation and JSON validation. Below is a basic configuration that can be added in your ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json"),". For a more detailed explination and examples on further customization please refer to the ",(0,a.yg)("a",{parentName:"p",href:"../tools/cli"},"CLI")," section. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "player": {\n        "dsl": {\n        "src": "./src/main/tsx",\n        "outDir": "./out"\n        },\n        "json": {\n        "src": "./out/*.json"\n        },\n    }\n}\n')),(0,a.yg)("h3",{id:"basic-format-and-file-layout"},(0,a.yg)("a",{parentName:"h3",href:"#basic-format-and-file-layout"},"Basic Format and File Layout")),(0,a.yg)("p",null,"By default, all files that contain a Player Flow should be exported as a ",(0,a.yg)("inlineCode",{parentName:"p"},".tsx")," file and the schema should be in a ",(0,a.yg)("inlineCode",{parentName:"p"},".ts")," file. For how to change this behavior, please refer to the ",(0,a.yg)("a",{parentName:"p",href:"./plugins"},"DSL Plugins")," section of the docs. Each of these files should contain a default export of their appropriate object. For example a file that exports a flow should look like the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"export default {\n    id: 'my-flow',\n    views: [....],\n    navigation: {....}\n}\n")),(0,a.yg)("p",null,"and a file that exports the schema should look like: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"const mySchema = {...}\n\nexport default mySchema\n\n")),(0,a.yg)("h3",{id:"navigation"},(0,a.yg)("a",{parentName:"h3",href:"#navigation"},"Navigation")),(0,a.yg)("p",null,"At this time the ",(0,a.yg)("inlineCode",{parentName:"p"},"navigation")," section is a basic JS object. The ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-ui/types")," package provides typescript typings for this."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Navigation } from '@player-ui/types';\n\nconst navigation: Navigation = {\n  BEGIN: 'Start',\n  Start: {\n    startState: 'VIEW_1',\n    VIEW_1: {\n      state_type: 'VIEW',\n      ref: 'view-1',\n      transitions: {\n        '*': 'END_Done',\n      },\n    },\n    END_Done: {\n      state_type: 'END',\n      outcome: 'done',\n    },\n  },\n};\n")),(0,a.yg)("p",null,"One convenience feature is the auto injection of the the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," property for a ",(0,a.yg)("inlineCode",{parentName:"p"},"VIEW")," type state if the corresponding view is a React tree. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Navigation } from '@player-ui/types';\n\nconst view = (\n  <Collection id=\"my-view\">\n    <Text>Some value</Text>\n    <Input>\n      <Input.Label>Some label</Input.Label>\n    </Input>\n  </Collection>\n);\n\nconst navigation: Navigation = {\n  BEGIN: 'Start',\n  Start: {\n    startState: 'VIEW_1',\n    VIEW_1: {\n      state_type: 'VIEW',\n      ref: view,\n      transitions: {\n        '*': 'END_Done',\n      },\n    },\n    END_Done: {\n      state_type: 'END',\n      outcome: 'done',\n    },\n  },\n};\n")),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Note: The ",(0,a.yg)("inlineCode",{parentName:"em"},"Navigation")," type we’re importing here from the ",(0,a.yg)("inlineCode",{parentName:"em"},"@player-ui/types")," package is different than the ",(0,a.yg)("inlineCode",{parentName:"em"},"Navigation")," type from the ",(0,a.yg)("inlineCode",{parentName:"em"},"@player-tools/dsl")," package. The former is the core definition for what the Navigation section of Player content is. The latter has specific replacements to take DSL constructs where normal objects would be defined.")),(0,a.yg)("h3",{id:"bindings-and-expressions"},(0,a.yg)("a",{parentName:"h3",href:"#bindings-and-expressions"},"Bindings and Expressions")),(0,a.yg)("p",null,"Both ",(0,a.yg)("inlineCode",{parentName:"p"},"binding")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"expression")," in the JSX authoring leverages a tagged template, typically abbreviated as ",(0,a.yg)("inlineCode",{parentName:"p"},"b")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"e")," respectively. In a similar fashion to using ",(0,a.yg)("inlineCode",{parentName:"p"},"css")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"graphql")," in a JS file, this enables syntax-highlighting and validation of bindings and expressions within a JS file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { binding as b, expression as e } from '@player-tools/dsl';\n\nconst myBinding = b`foo.bar`;\nconst myExpression = e`foo()`;\n")),(0,a.yg)("p",null,"The binding and expression instances can also automatically dereference themselves when used inside of another string:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const stringWithBinding = `Some text: ${myBinding}`; // 'Some text: {{foo.bar}}'\nconst stringWithExp = `Some expr: ${myExpression}`; // 'Some expr: @[foo()]@'\n")),(0,a.yg)("h3",{id:"view"},(0,a.yg)("a",{parentName:"h3",href:"#view"},"View")),(0,a.yg)("p",null,"Please refer to the ",(0,a.yg)("a",{parentName:"p",href:"../dsl/views"},"Views")," section for a detailed overview of how to write DSL Views"),(0,a.yg)("h3",{id:"schema"},(0,a.yg)("a",{parentName:"h3",href:"#schema"},"Schema")),(0,a.yg)("p",null,"Please refer to the ",(0,a.yg)("a",{parentName:"p",href:"../dsl/schema"},"Schema")," section for a detailed overview of how to write DSL Schemas"),(0,a.yg)("h2",{id:"compiling-dsl-content"},(0,a.yg)("a",{parentName:"h2",href:"#compiling-dsl-content"},"Compiling DSL Content")),(0,a.yg)("p",null,"Once your DSL content is authored, you can use the Player CLI to compile and validate your content. For documentation on this functionality, please refer to the ",(0,a.yg)("a",{parentName:"p",href:"../tools/cli"},"Player CLI")," section"),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/dsl/index.mdx"},"Help to improve this page")))}s.isMDXComponent=!0},21525:(e,n,t)=>{t.d(n,{A:()=>E});var a=t(52112),i=t(9495),r=t(32532),o=t(83190),l=t(37766),s=t(90283),p=t(14769),c=t(63420),d=t(23013),m=t(47482),g=t(52947),y=t(53868),h=t(13516),u="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var v=(0,d.R)((function(e,n){const t=(0,m.Vl)("SkipLink",e),{id:a=u,...i}=(0,g.MN)(e);return(0,h.jsx)(y.B.a,{...i,ref:n,href:`#${a}`,__css:f(t)})}));v.displayName="SkipNavLink";var b=(0,d.R)((function(e,n){const{id:t=u,...a}=e;return(0,h.jsx)(y.B.div,{ref:n,id:t,tabIndex:-1,style:{outline:0},...a})}));b.displayName="SkipNavContent";var x=t(43298),N=t(50666);const w=e=>a.createElement(s.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(p._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),S=e=>{const{bannerExpanded:n}=a.useContext(x.BR),t="72px",r=`calc(100vh - 88px - ${n?t:"0px"})`,o=`calc(100vh - 88px - 105px - ${n?t:"0px"})`;return a.createElement(s.az,{minH:"100vh"},a.createElement(v,null,"Skip to Main Content"),a.createElement(i.s,{flexDir:"column",padding:"2"},a.createElement(N.IS,null),a.createElement(c.c,null),a.createElement(i.s,null,a.createElement(s.az,{as:"main",w:"100%",mx:"auto"},a.createElement(s.az,{display:{md:"flex"}},a.createElement(s.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4"},a.createElement(N.E1,null)),a.createElement(s.az,{flex:"1",minW:"0",overflow:"auto",maxH:r},a.createElement(s.az,{minH:o},a.createElement(b,null),e.children),a.createElement(s.az,{pt:"20"},a.createElement(N.wi,null))),e.tableOfContents&&a.createElement(w,{tableOfContents:e.tableOfContents}))))))};function E(e){return e=>a.createElement(S,null,a.createElement(i.s,{alignItems:"center"},a.createElement(r.m,{maxW:"container.lg"},a.createElement(o.xA,{components:l.Ul},e.children))))}}}]);
//# sourceMappingURL=5643.1c8e66dd87c1882f1041.js.map