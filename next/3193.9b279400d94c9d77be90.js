"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[3193],{83190:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>h});var a=t(52112);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,h=m["".concat(p,".").concat(d)]||m[d]||y[d]||r;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},13193:(e,n,t)=>{t.r(n),t.d(n,{default:()=>p});t(52112);var a=t(83190),o=t(4478);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}const i={},l=(0,o.A)({title:"Writing DSL Components",tableOfContents:[{text:"Creating TSX Components",id:"creating-tsx-components",level:1},{text:"Creating a Basic Component",id:"creating-a-basic-component",level:2},{text:"Slots",id:"slots",level:2},{text:"Creating a Complex Component",id:"creating-a-complex-component",level:2},{text:"Components with Specially Handled Properties",id:"components-with-specially-handled-properties",level:3},{text:"View Components",id:"view-components",level:3}]});function p(e){let{components:n,...t}=e;return(0,a.yg)(l,r({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"creating-tsx-components"},(0,a.yg)("a",{parentName:"h1",href:"#creating-tsx-components"},"Creating TSX Components")),(0,a.yg)("p",null,"In order to take advantage of the auto-completion and validation of TypeScript types, asset libraries can export a component library for content authoring. Creating components isn’t much different than writing a React component for the web. The primative elements uses the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/intuit/react-json-reconciler"},"react-json-reconciler")," to create the JSON content tree, with utilities to make it quick and painless to create new asset-components."),(0,a.yg)("h2",{id:"creating-a-basic-component"},(0,a.yg)("a",{parentName:"h2",href:"#creating-a-basic-component"},"Creating a Basic Component")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Asset")," component from the ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-tools/dsl")," package is the quickest way to create a new component. The ",(0,a.yg)("inlineCode",{parentName:"p"},"Asset")," component will take all the Asset’s properties and convert them to their equivalent JSON representation when serialized."),(0,a.yg)("p",null,"In the examples below, we’ll be creating a TSX component for the ",(0,a.yg)("inlineCode",{parentName:"p"},"action")," asset in our reference set. "),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"action")," asset has a ",(0,a.yg)("inlineCode",{parentName:"p"},"label")," slot (which is typically used as a ",(0,a.yg)("inlineCode",{parentName:"p"},"text")," asset), a ",(0,a.yg)("inlineCode",{parentName:"p"},"value")," (for flow transitions), and an ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," for evaluating expressions.\nFor this example we’ll use a resemblance of this type, but in practice types should be imported directly from their asset rather than duplicating them."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import type { Asset, AssetWrapper, Expression } from '@player-ui/player';\n\nexport interface ActionAsset<AnyTextAsset extends Asset = Asset> extends Asset<'action'> {\n  /** The transition value of the action in the state machine */\n  value?: string;\n\n  /** A text-like asset for the action's label */\n  label?: AssetWrapper<AnyTextAsset>;\n\n  /** An optional expression to execute before transitioning */\n  exp?: Expression;\n}\n")),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Note: The ",(0,a.yg)("inlineCode",{parentName:"em"},"Asset")," type we’re importing here from the ",(0,a.yg)("inlineCode",{parentName:"em"},"@player-ui/player")," package is different than the ",(0,a.yg)("inlineCode",{parentName:"em"},"Asset")," component from the ",(0,a.yg)("inlineCode",{parentName:"em"},"@player-tools/dsl")," package. The former is the basic TypeScript definition for what an Asset in Player is while the latter is a helper function for allowing DSL components to be created. Fundamentally they share a name to reinforce the abstraction of foundational capabilities to core libraries")),(0,a.yg)("p",null,"To turn this interface into a usable component, create a new React component that ",(0,a.yg)("em",{parentName:"p"},"renders")," an Asset:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Asset, AssetPropsWithChildren } from '@player-tools/dsl';\n\nexport const Action = (props: AssetPropsWithChildren<ActionAsset>) => {\n  return <Asset type=\"action\" {...props} />;\n}\n")),(0,a.yg)("p",null,"This would allow users to import the ",(0,a.yg)("inlineCode",{parentName:"p"},"Action")," component, and ",(0,a.yg)("em",{parentName:"p"},"render")," it to JSON:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const myView = <Action value="next" />\n')),(0,a.yg)("p",null,"which when compiled would look like "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "root",\n    "type": "action",\n    "value": "next"\n}\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"AssetPropsWithChildren")," type is a utility type to help convert the ",(0,a.yg)("inlineCode",{parentName:"p"},"Asset")," type (which has a required ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," properties) to a type more suited for components. It changes the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," to be optional, and adds a ",(0,a.yg)("inlineCode",{parentName:"p"},"applicability")," property automatically."),(0,a.yg)("h2",{id:"slots"},(0,a.yg)("a",{parentName:"h2",href:"#slots"},"Slots")),(0,a.yg)("p",null,"Continuing the example fo the ",(0,a.yg)("inlineCode",{parentName:"p"},"ActionAsset"),", we need a way for users to users to specify the nested ",(0,a.yg)("inlineCode",{parentName:"p"},"label")," property, which itself is another asset. This can be accomplished using the ",(0,a.yg)("inlineCode",{parentName:"p"},"createSlot")," utility function. The ",(0,a.yg)("inlineCode",{parentName:"p"},"createSlot")," function also accept components to enable automatically creating ",(0,a.yg)("inlineCode",{parentName:"p"},"text")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"collection")," assets when they aren’t specified where needed. If these components aren’t passed into the slot when used, the resulting content may be invalid. Let’s add a ",(0,a.yg)("inlineCode",{parentName:"p"},"Label")," slot to our ",(0,a.yg)("inlineCode",{parentName:"p"},"Action")," component to allow it to be easily authored. Lets assume we already have a ",(0,a.yg)("inlineCode",{parentName:"p"},"Text")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Collection")," component. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { Asset, AssetPropsWithChildren, createSlot } from '@player-tools/dsl';\n\nexport const Action = (props: AssetPropsWithChildren<ActionAsset>) => {\n  return <Asset type=\"action\" {...props} />;\n}\n\nAction.Label = createSlot({\n  name: 'label',\n  wrapInAsset: true,\n  TextComp: SomeTextComponent\n  CollectionComp: SomeCollectionComponent\n})\n")),(0,a.yg)("p",null,"This adds component (",(0,a.yg)("inlineCode",{parentName:"p"},"Action.Label"),") that will automatically place any nested children under the ",(0,a.yg)("inlineCode",{parentName:"p"},"label")," property of the parent asset:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const myView = (\n  <Action value="next">\n    <Action.Label>\n      <Text value="Continue" />\n    </Action.Label>\n  </Action>\n);\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\n\nconst myView = (\n  <Action value=\"next\">\n    <Action.Label>Continue</Action.Label>\n  </Action>\n);\n")),(0,a.yg)("p",null,"which when compiled would look like (note the auto injection of the ",(0,a.yg)("inlineCode",{parentName:"p"},"Text")," asset and corresponding Asset Wrapper):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "root",\n    "type": "action",\n    "value": "next",\n    "label": {\n        "asset": {\n            "id": "root-label-text",\n            "type": "text",\n            "value": "Continue"\n        }\n    }\n}\n')),(0,a.yg)("p",null,"And if we wanted to have the ",(0,a.yg)("inlineCode",{parentName:"p"},"label")," property to have to text assets we could write the following DSL"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const myView = (\n  <Action value="next">\n    <Action.Label>\n        <Text>Some</Text>\n        <Text>Text</Text>\n    </Action.Label>\n  </Action>\n);\n')),(0,a.yg)("p",null,"which when compiled would look like the following (note the automatic insertion of the ",(0,a.yg)("inlineCode",{parentName:"p"},"Collection")," Asset):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "root",\n    "type": "action",\n    "value": "next",\n    "label": {\n        "asset": {\n            "id": "root-collection",\n            "type": "text",\n            "values": [\n                {\n                    "asset": {\n                        "id": "root-collection-1-text",\n                        "type": "text",\n                        "value": "Some"\n                    }\n                },{\n                    "asset": {\n                        "id": "root-collection-2-text",\n                        "type": "text",\n                        "value": "Text"\n                    }\n                }\n            ]\n        }\n    }\n}\n')),(0,a.yg)("h2",{id:"creating-a-complex-component"},(0,a.yg)("a",{parentName:"h2",href:"#creating-a-complex-component"},"Creating a Complex Component")),(0,a.yg)("p",null,"While a majority of Assets can be described simply via the base ",(0,a.yg)("inlineCode",{parentName:"p"},"Action")," Component, there are certain cases where DSL components need to contain a bit more logic. This section aims to describe further tools that are offered in the ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-tools/dsl")," package."),(0,a.yg)("h3",{id:"components-with-specially-handled-properties"},(0,a.yg)("a",{parentName:"h3",href:"#components-with-specially-handled-properties"},"Components with Specially Handled Properties")),(0,a.yg)("p",null,"In the previous example, we covered how to create a DSL Component for our reference ",(0,a.yg)("inlineCode",{parentName:"p"},"Action")," Asset. Our actual Action Asset however looks a little bit different. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\n\nexport const Action = (\n  props: Omit<AssetPropsWithChildren<ActionAsset>, 'exp'> & {\n    /** An optional expression to execute before transitioning */\n    exp?: ExpressionTemplateInstance;\n  }\n) => {\n  const { exp, children, ...rest } = props;\n\n  return (\n    <Asset type=\"action\" {...rest}>\n      <property name=\"exp\">{exp?.toValue()}</property>\n      {children}\n    </Asset>\n  );\n};\n")),(0,a.yg)("p",null,"Crucially, the difference is in how the ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," property is handled. As the ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," property is an ",(0,a.yg)("inlineCode",{parentName:"p"},"Expression"),", if we just allowed the ",(0,a.yg)("inlineCode",{parentName:"p"},"Action")," component to process this property, we would end up with an ",(0,a.yg)("inlineCode",{parentName:"p"},"ExpressionTemplate")," instance ",(0,a.yg)("em",{parentName:"p"},"not")," an ",(0,a.yg)("inlineCode",{parentName:"p"},"Expression")," instance. While technically they are equivalent, there is no need to wrap the final string in the Expression Template tags (",(0,a.yg)("inlineCode",{parentName:"p"},"@[]@"),") since we know the string will be an ",(0,a.yg)("inlineCode",{parentName:"p"},"Expression")," and it will just lead to additonal procssing at runtime. Therefore, we need to do a few things to properly construct this DSL component."),(0,a.yg)("p",null,"The first is to modify the type for the commponent. In the above code snippit we are using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Omit")," type to remove the base ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," property from the source type and replacing it with an ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," property that expects a ",(0,a.yg)("inlineCode",{parentName:"p"},"ExpressionTemplateInstance")," which allows an DSL expression to be passed in. "),(0,a.yg)("p",null,"The second is to extract out the ",(0,a.yg)("inlineCode",{parentName:"p"},"exp")," property from the props and use a ",(0,a.yg)("inlineCode",{parentName:"p"},"property")," component to manually control how that property will get serialized. This component is exposed by the underlying ",(0,a.yg)("inlineCode",{parentName:"p"},"react-json-reconciler")," library which also supplies an ",(0,a.yg)("inlineCode",{parentName:"p"},"array"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"obj")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"value")," component to allow full control over more complicated data structures. The ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-tools/dsl")," package also exposes the ",(0,a.yg)("inlineCode",{parentName:"p"},"toJsonProperties")," function to process whole non-Asset objects."),(0,a.yg)("h3",{id:"view-components"},(0,a.yg)("a",{parentName:"h3",href:"#view-components"},"View Components")),(0,a.yg)("p",null,"For Assets that are intended to be Views, a ",(0,a.yg)("inlineCode",{parentName:"p"},"View")," component is exported from the ",(0,a.yg)("inlineCode",{parentName:"p"},"@player-tools/dsl")," package. Its usage is exactly the same as the ",(0,a.yg)("inlineCode",{parentName:"p"},"Asset")," component, however it correctly handles the serialization of any Crossfield Validations that exist on the View."),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/assets/dsl.mdx"},"Help to improve this page")))}p.isMDXComponent=!0},4478:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(52112),o=t(95055),r=t(69724),i=t(83190),l=t(31021),p=t(4323),s=t(377),c=t(11716),m=t(34787),y=t(38484),d=t(52947),h=t(39325),g=t(13516),u="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var x=(0,m.R)((function(e,n){const t=(0,y.Vl)("SkipLink",e),{id:a=u,...o}=(0,d.MN)(e);return(0,g.jsx)(h.B.a,{...o,ref:n,href:`#${a}`,__css:f(t)})}));x.displayName="SkipNavLink";var C=(0,m.R)((function(e,n){const{id:t=u,...a}=e;return(0,g.jsx)(h.B.div,{ref:n,id:t,tabIndex:-1,style:{outline:0},...a})}));C.displayName="SkipNavContent";var w=t(11049),b=t(51856);const N=e=>a.createElement(p.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(s._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),v=e=>{const{bannerExpanded:n}=a.useContext(w.BR),t="72px",r=`calc(100vh - 88px - ${n?t:"0px"})`,i=`calc(100vh - 88px - 105px - ${n?t:"0px"})`;return a.createElement(p.az,{minH:"100vh"},a.createElement(x,null,"Skip to Main Content"),a.createElement(o.s,{flexDir:"column",padding:"2"},a.createElement(b.IS,null),a.createElement(c.c,null),a.createElement(o.s,null,a.createElement(p.az,{as:"main",w:"100%",mx:"auto"},a.createElement(p.az,{display:{md:"flex"}},a.createElement(p.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4"},a.createElement(b.E1,null)),a.createElement(p.az,{flex:"1",minW:"0",overflow:"auto",maxH:r},a.createElement(p.az,{minH:i},a.createElement(C,null),e.children),a.createElement(p.az,{pt:"20"},a.createElement(b.wi,null))),e.tableOfContents&&a.createElement(N,{tableOfContents:e.tableOfContents}))))))};function A(e){return e=>a.createElement(v,null,a.createElement(o.s,{alignItems:"center"},a.createElement(r.m,{maxW:"container.lg"},a.createElement(i.xA,{components:l.Ul},e.children))))}}}]);
//# sourceMappingURL=3193.9b279400d94c9d77be90.js.map