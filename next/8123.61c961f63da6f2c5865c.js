"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[8123],{83190:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>u});var a=n(52112);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,u=m["".concat(s,".").concat(h)]||m[h]||c[h]||r;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98123:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});n(52112);var a=n(83190),o=n(21525);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}const i={},l=(0,o.A)({title:"Plugin Implementation",tableOfContents:[{text:"Plugin Implementation",id:"plugin-implementation",level:1}]});function s(e){let{components:t,...n}=e;return(0,a.yg)(l,r({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"plugin-implementation"},(0,a.yg)("a",{parentName:"h1",href:"#plugin-implementation"},"Plugin Implementation")),(0,a.yg)("p",null,"The main purpose of a Plugin is to extend or add new functionality by tapping into Player’s pipeline of components via hooks. In this section we’ll go over the steps to implement a plugin."),(0,a.yg)("p",null,"We’ll use the ",(0,a.yg)("a",{parentName:"p",href:"./plugins/stage-revert-data"},"stage-revert-data")," plugin as example. After creating our plugin class, we’ll use the ",(0,a.yg)("inlineCode",{parentName:"p"},"apply")," method which provides access to the Player instance, which then gives access to the necessary hooks. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export default class StageRevertDataPlugin implements PlayerPlugin {\n  name = 'stage-revert-data-plugin';\n\n  apply(player: Player) {\n    let dataController: DataController;\n    let stageData: String;\n    let commitTransitions: String[];\n    let commitShadowModel: Boolean = false;\n\n    const GatedDataMiddleware = new ValidationMiddleware(\n      () =>\n        commitShadowModel\n          ? undefined\n          : {\n              message: 'staging data',\n              severity: 'error',\n            },\n      { shouldIncludeInvalid: () => true }\n    );\n")),(0,a.yg)("p",null,"For this case we needed to define variables that will store references for the scope the hooks will share:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"dataController"),": Reference to the data controller hook in the Player instance, can be used to read, update or commit new changes to the data model"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"stageData"),": View attribute that comes from the view state, used for enabling the staging of data"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"commitTransitions"),": The list of view names which the shadow model should be committed if transitioned to. Comes from the view state attribute as well."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"commitShadowModel"),": Flag that enables committing shadow model into data model after the transition, only if ",(0,a.yg)("inlineCode",{parentName:"li"},"stageData")," is set to true and the next target view name is included in ",(0,a.yg)("inlineCode",{parentName:"li"},"commitTransitions"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"GatedDataMiddleware")," Instance from ",(0,a.yg)("inlineCode",{parentName:"li"},"ValidationMiddleware")," to be used as a middleware to intercept the data-model pipeline before any data is committed and cache the data instead, only if ",(0,a.yg)("inlineCode",{parentName:"li"},"stageData")," is set to true.")),(0,a.yg)("p",null,"The next step is to tap into the necessary Player hooks. First we tap into the ",(0,a.yg)("inlineCode",{parentName:"p"},"viewController")," which we can then intercept the ",(0,a.yg)("inlineCode",{parentName:"p"},"resolveView")," hook. Player hooks are implemented with the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/webpack/tapable"},"Tapable")," package, so we can use the interception API’s ",(0,a.yg)("inlineCode",{parentName:"p"},"call")," method, this triggers everytime the hook is triggered, then we get access to the current view state and read the ",(0,a.yg)("inlineCode",{parentName:"p"},"stageData")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"commitTransitions")," attributes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"    player.hooks.viewController.tap(this.name, (vc) => {\n      vc.hooks.resolveView.intercept({\n        call: (view, id, state) => {\n          stageData = state?.attributes?.stageData;\n          commitTransitions = state?.attributes?.commitTransitions;\n        },\n      });\n    });\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"Note"),": notice how each time we tap into a hook, we use the ",(0,a.yg)("inlineCode",{parentName:"p"},"this.name")," property as the name of the plugin. This is important to avoid conflicts with other plugins."),(0,a.yg)("p",null,"Next we tap into the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataController"),", so we can scope the data controller instance for future use. Then we tap into the ",(0,a.yg)("inlineCode",{parentName:"p"},"resolveDataStages")," plugin in this data controller instance. If the ",(0,a.yg)("inlineCode",{parentName:"p"},"stage")," property is set to true, we add our ",(0,a.yg)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," to the data pipeline. If not, we return the data pipeline as is."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"    player.hooks.dataController.tap(this.name, (dc: DataController) => {\n      dataController = dc;\n\n      dc.hooks.resolveDataStages.tap(this.name, (dataPipeline) => {\n        return stageData\n          ? [...dataPipeline, GatedDataMiddleware]\n          : [...dataPipeline];\n      });\n    });\n")),(0,a.yg)("p",null,"Finally, we tap into the ",(0,a.yg)("inlineCode",{parentName:"p"},"flowController")," so we can intercept the ",(0,a.yg)("inlineCode",{parentName:"p"},"flow")," hook. We then tap into the ",(0,a.yg)("inlineCode",{parentName:"p"},"transition")," hook, which is called every time the player transitions from one view to another. If the ",(0,a.yg)("inlineCode",{parentName:"p"},"commitTransitions")," includes the next view name, we set the ",(0,a.yg)("inlineCode",{parentName:"p"},"commitShadowModel")," flag to true, and commit the data stored in the shadow model through ",(0,a.yg)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," into the data model. Whether the data was committed from the shadow model or not, we clear the shadow model paths in the ",(0,a.yg)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," instance and set the ",(0,a.yg)("inlineCode",{parentName:"p"},"commitShadowModel")," flag to false as final steps."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"    player.hooks.flowController.tap(this.name, (flowController) => {\n      flowController.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.transition.tap(this.name, (from, to) => {\n          if (from) {\n            if (commitTransitions.includes(to.name)) {\n              commitShadowModel = true;\n              player.logger.debug(\n                'Shadow Model Data to be committed %s',\n                GatedDataMiddleware.shadowModelPaths\n              );\n              dataController.set(GatedDataMiddleware.shadowModelPaths);\n            }\n\n            commitShadowModel = false;\n            GatedDataMiddleware.shadowModelPaths.clear();\n          }\n        });\n      });\n    });\n")),(0,a.yg)("p",null,"And this is how we implement a plugin that manages the staging of data based on the view state attributes."),(0,a.yg)("p",null,"Code Snippets Reference: ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/player-ui/player/blob/main/plugins/stage-revert-data/core/src/index.ts"},"StageRevertDataPlugin")),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/plugin-implementation.mdx"},"Help to improve this page")))}s.isMDXComponent=!0},21525:(e,t,n)=>{n.d(t,{A:()=>k});var a=n(52112),o=n(9495),r=n(32532),i=n(83190),l=n(37766),s=n(90283),p=n(14769),d=n(63420),m=n(23013),c=n(47482),h=n(52947),u=n(53868),g=n(13516),y="chakra-skip-nav";function f(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var w=(0,m.R)((function(e,t){const n=(0,c.Vl)("SkipLink",e),{id:a=y,...o}=(0,h.MN)(e);return(0,g.jsx)(u.B.a,{...o,ref:t,href:`#${a}`,__css:f(n)})}));w.displayName="SkipNavLink";var v=(0,m.R)((function(e,t){const{id:n=y,...a}=e;return(0,g.jsx)(u.B.div,{ref:t,id:n,tabIndex:-1,style:{outline:0},...a})}));v.displayName="SkipNavContent";var b=n(43298),C=n(2063);const N=e=>a.createElement(s.az,{display:{base:"none",xl:"block"}},"Table Of Contents",a.createElement(p._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>a.createElement("li",{key:e.text},a.createElement("a",{href:`#${e.id}`},e.text)))))),x=e=>{const{bannerExpanded:t}=a.useContext(b.BR),n="72px",r=`calc(100vh - 88px - ${t?n:"0px"})`,i=`calc(100vh - 88px - 105px - ${t?n:"0px"})`;return a.createElement(s.az,{minH:"100vh"},a.createElement(w,null,"Skip to Main Content"),a.createElement(o.s,{flexDir:"column",padding:"2"},a.createElement(C.IS,null),a.createElement(d.c,null),a.createElement(o.s,null,a.createElement(s.az,{as:"main",w:"100%",mx:"auto"},a.createElement(s.az,{display:{md:"flex"}},a.createElement(s.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4"},a.createElement(C.E1,null)),a.createElement(s.az,{flex:"1",minW:"0",overflow:"auto",maxH:r},a.createElement(s.az,{minH:i},a.createElement(v,null),e.children),a.createElement(s.az,{pt:"20"},a.createElement(C.wi,null))),e.tableOfContents&&a.createElement(N,{tableOfContents:e.tableOfContents}))))))};function k(e){return e=>a.createElement(x,null,a.createElement(o.s,{alignItems:"center"},a.createElement(r.m,{maxW:"container.lg"},a.createElement(i.xA,{components:l.Ul},e.children))))}}}]);
//# sourceMappingURL=8123.61c961f63da6f2c5865c.js.map