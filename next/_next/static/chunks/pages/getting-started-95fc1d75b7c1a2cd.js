(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6651],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return g}});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,y=u["".concat(s,".").concat(g)]||u[g]||p[g]||i;return n?a.createElement(y,l(l({ref:t},d),{},{components:n})):a.createElement(y,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"===typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57393:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started",function(){return n(86640)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return P}});var a=n(52322),r=n(2784),i=n(97729),l=n(64033),o=n(30876),s=n(21925),c=n(76808),d=n(55165),p=n(63637),u=n.n(p);function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function y(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}var m=["id"],f=["id"],h="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},b=(0,c.Gp)((function(e,t){var n=(0,c.mq)("SkipLink",e),a=(0,c.Lr)(e),i=a.id,l=void 0===i?h:i,o=y(a,m),s=u()({},k,n);return r.createElement(c.m$.a,g({},o,{ref:t,href:"#"+l,__css:s}))}));d.Ts&&(b.displayName="SkipNavLink");var w=(0,c.Gp)((function(e,t){var n=e.id,a=void 0===n?h:n,i=y(e,f);return r.createElement(c.m$.div,g({ref:t,id:a,tabIndex:-1,style:{outline:0}},i))}));d.Ts&&(w.displayName="SkipNavContent");var v=n(46977),j=n(55002),O=function(e){var t;return(0,a.jsxs)(l.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(l.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},x=function(e){var t=r.useContext(v.Il).bannerExpanded,n="72px",i="calc(100vh - 88px - ".concat(t?n:"0px",")"),o="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,a.jsxs)(l.xu,{minH:"100vh",children:[(0,a.jsx)(b,{children:"Skip to Main Content"}),(0,a.jsxs)(l.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(j._g,{}),(0,a.jsx)(l.iz,{}),(0,a.jsx)(l.kC,{children:(0,a.jsx)(l.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(l.xu,{display:{md:"flex"},children:[(0,a.jsx)(l.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4",children:(0,a.jsx)(j.Hy,{})}),(0,a.jsxs)(l.xu,{flex:"1",minW:"0",overflow:"auto",maxH:i,children:[(0,a.jsxs)(l.xu,{minH:o,children:[(0,a.jsx)(w,{}),e.children]}),(0,a.jsx)(l.xu,{pt:"20",children:(0,a.jsx)(j.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(O,{tableOfContents:e.tableOfContents})]})})})]})]})};function P(e){return function(t){return(0,a.jsxs)(x,{children:[(0,a.jsx)(i.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(l.kC,{alignItems:"center",children:(0,a.jsx)(l.W2,{maxW:"container.lg",children:(0,a.jsx)(o.Zo,{components:s.tl,children:t.children})})})]})}}},86640:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});n(2784);var a=n(30876),r=n(43857);function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",Object.assign({},t))}},o=l("Tabs"),s=l("Gradle"),c=l("Maven"),d={},p=(0,r.Z)({title:"Getting Started",tableOfContents:[{text:"Getting Started",id:"getting-started",level:1},{text:"React",id:"react",level:2},{text:"Install Dependencies",id:"install-dependencies",level:3},{text:"Configuration",id:"configuration",level:3},{text:"Render Content",id:"render-content",level:3},{text:"iOS (Swift)",id:"ios-swift",level:2},{text:"Install Dependencies",id:"install-dependencies",level:3},{text:"Configuration",id:"configuration",level:3},{text:"JVM/Android",id:"jvmandroid",level:2},{text:"Install Dependencies",id:"install-dependencies",level:3},{text:"Configuration",id:"configuration",level:3},{text:"Usage",id:"usage",level:3},{text:"Basic",id:"basic",level:4},{text:"ViewModel",id:"viewmodel",level:4},{text:"PlayerViewModel",id:"playerviewmodel",level:5},{text:"PlayerFragment",id:"playerfragment",level:5}]});function u(e){var t=e.components,n=i(e,["components"]);return(0,a.kt)(p,Object.assign({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"getting-started"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#getting-started"}),"Getting Started")),(0,a.kt)("p",null,"Getting started with Player is simple. Below we have guides per platform on how to integrate Player into your platform of choice. "),(0,a.kt)("h2",Object.assign({},{id:"react"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#react"}),"React")),(0,a.kt)("h3",Object.assign({},{id:"install-dependencies"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#install-dependencies"}),"Install Dependencies")),(0,a.kt)("p",null,"The first dependency you\u2019ll need to pull in in the React Player itself. You can do this by running"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"yarn add @player-ui/react\n")),(0,a.kt)("p",null,"or "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @player-ui/react\n")),(0,a.kt)("h3",Object.assign({},{id:"configuration"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#configuration"}),"Configuration")),(0,a.kt)("p",null,"Next, in your code you\u2019ll need to initialize Player. This is where you would also initialize any plugins you want to use with Player and create the configuration for Player itself. Below is a minimal example of this. "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import { ReactPlayer } from '@player-ui/react';\nimport { ReferenceAssetsPlugin } from '@player-ui/reference-assets-plugin-react';\n\n// create a new web-player instance\n\nconst reactPlayer = new ReactPlayer({\n  plugins: [new ReferenceAssetsPlugin()],\n});\n")),(0,a.kt)("h3",Object.assign({},{id:"render-content"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#render-content"}),"Render Content")),(0,a.kt)("p",null,"Now that you have a Player instance created. You\u2019ll need to start it with some content."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const content = {/* your content here */}\nreactPlayer.start(content);\n")),(0,a.kt)("p",null,"With Player running your content, you\u2019ll need to actually render out what is processes. To do this, you can use the React Player\u2019s component API to inster it into your React tree. "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const MyApp = () => {\n  return <reactPlayer.Component />;\n};\n")),(0,a.kt)("p",null,"Congrats! You\u2019ve got Player up and running. If you need additional functionality you can add more plugins to extend Player\u2019s functionality. Head over to the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"./plugins"}),"Plugins")," section to take a look at the Plugins we\u2019ve developed or take a look at the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"./architecture"}),"Architecture")," section to see how you can write your own. "),(0,a.kt)("h2",Object.assign({},{id:"ios-swift"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#ios-swift"}),"iOS (Swift)")),(0,a.kt)("h3",Object.assign({},{id:"install-dependencies-1"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#install-dependencies-1"}),"Install Dependencies")),(0,a.kt)("p",null,"In your ",(0,a.kt)("inlineCode",{parentName:"p"},"Podfile")," you\u2019ll need to add ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerUI")," as a dependency and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReferenceAssets")," plugin to use the base set of assets. "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),"target 'MyApp' do\n  # Add the pod to your target\n  pod 'PlayerUI'\n  pod 'PlayerUI/ReferenceAssets' # For example only\nend\n")),(0,a.kt)("h3",Object.assign({},{id:"configuration-1"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#configuration-1"}),"Configuration")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," is just a normal SwiftUI View and can be inserted anywhere in your hierarchy. The flow will start automatically, and the result will update the ",(0,a.kt)("inlineCode",{parentName:"p"},"Binding<Result<CompletedState, PlayerError>?>")," that you pass to it:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"import PlayerUI\n\nstruct MyApp: View {\n  @State var result: Result<CompletedState, PlayerError>? = nil\n  @ObservedObject var viewModel: MyViewModel\n  var body: some View {\n    SwiftUIPlayer(\n      flow: $viewModel.flowString,\n      plugins: [ReferenceAssetsPlugin()],\n      result: $result\n    )\n  }\n}\n")),(0,a.kt)("h2",Object.assign({},{id:"jvmandroid"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#jvmandroid"}),"JVM/Android")),(0,a.kt)("h3",Object.assign({},{id:"install-dependencies-2"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#install-dependencies-2"}),"Install Dependencies")),(0,a.kt)("p",null,"Configure the Android Player dependencies in your Gradle files. You\u2019ll also need to add a plugin that provides asset definitions and components. To get started, we are going to use the reference set provided by the Android Player. ",(0,a.kt)("em",{parentName:"p"},"Note: The reference asset set isn\u2019t intended for production use. It exists as an example of how to create an Android asset and can be used to help get started. ")," "),(0,a.kt)(o,{mdxType:"Tabs"},(0,a.kt)(s,{language:"Kotlin",mdxType:"Gradle"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'// Add Android Player dependencies\ndependencies {\n    // Android Player\n    implementation("com.intuit.player.android", "player", androidPlayerVersion)\n    // Optional - reference asset set\n    implementation("com.intuit.player.android", "assets", referenceAssetsVersion)\n}\n'))),(0,a.kt)(s,{language:"Groovy",mdxType:"Gradle"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-groovy"}),'// Add Android Player dependencies\ndependencies {\n    // Android Player\n    implementation "com.intuit.player.android:player:$androidPlayerVersion"\n    // Optional - reference asset set\n    implementation "com.intuit.player.android:assets:$referenceAssetsVersion"\n}\n'))),(0,a.kt)(c,{mdxType:"Maven"},(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-xml"}),"<dependency>\n    <groupId>com.intuit.player.jvm</groupId>\n    <artifactId>core</artifactId>\n    <version>3.2.1</version>\n</dependency>\n")))),(0,a.kt)("h3",Object.assign({},{id:"configuration-2"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#configuration-2"}),"Configuration")),(0,a.kt)("p",null,"All you need to create an ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidPlayer")," instance is the Android Context and any plugins you want."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"// create Android Player with reference assets plugin\nval player = AndroidPlayer(context, ReferenceAssetsPlugin())\n")),(0,a.kt)("p",null,"Once you have a Player, you must add a handler for view updates, which are represented as RenderableAssets. "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"// handle view updates\nplayer.onUpdate { asset: RenderableAsset? ->\n    // render asset as View\n    val view: View = asset?.render()\n    // add view to screen\n}\n")),(0,a.kt)("h3",Object.assign({},{id:"usage"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#usage"}),"Usage")),(0,a.kt)("h4",Object.assign({},{id:"basic"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#basic"}),"Basic")),(0,a.kt)("p",null,"With the Android Player and handler configured, all that\u2019s left is starting a flow. This is done by calling\nstart with a JSON string containing your Player content."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"player.start(content)\n")),(0,a.kt)("p",null,"When you\u2019re done with Player, release any native runtime memory used to instantiate Player or run the flow."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"player.release()\n")),(0,a.kt)("h4",Object.assign({},{id:"viewmodel"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#viewmodel"}),"ViewModel")),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerFragment"),", the above orchestration is done for you. All that is needed is to provide concrete implementations of each and add the fragment to your app."),(0,a.kt)("h5",Object.assign({},{id:"playerviewmodel"}),(0,a.kt)("a",Object.assign({parentName:"h5"},{href:"#playerviewmodel"}),"PlayerViewModel")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," is an ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidViewModel")," meaning it requires the actual Android ",(0,a.kt)("inlineCode",{parentName:"p"},"Application")," as well as an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," to be supplied in the constructor. The AsyncFlowIterator is what tells Player which flows to run. This can be hardcoded into the view model or expected as an argument, as shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"class SimplePlayerViewModel(application: Application, flows: AsyncFlowIterator) : PlayerViewModel(application, flows) {\n    override val plugins = listOf(ReferenceAssetsPlugin())\n}\n")),(0,a.kt)("h5",Object.assign({},{id:"playerfragment"}),(0,a.kt)("a",Object.assign({parentName:"h5"},{href:"#playerfragment"}),"PlayerFragment")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerFragment")," is a simple Android ",(0,a.kt)("inlineCode",{parentName:"p"},"Fragment")," that only requires a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," to be defined. If your view model requires the AsyncFlowIterator to be passed as part of the constructor, you can leverage the ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayerViewModel.Factory")," to produce it, as shown below."),(0,a.kt)("p",null,"Specifically, this fragment takes a flow as an argument to the constructor and creates a single-flow ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," instance using the pseudo-constructor helper."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"class SimplePlayerFragment(override val flow: String) : PlayerFragment() {\n    override val playerViewModel by viewModels<SimplePlayerViewModel> {\n        PlayerViewModel.Factory(requireActivity().application, AsyncFlowIterator(flow), ::SimplePlayerViewModel)\n    }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/playerui/player/blob/main//home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1485/execroot/player/docs/site/pages/getting-started.mdx"}),"Help to improve this page")))}u.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return t=57393,e(e.s=t);var t}));var t=e.O();_N_E=t}]);