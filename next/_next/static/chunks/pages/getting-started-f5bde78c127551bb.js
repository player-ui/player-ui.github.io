(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6651],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return y}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),y=a,m=u["".concat(s,".").concat(y)]||u[y]||d[y]||l;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"===typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57393:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started",function(){return n(86640)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return O}});var r=n(52322),a=n(2784),l=n(97729),i=n(64033),o=n(30876),s=n(21925),p=n(76808),c=n(55165),d=n(63637),u=n.n(d);function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}var f=["id"],g=["id"],h="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},w=(0,p.Gp)((function(e,t){var n=(0,p.mq)("SkipLink",e),r=(0,p.Lr)(e),l=r.id,i=void 0===l?h:l,o=m(r,f),s=u()({},k,n);return a.createElement(p.m$.a,y({},o,{ref:t,href:"#"+i,__css:s}))}));c.Ts&&(w.displayName="SkipNavLink");var b=(0,p.Gp)((function(e,t){var n=e.id,r=void 0===n?h:n,l=m(e,g);return a.createElement(p.m$.div,y({ref:t,id:r,tabIndex:-1,style:{outline:0}},l))}));c.Ts&&(b.displayName="SkipNavContent");var v=n(46977),x=n(55002),j=function(e){var t;return(0,r.jsxs)(i.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,r.jsx)(i.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},P=function(e){var t=a.useContext(v.Il).bannerExpanded,n="72px",l="calc(100vh - 88px - ".concat(t?n:"0px",")"),o="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,r.jsxs)(i.xu,{minH:"100vh",children:[(0,r.jsx)(w,{children:"Skip to Main Content"}),(0,r.jsxs)(i.kC,{flexDir:"column",padding:"2",children:[(0,r.jsx)(x._g,{}),(0,r.jsx)(i.iz,{}),(0,r.jsx)(i.kC,{children:(0,r.jsx)(i.xu,{as:"main",w:"100%",mx:"auto",children:(0,r.jsxs)(i.xu,{display:{md:"flex"},children:[(0,r.jsx)(i.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:l,pr:"8",ml:"4",children:(0,r.jsx)(x.Hy,{})}),(0,r.jsxs)(i.xu,{flex:"1",minW:"0",overflow:"auto",maxH:l,children:[(0,r.jsxs)(i.xu,{minH:o,children:[(0,r.jsx)(b,{}),e.children]}),(0,r.jsx)(i.xu,{pt:"20",children:(0,r.jsx)(x.$_,{})})]}),e.tableOfContents&&(0,r.jsx)(j,{tableOfContents:e.tableOfContents})]})})})]})]})};function O(e){return function(t){return(0,r.jsxs)(P,{children:[(0,r.jsx)(l.default,{children:(0,r.jsxs)("title",{children:["Player - ",e.title]})}),(0,r.jsx)(i.kC,{alignItems:"center",children:(0,r.jsx)(i.W2,{maxW:"container.lg",children:(0,r.jsx)(o.Zo,{components:s.tl,children:t.children})})})]})}}},86640:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});n(2784);var r=n(30876),a=n(43857);function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",Object.assign({},t))}},o=i("PlatformTabs"),s=i("Alert"),p={},c=(0,a.Z)({title:"Getting Started",tableOfContents:[{text:"Getting Started",id:"getting-started",level:1},{text:"Install Dependencies",id:"install-dependencies",level:3},{text:"Configuration",id:"configuration",level:3},{text:"Render Content",id:"render-content",level:3},{text:"ViewModel",id:"viewmodel",level:4},{text:"PlayerViewModel",id:"playerviewmodel",level:5},{text:"PlayerFragment",id:"playerfragment",level:5}]});function d(e){var t=e.components,n=l(e,["components"]);return(0,r.kt)(c,Object.assign({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",Object.assign({},{id:"getting-started"}),(0,r.kt)("a",Object.assign({parentName:"h1"},{href:"#getting-started"}),"Getting Started")),(0,r.kt)("p",null,"Getting started with Player is simple."),(0,r.kt)("h3",Object.assign({},{id:"install-dependencies"}),(0,r.kt)("a",Object.assign({parentName:"h3"},{href:"#install-dependencies"}),"Install Dependencies")),(0,r.kt)("p",null,"The first dependency you\u2019ll need to pull in is the Player itself. Additionally, you\u2019ll need an assets plugin to define any UI \u2014 we\u2019ll use the reference assets as an example."),(0,r.kt)(o,{mdxType:"PlatformTabs"},(0,r.kt)("react",null,(0,r.kt)("p",null,"You can do this by running"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"yarn add @player-ui/react\nyarn add @player-ui/reference-assets-plugin-react\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @player-ui/react\nnpm install @player-ui/reference-assets-plugin-react\n"))),(0,r.kt)("ios",null,(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile")," you\u2019ll need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerUI")," as a dependency and the ",(0,r.kt)("inlineCode",{parentName:"p"},"ReferenceAssets")," plugin to use the base set of assets."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),"source 'https://github.com/player-ui/player'\n\ntarget 'MyApp' do\n  # Add the pod to your target\n  pod 'PlayerUI'\n  pod 'PlayerUI/ReferenceAssets' # For example only\nend\n"))),(0,r.kt)("android",null,(0,r.kt)("p",null,"Configure the Android Player dependencies in your ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle(.kts)")," files."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),'dependencies {\n    // Android Player\n    implementation("com.intuit.player.android:player:$playerVersion")\n    // Optional - reference assets\n    implementation("com.intuit.player.android:assets:$playerVersion")\n}\n')))),(0,r.kt)(s,{status:"warning",description:"The reference assets aren't intended for production use. They exist as an example of how to create assets and can be used to help get started.",mdxType:"Alert"}),(0,r.kt)("h3",Object.assign({},{id:"configuration"}),(0,r.kt)("a",Object.assign({parentName:"h3"},{href:"#configuration"}),"Configuration")),(0,r.kt)("p",null,"Next, in your code you\u2019ll need to initialize Player. This is where you would also initialize any plugins you want to use with Player and create the configuration for Player itself. Below is a minimal example of this."),(0,r.kt)(o,{mdxType:"PlatformTabs"},(0,r.kt)("react",null,(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import { ReactPlayer } from '@player-ui/react';\nimport { ReferenceAssetsPlugin } from '@player-ui/reference-assets-plugin-react';\n\n// create a new web-player instance\n\nconst reactPlayer = new ReactPlayer({\n  plugins: [new ReferenceAssetsPlugin()],\n});\n"))),(0,r.kt)("ios",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," is just a normal SwiftUI View and can be inserted anywhere in your hierarchy."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"import PlayerUI\n\nvar body: some View {\n  SwiftUIPlayer(\n    plugins: [ReferenceAssetsPlugin()],\n  )\n}\n"))),(0,r.kt)("android",null,(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"// create Android Player with reference assets plugin\nval player = AndroidPlayer(ReferenceAssetsPlugin())\n")))),(0,r.kt)("h3",Object.assign({},{id:"render-content"}),(0,r.kt)("a",Object.assign({parentName:"h3"},{href:"#render-content"}),"Render Content")),(0,r.kt)("p",null,"Now that you have a Player instance created. You\u2019ll need to start it with some ",(0,r.kt)("a",Object.assign({parentName:"p"},{href:"/content"}),"content"),"."),(0,r.kt)(o,{mdxType:"PlatformTabs"},(0,r.kt)("react",null,(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const content = {/* your content here */}\nreactPlayer.start(content);\n")),(0,r.kt)("p",null,"With Player running your content, you\u2019ll need to actually render out what is processes. To do this, you can use the React Player\u2019s component API to insert it into your React tree."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"const MyApp = () => {\n  return <reactPlayer.Component />;\n};\n"))),(0,r.kt)("ios",null,(0,r.kt)("p",null,"Expanding on the ",(0,r.kt)("inlineCode",{parentName:"p"},"SwiftUIPlayer")," creation above, providing a ",(0,r.kt)("inlineCode",{parentName:"p"},"flow")," will start the Player automatically, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"Binding<Result<CompletedState, PlayerError>?>")," that you pass to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"import PlayerUI\n\nstruct MyApp: View {\n  @State var result: Result<CompletedState, PlayerError>? = nil\n  @ObservedObject var viewModel: MyViewModel\n  var body: some View {\n    SwiftUIPlayer(\n      flow: $viewModel.flowString,\n      plugins: [ReferenceAssetsPlugin()],\n      result: $result\n    )\n  }\n}\n"))),(0,r.kt)("android",null,(0,r.kt)("p",null,"To receive view updates, you must add a handler to render the views which are represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"RenderableAsset"),"s."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"// handle view updates - should be done before starting the Player\nplayer.onUpdate { asset: RenderableAsset? ->\n    // render asset as View `into` view tree\n    asset?.render() into binding.playerContainer\n}\n\n// start Player\nplayer.start(content)\n")),(0,r.kt)("p",null,"When you\u2019re done with Player, release any native runtime memory used to instantiate Player or run the flow."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"player.release()\n")),(0,r.kt)("p",null,"Creating your own ",(0,r.kt)("inlineCode",{parentName:"p"},"AndroidPlayer")," instance is fairly simple, but it grows in complexity when considering proper resources management and app orchestration. We provide a Fragment/ViewModel integration to make it easier to properly integrate into your app and account for these concerns. "),(0,r.kt)("h4",Object.assign({},{id:"viewmodel"}),(0,r.kt)("a",Object.assign({parentName:"h4"},{href:"#viewmodel"}),"ViewModel")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerFragment"),", the above orchestration is done for you. All that is needed is to provide concrete implementations of each and add the fragment to your app."),(0,r.kt)("h5",Object.assign({},{id:"playerviewmodel"}),(0,r.kt)("a",Object.assign({parentName:"h5"},{href:"#playerviewmodel"}),"PlayerViewModel")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," requires an ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," to be supplied in the constructor. The AsyncFlowIterator is what tells Player which flows to run. This can be hardcoded into the view model or expected as an argument, as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"class SimplePlayerViewModel(flows: AsyncFlowIterator) : PlayerViewModel(flows) {\n    override val plugins = listOf(ReferenceAssetsPlugin())\n}\n")),(0,r.kt)("h5",Object.assign({},{id:"playerfragment"}),(0,r.kt)("a",Object.assign({parentName:"h5"},{href:"#playerfragment"}),"PlayerFragment")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerFragment")," is a simple Android ",(0,r.kt)("inlineCode",{parentName:"p"},"Fragment")," that only requires a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerViewModel")," to be defined. If your view model requires the ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," to be passed as part of the constructor, you can leverage the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerViewModel.Factory")," to produce it, as shown below."),(0,r.kt)("p",null,"Specifically, this fragment takes a flow as an argument to the constructor and creates a single-flow ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncFlowIterator")," instance using the pseudo-constructor helper."),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-kotlin"}),"class SimplePlayerFragment(override val flow: String) : PlayerFragment() {\n    override val playerViewModel by viewModels<SimplePlayerViewModel> {\n        PlayerViewModel.Factory(AsyncFlowIterator(flow), ::SimplePlayerViewModel)\n    }\n}\n")))),(0,r.kt)("p",null,"Congrats! You\u2019ve got Player up and running. If you need additional functionality you can add more plugins to extend Player\u2019s functionality. Head over to the ",(0,r.kt)("a",Object.assign({parentName:"p"},{href:"./plugins"}),"Plugins")," section to take a look at the Plugins we\u2019ve developed or take a look at the ",(0,r.kt)("a",Object.assign({parentName:"p"},{href:"./architecture"}),"Architecture")," section to see how you can write your own."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/getting-started.mdx"}),"Help to improve this page")))}d.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return t=57393,e(e.s=t);var t}));var t=e.O();_N_E=t}]);