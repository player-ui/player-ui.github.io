(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3384],{30876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"===typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"===typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"===typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80774:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/plugins/metrics",function(){return t(92726)}])},43857:function(e,n,t){"use strict";t.d(n,{Z:function(){return w}});var r=t(52322),i=t(2784),a=t(97729),o=t(64033),l=t(30876),s=t(21925),c=t(76808),u=t(55165),p=t(63637),d=t.n(p);function m(){return(m=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function f(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}var g=["id"],h=["id"],b="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},y=(0,c.Gp)((function(e,n){var t=(0,c.mq)("SkipLink",e),r=(0,c.Lr)(e),a=r.id,o=void 0===a?b:a,l=f(r,g),s=d()({},k,t);return i.createElement(c.m$.a,m({},l,{ref:n,href:"#"+o,__css:s}))}));u.Ts&&(y.displayName="SkipNavLink");var x=(0,c.Gp)((function(e,n){var t=e.id,r=void 0===t?b:t,a=f(e,h);return i.createElement(c.m$.div,m({ref:n,id:r,tabIndex:-1,style:{outline:0}},a))}));u.Ts&&(x.displayName="SkipNavContent");var v=t(46977),j=t(96882),O=function(e){var n;return(0,r.jsxs)(o.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,r.jsx)(o.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(n=e.tableOfContents)||void 0===n?void 0:n.map((function(e){return(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},P=function(e){var n=i.useContext(v.Il).bannerExpanded,t="72px",a="calc(100vh - 88px - ".concat(n?t:"0px",")"),l="calc(100vh - 88px - 105px - ".concat(n?t:"0px",")");return(0,r.jsxs)(o.xu,{minH:"100vh",children:[(0,r.jsx)(y,{children:"Skip to Main Content"}),(0,r.jsxs)(o.kC,{flexDir:"column",padding:"2",children:[(0,r.jsx)(j._g,{}),(0,r.jsx)(o.iz,{}),(0,r.jsx)(o.kC,{children:(0,r.jsx)(o.xu,{as:"main",w:"100%",mx:"auto",children:(0,r.jsxs)(o.xu,{display:{md:"flex"},children:[(0,r.jsx)(o.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:a,pr:"8",ml:"4",children:(0,r.jsx)(j.Hy,{})}),(0,r.jsxs)(o.xu,{flex:"1",minW:"0",overflow:"auto",maxH:a,children:[(0,r.jsxs)(o.xu,{minH:l,children:[(0,r.jsx)(x,{}),e.children]}),(0,r.jsx)(o.xu,{pt:"20",children:(0,r.jsx)(j.$_,{})})]}),e.tableOfContents&&(0,r.jsx)(O,{tableOfContents:e.tableOfContents})]})})})]})]})};function w(e){return function(n){return(0,r.jsxs)(P,{children:[(0,r.jsx)(a.default,{children:(0,r.jsxs)("title",{children:["Player - ",e.title]})}),(0,r.jsx)(o.kC,{alignItems:"center",children:(0,r.jsx)(o.W2,{maxW:"container.lg",children:(0,r.jsx)(l.Zo,{components:s.tl,children:n.children})})})]})}}},92726:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});t(2784);var r=t(30876),i=t(43857);function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o,l=(o="PlatformTabs",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",Object.assign({},e))}),s={},c=(0,i.Z)({title:"Metrics",platform:"core,react,ios",tableOfContents:[{text:"Metrics Plugin",id:"metrics-plugin",level:1},{text:"Usage",id:"usage",level:2},{text:"Using a custom timer",id:"using-a-custom-timer",level:2},{text:"Measuring Render Time",id:"measuring-render-time",level:2},{text:"Beaconing",id:"beaconing",level:2}]});function u(e){var n=e.components,t=a(e,["components"]);return(0,r.kt)(c,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",Object.assign({},{id:"metrics-plugin"}),(0,r.kt)("a",Object.assign({parentName:"h1"},{href:"#metrics-plugin"}),"Metrics Plugin")),(0,r.kt)("p",null,"The Metrics Plugin is used to gather timing information about Player\u2019s execution of a flow. There are also platform specific integrations to include ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," times."),(0,r.kt)("p",null,"The diagram below illistrates some of the timing information gathered:"),(0,r.kt)("p",null,(0,r.kt)("img",Object.assign({parentName:"p"},{src:"/metrics-timing.png?darkModeInvert",alt:"Metrics Timing Diagram"}))),(0,r.kt)("h2",Object.assign({},{id:"usage"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#usage"}),"Usage")),(0,r.kt)(l,{mdxType:"PlatformTabs"},(0,r.kt)("core",null,(0,r.kt)("p",null,"Add the plugin to Player:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { Player } from '@player-ui/player';\nimport { MetricsPlugin } from '@player-ui/metrics-plugin';\n\nconst player = new Player({\n  plugins: [\n    new MetricsPlugin({\n      onUpdate: (metrics) => {\n        // Handle the update\n      }\n    })\n  ]\n})\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onUpdate")," callback will be invoked for any update to the metrics. There are also callbacks for finer-grained events (",(0,r.kt)("inlineCode",{parentName:"p"},"onRenderEnd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onInteractive"),", etc), as well as a ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks")," based API for even more control."),(0,r.kt)("h2",Object.assign({},{id:"using-a-custom-timer"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#using-a-custom-timer"}),"Using a custom timer")),(0,r.kt)("p",null,"By default, all time is measured in ms using ",(0,r.kt)("inlineCode",{parentName:"p"},"performance.now()")," with a fallback to the less-accurate ",(0,r.kt)("inlineCode",{parentName:"p"},"Date.now()"),".\nIf you wish to supply your own timer, simply use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getTime")," option to set the function to use."),(0,r.kt)("h2",Object.assign({},{id:"measuring-render-time"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#measuring-render-time"}),"Measuring Render Time")),(0,r.kt)("p",null,"For extensions of this plugin that wish to track the render (and update) times of nodes, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"trackRenderTime")," flag to ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),". You must then call ",(0,r.kt)("inlineCode",{parentName:"p"},"metrics.renderEnd()")," to denote when content is painted on the screen. This is automatically handled for the platform specific versions of this plugin.")),(0,r.kt)("react",null,(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"react")," version of the Metrics Plugin adds support for ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," times to events. The API mirrors that of the core version:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { WebPlayer } from '@player-ui/react';\nimport { MetricsPlugin } from '@player-ui/metrics-plugin-react';\n\nconst player = new WebPlayer({\n  plugins: [\n    new MetricsPlugin({\n      onUpdate: (metrics) => {\n        // Handle the update\n      }\n    })\n  ]\n})\n"))),(0,r.kt)("ios",null,(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ios")," version of the Metrics Plugin will track initial render time for each view in a flow. Due to current SwiftUI limitations, update time can\u2019t be tracked yet. It should be used in conjunction with a core plugin that utilizes the events."),(0,r.kt)("p",null,"Add the subspec:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-ruby"}),"pod 'PlayerUI/MetricsPlugin'\n\nConstruct the plugin:\n\n```swift\nSwiftUIPlayer(\n  flow: flow,\n  plugins: [MetricsPlugin()],\n  result: $result\n)\n")))),(0,r.kt)("h2",Object.assign({},{id:"beaconing"}),(0,r.kt)("a",Object.assign({parentName:"h2"},{href:"#beaconing"}),"Beaconing")),(0,r.kt)(l,{mdxType:"PlatformTabs"},(0,r.kt)("core",null,(0,r.kt)("p",null,"The Metrics Plugin also includes a plugin for the Beacon Plugin that adds render time to the hook context for ",(0,r.kt)("inlineCode",{parentName:"p"},"viewed")," beacons send for views. This plugin is automatically registered to the Beacon Plugin if the ",(0,r.kt)("inlineCode",{parentName:"p"},"trackRenderTime")," option is enabled."),(0,r.kt)("p",null,"In order to ",(0,r.kt)("em",{parentName:"p"},"actually")," include the render-time in a beacon, you must create a ",(0,r.kt)("inlineCode",{parentName:"p"},"BeaconPluginPlugin")," that maps the renderTime from the hook\u2019s context to the actual beacon object. It can be accessed through the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetricsViewBeaconPluginContextSymbol")," key:"),(0,r.kt)("pre",null,(0,r.kt)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"import { MetricsViewBeaconPluginContextSymbol } from '@player-ui/metrics-plugin';\nimport { BeaconPluginPlugin } from '@player-ui/beacon-plugin';\n\nclass MyBeaconPluginPlugin implements BeaconPluginPlugin {\n  apply(beaconPlugin: BeaconPlugin) {\n    beaconPlugin.hooks.buildBeacon.tapPromise(\n      { name: 'my-beacon-plugin', context: true } as Tap,\n      async (context, beacon) => {\n        const { renderTime } =\n          (await (context as any)[MetricsViewBeaconPluginContextSymbol]) || {};\n\n        return {\n          ...beacon,\n          ...(renderTime && { renderTime }),\n        };\n      }\n    );\n  }\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",Object.assign({parentName:"p"},{href:"./beacon"}),"Beacon Plugin")," for more info."))))}u.isMDXComponent=!0}},function(e){e.O(0,[6525,204,3795,9774,2888,179],(function(){return n=80774,e(e.s=n);var n}));var n=e.O();_N_E=n}]);