(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1801],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69266:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/plugin-implementation",function(){return n(44165)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return j}});var a=n(52322),i=n(2784),r=n(97729),o=n(64033),l=n(30876),s=n(21925),p=n(76808),c=n(55165),d=n(63637),m=n.n(d);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}var f=["id"],g=["id"],w="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},b=(0,p.Gp)((function(e,t){var n=(0,p.mq)("SkipLink",e),a=(0,p.Lr)(e),r=a.id,o=void 0===r?w:r,l=h(a,f),s=m()({},k,n);return i.createElement(p.m$.a,u({},l,{ref:t,href:"#"+o,__css:s}))}));c.Ts&&(b.displayName="SkipNavLink");var y=(0,p.Gp)((function(e,t){var n=e.id,a=void 0===n?w:n,r=h(e,g);return i.createElement(p.m$.div,u({ref:t,id:a,tabIndex:-1,style:{outline:0}},r))}));c.Ts&&(y.displayName="SkipNavContent");var v=n(46977),x=n(55002),C=function(e){var t;return(0,a.jsxs)(o.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(o.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},N=function(e){var t=i.useContext(v.Il).bannerExpanded,n="72px",r="calc(100vh - 88px - ".concat(t?n:"0px",")"),l="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,a.jsxs)(o.xu,{minH:"100vh",children:[(0,a.jsx)(b,{children:"Skip to Main Content"}),(0,a.jsxs)(o.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(x._g,{}),(0,a.jsx)(o.iz,{}),(0,a.jsx)(o.kC,{children:(0,a.jsx)(o.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(o.xu,{display:{md:"flex"},children:[(0,a.jsx)(o.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4",children:(0,a.jsx)(x.Hy,{})}),(0,a.jsxs)(o.xu,{flex:"1",minW:"0",overflow:"auto",maxH:r,children:[(0,a.jsxs)(o.xu,{minH:l,children:[(0,a.jsx)(y,{}),e.children]}),(0,a.jsx)(o.xu,{pt:"20",children:(0,a.jsx)(x.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(C,{tableOfContents:e.tableOfContents})]})})})]})]})};function j(e){return function(t){return(0,a.jsxs)(N,{children:[(0,a.jsx)(r.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(o.kC,{alignItems:"center",children:(0,a.jsx)(o.W2,{maxW:"container.lg",children:(0,a.jsx)(l.Zo,{components:s.tl,children:t.children})})})]})}}},44165:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});n(2784);var a=n(30876),i=n(43857);function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o={},l=(0,i.Z)({title:"Plugin Implementation",tableOfContents:[{text:"Plugin Implementation",id:"plugin-implementation",level:1}]});function s(e){var t=e.components,n=r(e,["components"]);return(0,a.kt)(l,Object.assign({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"plugin-implementation"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#plugin-implementation"}),"Plugin Implementation")),(0,a.kt)("p",null,"The main purpose of a Plugin is to extend or add new functionality by tapping into Player\u2019s pipeline of components via hooks. In this section we\u2019ll go over the steps to implement a plugin."),(0,a.kt)("p",null,"We\u2019ll use the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"./plugins/stage-revert-data"}),"stage-revert-data")," plugin as example. After creating our plugin class, we\u2019ll use the ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," method which provides access to the Player instance, which then gives access to the necessary hooks. "),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"export default class StageRevertDataPlugin implements PlayerPlugin {\n  name = 'stage-revert-data-plugin';\n\n  apply(player: Player) {\n    let dataController: DataController;\n    let stageData: String;\n    let commitTransitions: String[];\n    let commitShadowModel: Boolean = false;\n\n    const GatedDataMiddleware = new ValidationMiddleware(\n      () =>\n        commitShadowModel\n          ? undefined\n          : {\n              message: 'staging data',\n              severity: 'error',\n            },\n      { shouldIncludeInvalid: () => true }\n    );\n")),(0,a.kt)("p",null,"For this case we needed to define variables that will store references for the scope the hooks will share:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dataController"),": Reference to the data controller hook in the Player instance, can be used to read, update or commit new changes to the data model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stageData"),": View attribute that comes from the view state, used for enabling the staging of data"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"commitTransitions"),": The list of view names which the shadow model should be committed if transitioned to. Comes from the view state attribute as well."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"commitShadowModel"),": Flag that enables committing shadow model into data model after the transition, only if ",(0,a.kt)("inlineCode",{parentName:"li"},"stageData")," is set to true and the next target view name is included in ",(0,a.kt)("inlineCode",{parentName:"li"},"commitTransitions"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GatedDataMiddleware")," Instance from ",(0,a.kt)("inlineCode",{parentName:"li"},"ValidationMiddleware")," to be used as a middleware to intercept the data-model pipeline before any data is committed and cache the data instead, only if ",(0,a.kt)("inlineCode",{parentName:"li"},"stageData")," is set to true.")),(0,a.kt)("p",null,"The next step is to tap into the necessary Player hooks. First we tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"viewController")," which we can then intercept the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolveView")," hook. Player hooks are implemented with the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/webpack/tapable"}),"Tapable")," package, so we can use the interception API\u2019s ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," method, this triggers everytime the hook is triggered, then we get access to the current view state and read the ",(0,a.kt)("inlineCode",{parentName:"p"},"stageData")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"commitTransitions")," attributes."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"    player.hooks.viewController.tap(this.name, (vc) => {\n      vc.hooks.resolveView.intercept({\n        call: (view, id, state) => {\n          stageData = state?.attributes?.stageData;\n          commitTransitions = state?.attributes?.commitTransitions;\n        },\n      });\n    });\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Note"),": notice how each time we tap into a hook, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"this.name")," property as the name of the plugin. This is important to avoid conflicts with other plugins."),(0,a.kt)("p",null,"Next we tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataController"),", so we can scope the data controller instance for future use. Then we tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolveDataStages")," plugin in this data controller instance. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"stage")," property is set to true, we add our ",(0,a.kt)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," to the data pipeline. If not, we return the data pipeline as is."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"    player.hooks.dataController.tap(this.name, (dc: DataController) => {\n      dataController = dc;\n\n      dc.hooks.resolveDataStages.tap(this.name, (dataPipeline) => {\n        return stageData\n          ? [...dataPipeline, GatedDataMiddleware]\n          : [...dataPipeline];\n      });\n    });\n")),(0,a.kt)("p",null,"Finally, we tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"flowController")," so we can intercept the ",(0,a.kt)("inlineCode",{parentName:"p"},"flow")," hook. We then tap into the ",(0,a.kt)("inlineCode",{parentName:"p"},"transition")," hook, which is called every time the player transitions from one view to another. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"commitTransitions")," includes the next view name, we set the ",(0,a.kt)("inlineCode",{parentName:"p"},"commitShadowModel")," flag to true, and commit the data stored in the shadow model through ",(0,a.kt)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," into the data model. Whether the data was committed from the shadow model or not, we clear the shadow model paths in the ",(0,a.kt)("inlineCode",{parentName:"p"},"GatedDataMiddleware")," instance and set the ",(0,a.kt)("inlineCode",{parentName:"p"},"commitShadowModel")," flag to false as final steps."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"    player.hooks.flowController.tap(this.name, (flowController) => {\n      flowController.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.transition.tap(this.name, (from, to) => {\n          if (from) {\n            if (commitTransitions.includes(to.name)) {\n              commitShadowModel = true;\n              player.logger.debug(\n                'Shadow Model Data to be committed %s',\n                GatedDataMiddleware.shadowModelPaths\n              );\n              dataController.set(GatedDataMiddleware.shadowModelPaths);\n            }\n\n            commitShadowModel = false;\n            GatedDataMiddleware.shadowModelPaths.clear();\n          }\n        });\n      });\n    });\n")),(0,a.kt)("p",null,"And this is how we implement a plugin that manages the staging of data based on the view state attributes."),(0,a.kt)("p",null,"Code Snippets Reference: ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/player-ui/player/blob/main/plugins/stage-revert-data/core/src/index.ts"}),"StageRevertDataPlugin")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/playerui/player/blob/main//home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1485/execroot/player/docs/site/pages/plugin-implementation.mdx"}),"Help to improve this page")))}s.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return t=69266,e(e.s=t);var t}));var t=e.O();_N_E=t}]);