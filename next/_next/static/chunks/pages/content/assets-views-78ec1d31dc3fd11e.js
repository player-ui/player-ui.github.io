(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9189],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=o(n),u=i,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var l=n.length,s=new Array(l);s[0]=m;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"===typeof e?e:i,s[1]=r;for(var o=2;o<l;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67674:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/content/assets-views",function(){return n(22011)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return O}});var a=n(52322),i=n(2784),l=n(97729),s=n(64033),r=n(30876),p=n(21925),o=n(76808),c=n(55165),d=n(63637),m=n.n(d);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}var f=["id"],k=["id"],y="chakra-skip-nav",v={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},g=(0,o.Gp)((function(e,t){var n=(0,o.mq)("SkipLink",e),a=(0,o.Lr)(e),l=a.id,s=void 0===l?y:l,r=h(a,f),p=m()({},v,n);return i.createElement(o.m$.a,u({},r,{ref:t,href:"#"+s,__css:p}))}));c.Ts&&(g.displayName="SkipNavLink");var b=(0,o.Gp)((function(e,t){var n=e.id,a=void 0===n?y:n,l=h(e,k);return i.createElement(o.m$.div,u({ref:t,id:a,tabIndex:-1,style:{outline:0}},l))}));c.Ts&&(b.displayName="SkipNavContent");var x=n(46977),w=n(55002),N=function(e){var t;return(0,a.jsxs)(s.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(s.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},j=function(e){var t=i.useContext(x.Il).bannerExpanded,n="72px",l="calc(100vh - 88px - ".concat(t?n:"0px",")"),r="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,a.jsxs)(s.xu,{minH:"100vh",children:[(0,a.jsx)(g,{children:"Skip to Main Content"}),(0,a.jsxs)(s.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(w._g,{}),(0,a.jsx)(s.iz,{}),(0,a.jsx)(s.kC,{children:(0,a.jsx)(s.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(s.xu,{display:{md:"flex"},children:[(0,a.jsx)(s.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:l,pr:"8",ml:"4",children:(0,a.jsx)(w.Hy,{})}),(0,a.jsxs)(s.xu,{flex:"1",minW:"0",overflow:"auto",maxH:l,children:[(0,a.jsxs)(s.xu,{minH:r,children:[(0,a.jsx)(b,{}),e.children]}),(0,a.jsx)(s.xu,{pt:"20",children:(0,a.jsx)(w.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(N,{tableOfContents:e.tableOfContents})]})})})]})]})};function O(e){return function(t){return(0,a.jsxs)(j,{children:[(0,a.jsx)(l.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(s.kC,{alignItems:"center",children:(0,a.jsx)(s.W2,{maxW:"container.lg",children:(0,a.jsx)(r.Zo,{components:p.tl,children:t.children})})})]})}}},22011:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});n(2784);var a=n(30876),i=n(43857);function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s={},r=(0,i.Z)({title:"Assets & Views",tableOfContents:[{text:"Assets",id:"assets",level:1},{text:"Views",id:"views",level:1},{text:"Cross-field validation",id:"cross-field-validation",level:2},{text:"Applicability",id:"applicability",level:2},{text:"Switches",id:"switches",level:1},{text:"Usage",id:"usage",level:2},{text:"Static v Dynamic Switches",id:"static-v-dynamic-switches",level:2},{text:"Example",id:"example",level:2},{text:"Templates",id:"templates",level:1},{text:"Usage",id:"usage",level:2},{text:"Example",id:"example",level:3},{text:"Multiple templates",id:"multiple-templates",level:2},{text:"Nested Templates",id:"nested-templates",level:3},{text:"Multiple Templates - Single Output",id:"multiple-templates---single-output",level:3},{text:"Dynamic and Static Templates",id:"dynamic-and-static-templates",level:2}]});function p(e){var t=e.components,n=l(e,["components"]);return(0,a.kt)(r,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"assets"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#assets"}),"Assets")),(0,a.kt)("p",null,"An asset is a generic term given to a semantic bit of information that we wish to convey to the user. Assets are the primitive elements that make up the content Player presents as user experiences. Though there are many different types of assets, they all follow the same basic principles:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"assets are uniquely identified within their view"),(0,a.kt)("li",{parentName:"ul"},"assets are semantically meaningful in and of themselves, not relying on any other asset to have meaning")),(0,a.kt)("p",null,"In some cases assets will contain other assets, however the contained assets can also stand on their own. If a complex asset requires information that is specific to itself, then that information is expressed as an object, not an asset."),(0,a.kt)("p",null,"Each asset must have 2 properties: an ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," - Unique ID for the asset. It must be unique per view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type")," - A descriptive name for the asset type. This is used for handling rendering and transforms.")),(0,a.kt)("p",null,"Nested assets are represented as objects containing an ",(0,a.kt)("inlineCode",{parentName:"p"},"asset")," property. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "id": "parent",\n  "type": "parent",\n  "label": {\n    "asset": {\n      "id": "child-asset",\n      "type": "child"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," of the parent contains a nested asset reference. These are ",(0,a.kt)("em",{parentName:"p"},"slots")," that can usually contain any asset type."),(0,a.kt)("h1",Object.assign({},{id:"views"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#views"}),"Views")),(0,a.kt)("p",null,"Views are ",(0,a.kt)("em",{parentName:"p"},"assets")," that exist at the top level of the tree. They typically include the navigation actions, a title, or other top-level information."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the views are used in the navigation section to reference a specific view from the list."),(0,a.kt)("h2",Object.assign({},{id:"cross-field-validation"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#cross-field-validation"}),"Cross-field validation")),(0,a.kt)("p",null,"The other special property of a ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," vs. an ",(0,a.kt)("inlineCode",{parentName:"p"},"asset")," is the addition of a ",(0,a.kt)("inlineCode",{parentName:"p"},"validation")," property on the view. These contain ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/schema"}),(0,a.kt)("inlineCode",{parentName:"a"},"validation")," objects")," that are used for validations crossing multiple fields, and are ran on user navigation rather than data change."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  ...\n  "views": [\n    {\n      "id": "view-1",\n      "validation": [\n        {\n          "type": "expression",\n          "ref": "foo.data.thing1",\n          "message": "Both need to equal 100",\n          "exp": "{{foo.data.thing1}} + {{foo.data.thing2}} == 100",\n        }\n      ]\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"They follow the same guidelines for normal validation references, with the addition of a ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," property that points to the binding that this validation is tied to."),(0,a.kt)("h2",Object.assign({},{id:"applicability"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#applicability"}),"Applicability")),(0,a.kt)("p",null,"Any object in the tree (including ",(0,a.kt)("em",{parentName:"p"},"assets"),") may contain an ",(0,a.kt)("inlineCode",{parentName:"p"},"applicability")," property. This is an ",(0,a.kt)("em",{parentName:"p"},"expression")," that may conditionally show or hide an asset (and all of it\u2019s children) from the view tree. Applicability is dynamically calculated and will automatically update as data changes on the page."),(0,a.kt)("h1",Object.assign({},{id:"switches"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#switches"}),"Switches")),(0,a.kt)("p",null,"Switches are ways of dynamically changing the structure of the view based on data. There are 2 types of switches: ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic"),", but their structures are identical. ",(0,a.kt)("inlineCode",{parentName:"p"},"switches")," can appear anywhere you\u2019d find a normal asset, and (similar to ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"./templates"}),"templates"),") are removed from the view before it reaches the UI layer."),(0,a.kt)("h2",Object.assign({},{id:"usage"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#usage"}),"Usage")),(0,a.kt)("p",null,"The switch is simply a list of objects with ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"asset")," properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"asset")," - The asset that will replace the switch if the case is true"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"case")," - An ",(0,a.kt)("a",Object.assign({parentName:"li"},{href:"./expression"}),"expression")," to evaluate.")),(0,a.kt)("p",null,"The switch will run through each ",(0,a.kt)("em",{parentName:"p"},"case")," statement until the first case expression evaluates to true. For the ",(0,a.kt)("em",{parentName:"p"},"default")," case, simple use a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," at the end of the array."),(0,a.kt)("h2",Object.assign({},{id:"static-v-dynamic-switches"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#static-v-dynamic-switches"}),"Static v Dynamic Switches")),(0,a.kt)("p",null,"The only difference between a ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," switch is the timing update behavior after the first rendering of a view."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"staticSwitch")," calculates the applicable case when a view first renders. It will not re-calculate any of the case statements as data in the view is updated. If you transition away from view-node, and revisit it later-on in the flow, the switch will re-compute the appropriate case statement."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamicSwitch")," will always update the applicable case statement whenever data changes. If data is changed while a view is still showing, the switch will be updated to reflect the new case."),(0,a.kt)("h2",Object.assign({},{id:"example"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#example"}),"Example")),(0,a.kt)("p",null,"Anywhere you can place an ",(0,a.kt)("inlineCode",{parentName:"p"},"asset")," node, a ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamicSwitch")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"staticSwitch")," can be placed instead."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "staticSwitch": [\n    {\n      "case": "{{name.first}} == \'adam\'",\n      "asset": {\n        "id": "name",\n        "type": "text",\n        "value": "Yay"\n      }\n    },\n    {\n      "case": "{{name.first}} == \'notadam\'",\n      "asset": {\n        "id": "name",\n        "type": "text",\n        "value": "Nay"\n      }\n    },\n    {\n      "case": true,\n      "asset": {\n        "id": "name",\n        "type": "text",\n        "value": "\ud83e\udd37"\n      }\n    }\n  ]\n}\n')),(0,a.kt)("h1",Object.assign({},{id:"templates"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#templates"}),"Templates")),(0,a.kt)("p",null,"Templates provide a way to dynamically create a list of assets, or ",(0,a.kt)("em",{parentName:"p"},"any")," object, based on data from the model. All of the templating semantics are removed by the time it reaches an asset\u2019s transform or UI layer."),(0,a.kt)("h2",Object.assign({},{id:"usage-1"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#usage-1"}),"Usage")),(0,a.kt)("p",null,"Within any asset, specify a ",(0,a.kt)("inlineCode",{parentName:"p"},"template")," property as an array of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data")," - A binding that points to an array in the model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"output")," - A property to put the mapped objects"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - The template to use for each object/item in the data array."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dynamic")," - (optional, false by default) A boolean that specifies whether template should be recomputed when data changes")),(0,a.kt)("p",null,"Within a template, the ",(0,a.kt)("inlineCode",{parentName:"p"},"_index_")," string can be used to substitute the array-index of the item being mapped."),(0,a.kt)("h3",Object.assign({},{id:"example-1"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#example-1"}),"Example")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Authored")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "template": [\n      {\n        "data": "list.of.names",\n        "output": "values",\n        "value": {\n          "asset": {\n            "id": "value-_index_",\n            "type": "text",\n            "value": "{{list.of.names._index_}}"\n          }\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "values": [\n      {\n        "asset": {\n          "id": "value-0",\n          "type": "text",\n          "value": "Adam"\n        }\n      },\n      {\n        "asset": {\n          "id": "value-1",\n          "type": "text",\n          "value": "Not Adam"\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("h2",Object.assign({},{id:"multiple-templates"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#multiple-templates"}),"Multiple templates")),(0,a.kt)("p",null,"There\u2019s a few ways to leverage multiple templates within a single asset. Templates can be ",(0,a.kt)("em",{parentName:"p"},"nested")," or multiple used on a single node. These can also be combined to build out complicated nested expansion."),(0,a.kt)("h3",Object.assign({},{id:"nested-templates"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#nested-templates"}),"Nested Templates")),(0,a.kt)("p",null,"Templates can contain other templates. When referencing a nested template, append the template depth to the ",(0,a.kt)("inlineCode",{parentName:"p"},"_index_")," string to reference the correct data-item."),(0,a.kt)("p",null,"For example, if 1 template contains another, use ",(0,a.kt)("inlineCode",{parentName:"p"},"_index_")," to reference the outer-loop, and ",(0,a.kt)("inlineCode",{parentName:"p"},"_index1_")," to reference the inner loop. Furthermore, if templates are nested three levels deep, the first level loop will still be referenced by ",(0,a.kt)("inlineCode",{parentName:"p"},"_index_"),", the second level will be referenced by ",(0,a.kt)("inlineCode",{parentName:"p"},"_index1_")," and the bottom most loop will be referenced by ",(0,a.kt)("inlineCode",{parentName:"p"},"_index2_"),"."),(0,a.kt)("h3",Object.assign({},{id:"multiple-templates---single-output"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#multiple-templates---single-output"}),"Multiple Templates - Single Output")),(0,a.kt)("p",null,"Templates will, by default, create an array, if needed, for the ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," property of each template. If that array already exits (either by manually writing it in the JSON, or from a previous template run), each item will be appended to the end of the existing array."),(0,a.kt)("p",null,"This can be leveraged by combining multiple template directives that use the same ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," property, or by having an ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," use an existing array:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Example"))),(0,a.kt)("p",null,"Both templates in the example below output to the ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," array on the parent object. Since no ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," array exists, the first template will create said array, and the second will append to that."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "template": [\n      {\n        "data": "list.of.names",\n        "output": "values",\n        "value": {\n          "asset": {\n            "id": "name-_index_",\n            "type": "text",\n            "value": "{{list.of.names._index_}}"\n          }\n        }\n      },\n      {\n        "data": "list.of.other-names",\n        "output": "values",\n        "value": {\n          "asset": {\n            "id": "other-name-_index_",\n            "type": "text",\n            "value": "{{list.of.names._index_}}"\n          }\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Example"))),(0,a.kt)("p",null,"The template below will append it\u2019s values to the pre-existing ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," array."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "values": [\n      {\n        "asset": {\n          "id": "existing-name",\n          "type": "text",\n          "value": "Something hard-coded"\n        }\n      }\n    ],\n    "template": [\n      {\n        "data": "list.of.names",\n        "output": "values",\n        "value": {\n          "asset": {\n            "id": "name-_index_",\n            "type": "text",\n            "value": "{{list.of.names._index_}}"\n          }\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("h2",Object.assign({},{id:"dynamic-and-static-templates"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#dynamic-and-static-templates"}),"Dynamic and Static Templates")),(0,a.kt)("p",null,"Like switches, the only difference between a ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," template is the timing update behavior after the first rendering of a view. If not defined, the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," is default to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", the template will be parsed when a view first renders. The template will not be parsed again as data in the view is updated."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", template will be always updated whenever data changes. If data is changed while a view is still showing, the template will be updated to reflect the new data."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Example"))),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "template": [\n      {\n        "dynamic": true,\n        "data": "list.of.names",\n        "output": "values",\n        "value": {\n          "asset": {\n            "id": "value-_index_",\n            "type": "text",\n            "value": "{{list.of.names._index_}}"\n          }\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"model.set([['list.of.names', ['Jain']]]);\nmodel.set([['list.of.names', ['Jain', 'Erica']]]);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output")),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "asset": {\n    "id": "top-level",\n    "type": "collection",\n    "values": [\n      {\n        "asset": {\n          "id": "value-0",\n          "type": "text",\n          "value": "Jain"\n        }\n      },\n      {\n        "asset": {\n          "id": "value-1",\n          "type": "text",\n          "value": "Erica"\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/playerui/player/blob/main//home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1485/execroot/player/docs/site/pages/content/assets-views.mdx"}),"Help to improve this page")))}p.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return t=67674,e(e.s=t);var t}));var t=e.O();_N_E=t}]);