(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7520],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},56983:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/content/schema",function(){return n(16606)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return C}});var a=n(52322),r=n(2784),o=n(97729),i=n(64033),l=n(30876),s=n(21925),p=n(76808),d=n(55165),c=n(63637),u=n.n(c);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}var f=["id"],y=["id"],g="chakra-skip-nav",k={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},b=(0,p.Gp)((function(e,t){var n=(0,p.mq)("SkipLink",e),a=(0,p.Lr)(e),o=a.id,i=void 0===o?g:o,l=h(a,f),s=u()({},k,n);return r.createElement(p.m$.a,m({},l,{ref:t,href:"#"+i,__css:s}))}));d.Ts&&(b.displayName="SkipNavLink");var v=(0,p.Gp)((function(e,t){var n=e.id,a=void 0===n?g:n,o=h(e,y);return r.createElement(p.m$.div,m({ref:t,id:a,tabIndex:-1,style:{outline:0}},o))}));d.Ts&&(v.displayName="SkipNavContent");var x=n(46977),N=n(96882),O=function(e){var t;return(0,a.jsxs)(i.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(i.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},j=function(e){var t=r.useContext(x.Il).bannerExpanded,n="72px",o="calc(100vh - 88px - ".concat(t?n:"0px",")"),l="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,a.jsxs)(i.xu,{minH:"100vh",children:[(0,a.jsx)(b,{children:"Skip to Main Content"}),(0,a.jsxs)(i.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(N._g,{}),(0,a.jsx)(i.iz,{}),(0,a.jsx)(i.kC,{children:(0,a.jsx)(i.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(i.xu,{display:{md:"flex"},children:[(0,a.jsx)(i.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:o,pr:"8",ml:"4",children:(0,a.jsx)(N.Hy,{})}),(0,a.jsxs)(i.xu,{flex:"1",minW:"0",overflow:"auto",maxH:o,children:[(0,a.jsxs)(i.xu,{minH:l,children:[(0,a.jsx)(v,{}),e.children]}),(0,a.jsx)(i.xu,{pt:"20",children:(0,a.jsx)(N.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(O,{tableOfContents:e.tableOfContents})]})})})]})]})};function C(e){return function(t){return(0,a.jsxs)(j,{children:[(0,a.jsx)(o.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(i.kC,{alignItems:"center",children:(0,a.jsx)(i.W2,{maxW:"container.lg",children:(0,a.jsx)(l.Zo,{components:s.tl,children:t.children})})})]})}}},16606:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});n(2784);var a=n(30876),r=n(43857);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i={},l=(0,r.Z)({title:"Schema",tableOfContents:[{text:"Schema",id:"schema",level:1},{text:"Structure",id:"structure",level:2},{text:"Data Types",id:"data-types",level:2},{text:"Arrays",id:"arrays",level:2},{text:"Validation",id:"validation",level:2},{text:"Formatting",id:"formatting",level:2},{text:"Default Value",id:"default-value",level:2}]});function s(e){var t=e.components,n=o(e,["components"]);return(0,a.kt)(l,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"schema"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#schema"}),"Schema")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"schema")," section of the content describes the relationship between the ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),". It breaks down properties of the model\u2019s object into data-types, each with their own spot for validation, formatting, or default-values."),(0,a.kt)("h2",Object.assign({},{id:"structure"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#structure"}),"Structure")),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"root")," of the data object uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"ROOT")," keyword in the schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "ROOT": {\n    "myProperty1": {\n      "type": "MyCustomType"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"This describes a ",(0,a.kt)("inlineCode",{parentName:"p"},"myProperty1")," key on the data-model which corresponds to a ",(0,a.kt)("em",{parentName:"p"},"type")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"MyCustomType"),". Structural data-types can be added to the schema as a sibling to ",(0,a.kt)("inlineCode",{parentName:"p"},"ROOT")," and are referenced by name from the previous type."),(0,a.kt)("p",null,"To add a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property to the ",(0,a.kt)("inlineCode",{parentName:"p"},"myProperty1")," example:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "ROOT": {\n    "myProperty1": {\n      "type": "MyCustomType"\n    }\n  },\n  "MyCustomType": {\n    "name": {\n      "type": "StringType"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Now the path ",(0,a.kt)("inlineCode",{parentName:"p"},"myProperty1.name")," in the model points to a ",(0,a.kt)("inlineCode",{parentName:"p"},"StringType"),". There are a number of basic built-in core types, like ",(0,a.kt)("inlineCode",{parentName:"p"},"StringType"),", that provide a base set of formatting/validation/default value support out of the box. Read more about those below."),(0,a.kt)("h2",Object.assign({},{id:"data-types"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#data-types"}),"Data Types")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"DataType")," is a collection of the validation rules, formatting, and default values for a given path in the model. See the above ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"#Structure"}),"structure")," docs on how to author these in JSON content."),(0,a.kt)("p",null,"As in the above ",(0,a.kt)("inlineCode",{parentName:"p"},"StringType")," example, there are a number of pre-existing base types that can be utilized in the schema to describe a data type, and an extension mechanism for supplying additional base-types for use in the authored content. See the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/plugins/types-provider"}),"types-provider-plugin")," for an easy way to extend these."),(0,a.kt)("p",null,"For any given path described by the schema, Player will merge the rules defined by the ",(0,a.kt)("em",{parentName:"p"},"base")," type (if one exists), and the rules defined specifically for that path in the authored content. Any custom formatter/default values take precedence over the default ones, and any custom validations are ran ",(0,a.kt)("em",{parentName:"p"},"before")," the base ones."),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/plugins/common-types"}),"CommonTypes")," plugin for a list of easy to consume DataTypes for your application."),(0,a.kt)("h2",Object.assign({},{id:"arrays"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#arrays"}),"Arrays")),(0,a.kt)("p",null,"Sometimes the data you\u2019re using represents an array or list of things. To indicate this in the schema add a ",(0,a.kt)("inlineCode",{parentName:"p"},"isArray: true")," property to the reference of the top level array. For example, if the data you\u2019re representing looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "pets": [\n    {\n      "name": "Frodo",\n      "type": "cat"\n    },\n    {\n      "name": "Ginger",\n      "type": "dog"\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"the corresponding schema would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "ROOT": {\n    "pets": {\n      "type": "PetType",\n      "isArray": true\n    }\n  },\n  "PetType": {\n    "name": {\n      "type": "StringType"\n    },\n    "type": {\n      "type": "StringType"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Each item in the array will be formatted/validated using the same rule-set."),(0,a.kt)("h2",Object.assign({},{id:"validation"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#validation"}),"Validation")),(0,a.kt)("p",null,"To attach a validation to a path in the data-model, add a reference to a validator in the data-type definition for that path under a ",(0,a.kt)("inlineCode",{parentName:"p"},"validation")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "MyCustomType": {\n    "name": {\n      "type": "StringType",\n      "validation": [\n        {\n          "type": "length",\n          "max": 20,\n          "min": 5\n        }\n      ]\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Each ",(0,a.kt)("em",{parentName:"p"},"validation")," reference must include a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," property which corresponds to the name of the validator to run. Player includes some validators out-of-the-box, and custom ",(0,a.kt)("inlineCode",{parentName:"p"},"validators")," can be registered as well. See ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:""}),"here")," for more details around which validators are supported, and how to add custom ones."),(0,a.kt)("p",null,"Any additional properties on the validation reference are passed as ",(0,a.kt)("em",{parentName:"p"},"options")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"validator"),". In the example above, a hypothetical ",(0,a.kt)("inlineCode",{parentName:"p"},"length")," validator can take a ",(0,a.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"max")," as the boundaries for the length of a string."),(0,a.kt)("h2",Object.assign({},{id:"formatting"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#formatting"}),"Formatting")),(0,a.kt)("p",null,"Similar to adding validations, formatting is added to a data-type through a reference to a ",(0,a.kt)("inlineCode",{parentName:"p"},"formatter"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "MyCustomType": {\n    "name": {\n      "type": "NumberType",\n      "format": {\n        "type": "commaNumber",\n        "decimalPlaces": 3\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Just like in validations, the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," of the formatter corresponds to the name of a formatter to use (",(0,a.kt)("inlineCode",{parentName:"p"},"commaNumber")," in this case). This hypothetical ",(0,a.kt)("inlineCode",{parentName:"p"},"commaNumber")," formatter would be responsible for translating the data stored in the model to/from what\u2019s displayed to the user. Any additional properties on the ",(0,a.kt)("inlineCode",{parentName:"p"},"format")," object get passed to the respective formatter function as options. In the above example, the options would include ",(0,a.kt)("inlineCode",{parentName:"p"},"{ decimalPlaces: 3 }"),"."),(0,a.kt)("p",null,"Custom formatters can be registered with Player, and thus exposed for use within the authored content."),(0,a.kt)("p",null,"The transition from the data stored in the ",(0,a.kt)("em",{parentName:"p"},"model")," to the user is considered ",(0,a.kt)("em",{parentName:"p"},"formating")," where the inverse (what a user sees to the ",(0,a.kt)("em",{parentName:"p"},"model")," is ",(0,a.kt)("em",{parentName:"p"},"deformatting"),"). Not every formatter has a handler for both ",(0,a.kt)("em",{parentName:"p"},"formatting")," and ",(0,a.kt)("em",{parentName:"p"},"deformatting"),", and it\u2019s entirely up the formatter to define the requirements for data handling in these scenarios."),(0,a.kt)("p",null,"Read more about formatting ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"/guides/formatting"}),"here")),(0,a.kt)("h2",Object.assign({},{id:"default-value"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#default-value"}),"Default Value")),(0,a.kt)("p",null,"Any schema or data type can supply a default value to use when setting or getting the value from the data-model.\nSimply supply the ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," property in either the type reference in the schema or the base type definition. Any read from a binding with a ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," property will return it\u2019s default if the underlying model\u2019s value is undefined. ",(0,a.kt)("strong",{parentName:"p"},"Note:")," Reading a value (and it\u2019s default) will not ",(0,a.kt)("em",{parentName:"p"},"set")," the value in the model to it\u2019s default. The exception to this rule is for bindings that are tracked for validations."))}s.isMDXComponent=!0}},function(e){e.O(0,[6525,204,3795,9774,2888,179],(function(){return t=56983,e(e.s=t);var t}));var t=e.O();_N_E=t}]);