(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[584],{30876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(o,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"===typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"===typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41569:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/content/data-expressions",function(){return n(26059)}])},43857:function(e,t,n){"use strict";n.d(t,{Z:function(){return w}});var a=n(52322),i=n(2784),r=n(97729),l=n(64033),s=n(30876),o=n(21925),p=n(76808),d=n(55165),u=n(63637),c=n.n(u);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}var g=["id"],k=["id"],f="chakra-skip-nav",b={userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",_focus:{clip:"auto",width:"auto",height:"auto"}},x=(0,p.Gp)((function(e,t){var n=(0,p.mq)("SkipLink",e),a=(0,p.Lr)(e),r=a.id,l=void 0===r?f:r,s=h(a,g),o=c()({},b,n);return i.createElement(p.m$.a,m({},s,{ref:t,href:"#"+l,__css:o}))}));d.Ts&&(x.displayName="SkipNavLink");var y=(0,p.Gp)((function(e,t){var n=e.id,a=void 0===n?f:n,r=h(e,k);return i.createElement(p.m$.div,m({ref:t,id:a,tabIndex:-1,style:{outline:0}},r))}));d.Ts&&(y.displayName="SkipNavContent");var N=n(46977),v=n(55002),j=function(e){var t;return(0,a.jsxs)(l.xu,{display:{base:"none",xl:"block"},children:["Table Of Contents",(0,a.jsx)(l.GS,{spacing:1,ml:"0",mt:"4",styleType:"none",children:null===(t=e.tableOfContents)||void 0===t?void 0:t.map((function(e){return(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"#".concat(e.id),children:e.text})},e.text)}))})]})},O=function(e){var t=i.useContext(N.Il).bannerExpanded,n="72px",r="calc(100vh - 88px - ".concat(t?n:"0px",")"),s="calc(100vh - 88px - 105px - ".concat(t?n:"0px",")");return(0,a.jsxs)(l.xu,{minH:"100vh",children:[(0,a.jsx)(x,{children:"Skip to Main Content"}),(0,a.jsxs)(l.kC,{flexDir:"column",padding:"2",children:[(0,a.jsx)(v._g,{}),(0,a.jsx)(l.iz,{}),(0,a.jsx)(l.kC,{children:(0,a.jsx)(l.xu,{as:"main",w:"100%",mx:"auto",children:(0,a.jsxs)(l.xu,{display:{md:"flex"},children:[(0,a.jsx)(l.xu,{display:{base:"none",md:"block"},overflow:"auto",maxH:r,pr:"8",ml:"4",children:(0,a.jsx)(v.Hy,{})}),(0,a.jsxs)(l.xu,{flex:"1",minW:"0",overflow:"auto",maxH:r,children:[(0,a.jsxs)(l.xu,{minH:s,children:[(0,a.jsx)(y,{}),e.children]}),(0,a.jsx)(l.xu,{pt:"20",children:(0,a.jsx)(v.$_,{})})]}),e.tableOfContents&&(0,a.jsx)(j,{tableOfContents:e.tableOfContents})]})})})]})]})};function w(e){return function(t){return(0,a.jsxs)(O,{children:[(0,a.jsx)(r.default,{children:(0,a.jsxs)("title",{children:["Player - ",e.title]})}),(0,a.jsx)(l.kC,{alignItems:"center",children:(0,a.jsx)(l.W2,{maxW:"container.lg",children:(0,a.jsx)(s.Zo,{components:o.tl,children:t.children})})})]})}}},26059:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return o}});n(2784);var a=n(30876),i=n(43857);function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l={},s=(0,i.Z)({title:"Data & Expressions",tableOfContents:[{text:"Data",id:"data",level:1},{text:"Bindings",id:"bindings",level:2},{text:"Query Syntax",id:"query-syntax",level:3},{text:"Nested Bindings",id:"nested-bindings",level:3},{text:"Nested Expressions",id:"nested-expressions",level:3},{text:"Expressions",id:"expressions",level:1},{text:"Using Expressions and Data in a View",id:"using-expressions-and-data-in-a-view",level:2},{text:"Using Expressions for Inline Text Formatting",id:"using-expressions-for-inline-text-formatting",level:2},{text:"Built-in Expressions",id:"built-in-expressions",level:2},{text:"Examples",id:"examples",level:3},{text:"getDataVal",id:"getdataval",level:4},{text:"setDataVal",id:"setdataval",level:4},{text:"deleteDataVal",id:"deletedataval",level:4},{text:"conditional",id:"conditional",level:4}]});function o(e){var t=e.components,n=r(e,["components"]);return(0,a.kt)(s,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",Object.assign({},{id:"data"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#data"}),"Data")),(0,a.kt)("p",null,"Data is central to a lot of the functionality and features of Player. The easiest way to deal with data is to supply it in the initial payload when starting a flow. This will ",(0,a.kt)("em",{parentName:"p"},"seed")," the model with data and allow you to easily reference values"),(0,a.kt)("h2",Object.assign({},{id:"bindings"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#bindings"}),"Bindings")),(0,a.kt)("p",null,"A binding is a representation of a path within the data-model. In simple terms, it\u2019s a dot (",(0,a.kt)("inlineCode",{parentName:"p"},"."),") separated string showing the path of the properties within the data object."),(0,a.kt)("p",null,"Given the following data model:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'data: {\n  foo: {\n    bar: {\n      baz: "hello world!"\n    },\n    array: [\n      {\n        property: "another value"\n      }\n    ]\n  },\n}\n')),(0,a.kt)("p",null,"Then the binding ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar.baz")," will reference the value ",(0,a.kt)("inlineCode",{parentName:"p"},'"hello world!"'),". Assets that write data to the data model would overwrite ",(0,a.kt)("inlineCode",{parentName:"p"},'"hello world"')," when setting to that binding. Using brackets instead of the dot-notation is accepted, similar to accessig properties in real Javascript objects. Unlike Javascript, when using the bracket-notation, surrounding quotes are only required if you need a literal ",(0,a.kt)("inlineCode",{parentName:"p"},"[")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"]")," in your property name."),(0,a.kt)("p",null,"The following bindings are all equivalent:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo.bar.baz")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo['bar'][\"baz\"]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foo[bar].baz"))),(0,a.kt)("p",null,"For most bindings, it is recommended to use the dot-notation for all properties when possible. Doing so is consistent, simpler, and the most performant."),(0,a.kt)("p",null,"Note that you can also use integers to access into arrays in the data model. ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar.array.0.property")," will reference ",(0,a.kt)("inlineCode",{parentName:"p"},'"another value"'),"."),(0,a.kt)("h3",Object.assign({},{id:"query-syntax"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#query-syntax"}),"Query Syntax")),(0,a.kt)("p",null,"Bindings also allow for query access into arrays using a ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"value")," pair to find the first matching item in the array."),(0,a.kt)("p",null,"The query syntax takes the form ",(0,a.kt)("inlineCode",{parentName:"p"},"array[key=value]"),". Where ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," is the property name you want to compare and ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is the value you want to match against. The binding resolves to the first item in the array that has a matching property and value."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"data: {\n  model: {\n    array: [\n      {\n        name: 'alpha',\n        foo: 'bar',\n      },\n      {\n        name: 'bravo',\n        foo: 'baz',\n      },\n      {\n        name: 'charlie',\n        foo: 'qux',\n      },\n    ];\n  }\n}\n")),(0,a.kt)("p",null,"For the given data, the following bindings are all equivalent and will point to the first element in the array:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model.array[0]")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'model.array[name="alpha"]')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'model.array[foo="bar"]'))),(0,a.kt)("p",null,"Quotes around the key or the value of the query are only required when needing to use ambiguous literal characters, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"["),", ",(0,a.kt)("inlineCode",{parentName:"p"},"]"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"="),"."),(0,a.kt)("p",null,"Note that the query syntax resolves to the object of the matching query, not to any specific property on the object. If you want to access a specific property, add additional path information after the query. E.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"model.array[name=bravo].name"),"."),(0,a.kt)("h3",Object.assign({},{id:"nested-bindings"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#nested-bindings"}),"Nested Bindings")),(0,a.kt)("p",null,"Nested bindings allow you to construct a binding path that is relative to a 2nd path or based on some dynamic property. This behavior follows similar model lookup rules that can be used elsewhere in Player."),(0,a.kt)("p",null,"The syntax for a nested binding is a subpath that is wrapped in double curly braces. E.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"normal.path.{{nested.path}}.more.normal.path"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'data: {\n  colors: {\n    yellow: {\n      hex: "#ffff00"\n      rgb: "rgb(255, 255, 0)"\n    },\n    red: {\n      hex: "#ff0000",\n      rgb: "rgb(255, 0, 0)"\n    }\n  },\n  favorites: {\n    color: "yellow",\n    food: "tacos",\n    nestedPath: "colors.yellow"\n  }\n}\n')),(0,a.kt)("p",null,"With this data model, ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.{{favorite.color}}.hex")," will return the hex value for yellow, ",(0,a.kt)("inlineCode",{parentName:"p"},'"#ffff00"'),". Any syntax for a regular binding is also valid as part of a nested binding, including further nesting."),(0,a.kt)("p",null,"References to bindings that contains sub-paths ",(0,a.kt)("inlineCode",{parentName:"p"},"{{favorite.nestedPath}}.hex")," will expand to ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.yellow.hex"),"."),(0,a.kt)("h3",Object.assign({},{id:"nested-expressions"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#nested-expressions"}),"Nested Expressions")),(0,a.kt)("p",null,"Just like binding segments can contain other bindings, segments can also contain expressions. For this, they use a segment surrounded by `:"),(0,a.kt)("p",null,"Suppose there exists a ",(0,a.kt)("inlineCode",{parentName:"p"},"getFavoriteColor()")," expression that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow"),". The following path would resolve to ",(0,a.kt)("inlineCode",{parentName:"p"},"colors.yellow.hex"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{}),"colors.`getFavoriteColor()`.hex\n")),(0,a.kt)("p",null,"Similar to the bracket notation: ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),". Paths can use brackets instead of dots for paths:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{}),"colors[`getFavoriteColor()`].hex\n")),(0,a.kt)("h1",Object.assign({},{id:"expressions"}),(0,a.kt)("a",Object.assign({parentName:"h1"},{href:"#expressions"}),"Expressions")),(0,a.kt)("p",null,"Expressions are callable functions that allow for dynamic behavior of Player and it\u2019s views."),(0,a.kt)("p",null,"These functions can be used in ",(0,a.kt)("inlineCode",{parentName:"p"},"ACTION")," nodes in the navigation section, calculated values in a property of an asset, or anywhere else expressions are valid."),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/expression"}),"Expression Plugin")," for registering custom functions."),(0,a.kt)("h2",Object.assign({},{id:"using-expressions-and-data-in-a-view"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#using-expressions-and-data-in-a-view"}),"Using Expressions and Data in a View")),(0,a.kt)("p",null,"Expressions in the view are strings wrapped in: ",(0,a.kt)("inlineCode",{parentName:"p"},"@[")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"]@"),"."),(0,a.kt)("p",null,"For instance, to call a ",(0,a.kt)("inlineCode",{parentName:"p"},"sum")," expression you may use:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "value": "The sum is @[ sum(1, 2, 3) ]@ dollars"\n}\n')),(0,a.kt)("p",null,"Player will handle resolving that value into the proper string before handing it to the UI layers to render. (",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": "The sum is 6 dollars" }'),")"),(0,a.kt)("p",null,"If an expression is the sole property value:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "value": "@[ sum(1, 2, 3) ]@"\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"raw")," value of the expression will replace that property rather than being wrapped in a string: ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": 6 }')),(0,a.kt)("p",null,"Data is referenced by wrapping the binding in ",(0,a.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"}}"),". This can be used in an expression: ",(0,a.kt)("inlineCode",{parentName:"p"},"@[ {{foo.bar}} + {{foo.baz}} ]@")," or within a string: ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": "Hello {{foo.name}}" }')),(0,a.kt)("p",null,"Similar to expressions, any property only consisting of a data value lookup, will get replaced by the raw value."),(0,a.kt)("h2",Object.assign({},{id:"using-expressions-for-inline-text-formatting"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#using-expressions-for-inline-text-formatting"}),"Using Expressions for Inline Text Formatting")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"format")," expression is used to replace provided value with appropriate format.\nFor instance, to format a number into ",(0,a.kt)("inlineCode",{parentName:"p"},"currency"),", you may use:"),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),"{\n  \"value\": \"Total amount is: @[ format('12122016', 'currency') ]@\"\n}\n")),(0,a.kt)("p",null,"To see the list of currently supported format types, check out ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/common-types.md"}),"Common Types Plugin"),"."),(0,a.kt)("h2",Object.assign({},{id:"built-in-expressions"}),(0,a.kt)("a",Object.assign({parentName:"h2"},{href:"#built-in-expressions"}),"Built-in Expressions")),(0,a.kt)("p",null,"There are a few expressions built into Player. These are pretty basic, so if you\u2019re looking for extend this \u2014 check out the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/common-expressions"}),"Common Expressions Plugin")," or the ",(0,a.kt)("a",Object.assign({parentName:"p"},{href:"../plugins/expression"}),"Expression Plugin")," to add more."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"name"),(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"description"),(0,a.kt)("th",Object.assign({parentName:"tr"},{align:null}),"arguments"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"getDataVal")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Fetches a value from the model. This is equivalent to using the ",(0,a.kt)("inlineCode",{parentName:"td"},"{{foo.bar}}")," syntax."),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"setDataVal")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Sets a value from the model. This is equivalent to using ",(0,a.kt)("inlineCode",{parentName:"td"},"{{foo.bar}} = 'value'")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"value"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"deleteDataVal")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Clears a value from the model."),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"binding"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"conditional")),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Execute expressions, or return data based on an expression condition"),(0,a.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"condition"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"valueIfTrue"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"valueIfFalse"))))),(0,a.kt)("h3",Object.assign({},{id:"examples"}),(0,a.kt)("a",Object.assign({parentName:"h3"},{href:"#examples"}),"Examples")),(0,a.kt)("h4",Object.assign({},{id:"getdataval"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#getdataval"}),(0,a.kt)("inlineCode",{parentName:"a"},"getDataVal"))),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "value": "Hello @[getDataVal(\'user.name\')]@"\n}\n')),(0,a.kt)("h4",Object.assign({},{id:"setdataval"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#setdataval"}),(0,a.kt)("inlineCode",{parentName:"a"},"setDataVal"))),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),"{\n  \"exp\": \"setDataVal('user.name', 'Test User')\"\n}\n")),(0,a.kt)("h4",Object.assign({},{id:"deletedataval"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#deletedataval"}),(0,a.kt)("inlineCode",{parentName:"a"},"deleteDataVal"))),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "exp": "deleteDataVal(\'user.name\')"\n}\n')),(0,a.kt)("h4",Object.assign({},{id:"conditional"}),(0,a.kt)("a",Object.assign({parentName:"h4"},{href:"#conditional"}),(0,a.kt)("inlineCode",{parentName:"a"},"conditional"))),(0,a.kt)("pre",null,(0,a.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),"{\n  \"value\": \"It is @[ conditional({{foo.bar}} == 'DAY', 'daytime', 'nighttime') ]@.\"\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("a",Object.assign({parentName:"p"},{href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/content/data-expressions.mdx"}),"Help to improve this page")))}o.isMDXComponent=!0}},function(e){e.O(0,[6525,7882,3832,9774,2888,179],(function(){return t=41569,e(e.s=t);var t}));var t=e.O();_N_E=t}]);