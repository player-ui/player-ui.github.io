{"version":3,"file":"2115.2a2bf629034e58bb8c82.js","mappings":"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","sources":["webpack://@player-ui/docs/./components/player-demo/sample-flows/sample-flow-manager.tsx","webpack://@player-ui/docs/./components/player-demo/PlayerDemo.tsx","webpack://@player-ui/docs/./pages/index.tsx"],"sourcesContent":["import {\n  FlowManager,\n  CompletedState,\n  Flow,\n  FinalState,\n} from \"@player-ui/react\";\nimport flow1 from \"./flow-1.json\";\nimport flow2 from \"./flow-2.json\";\nimport flow3 from \"./flow-3.json\";\n\nconst basicFlows = [flow1, flow2, flow3];\n\n/** Simple function to delay by a set time */\nconst delay = (time: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time);\n  });\n};\n\nexport function createStaticFlowManager(flows: Array<Flow>): FlowManager {\n  return {\n    next: async (previousResult?: CompletedState) => {\n      if (!previousResult) {\n        const firstFlow = flows[0] as Flow;\n        return { done: false, value: firstFlow };\n      }\n\n      const prevIndex = flows.findIndex((v) => v.id === previousResult.flow.id);\n      const nextIndex =\n        prevIndex + (previousResult.endState.outcome === \"back\" ? -1 : 1);\n\n      if (nextIndex < 0 || nextIndex >= flows.length) {\n        return { done: true } as FinalState;\n      }\n\n      await delay(Math.random() * 500);\n\n      const nextFlow = flows[nextIndex] as Flow;\n      return { done: false, value: nextFlow };\n    },\n  };\n}\n\nexport const basicFlowManager: FlowManager = createStaticFlowManager(\n  basicFlows as Array<Flow>,\n);\n","import React from \"react\";\nimport { ManagedPlayer, Flow, FlowManager } from \"@player-ui/react\";\nimport { ReferenceAssetsPlugin } from \"@player-ui/reference-assets-plugin-react\";\nimport \"@player-ui/reference-assets-plugin-react/dist/index.css\";\nimport {\n  Box,\n  VStack,\n  Flex,\n  Spinner,\n  Button,\n  Heading,\n  HStack,\n  Stack,\n} from \"@chakra-ui/react\";\nimport { CodeHighlight } from \"../code-highlight\";\nimport { basicFlowManager } from \"./sample-flows/sample-flow-manager\";\n\nexport const PlayerDemo = () => {\n  const config = React.useMemo(\n    () => ({\n      plugins: [new ReferenceAssetsPlugin()],\n    }),\n    [],\n  );\n\n  const [completed, setCompleted] = React.useState(false);\n\n  const [currentFlow, setCurrentFlow] = React.useState<Flow | undefined>();\n\n  const flowManager = React.useMemo<FlowManager>(() => {\n    return {\n      next: async (prev) => {\n        const resp = await basicFlowManager.next(prev);\n\n        if (resp.done) {\n          setCurrentFlow(undefined);\n        } else {\n          setCurrentFlow((resp as any).value);\n        }\n\n        return resp;\n      },\n    };\n  }, [setCurrentFlow]);\n\n  return (\n    <Stack\n      gap={{ base: 20, md: \"40\" }}\n      alignItems=\"center\"\n      direction={{ base: \"column\", lg: \"row\" }}\n    >\n      <Box\n        w={{\n          base: \"100%\",\n          md: \"calc(var(--chakra-sizes-md) + (2 * var(--chakra-space-4)))\",\n        }}\n      >\n        <CodeHighlight\n          customStyle={{\n            width: \"100%\",\n          }}\n          codeTagProps={{\n            style: { height: \"var(--shakra-sizes-sm)\" },\n          }}\n          language=\"json\"\n        >\n          {currentFlow\n            ? JSON.stringify(currentFlow.views?.map((a) => a.title), null, 2)\n            : \"Start again\"}\n        </CodeHighlight>\n      </Box>\n\n      <Box\n        borderWidth=\"1px\"\n        borderColor=\"gray.200\"\n        borderRadius=\"base\"\n        boxShadow=\"rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px\"\n      >\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          w={{\n            base: \"100%\",\n            md: \"calc(var(--chakra-sizes-md) + (2 * var(--chakra-space-4)))\",\n          }}\n          h=\"sm\"\n          overflowY=\"auto\"\n          p=\"4\"\n        >\n          {completed && (\n            <VStack gap=\"4\">\n              <Heading>Done!</Heading>\n              <Button\n                colorScheme=\"blue\"\n                variant=\"outline\"\n                onClick={() => {\n                  setCompleted(false);\n                }}\n              >\n                Start Over\n              </Button>\n            </VStack>\n          )}\n          {!completed && (\n            <React.Suspense fallback={<Spinner size=\"xl\" />}>\n              <ManagedPlayer\n                manager={flowManager}\n                {...config}\n                onComplete={() => {\n                  setCompleted(true);\n                }}\n              />\n            </React.Suspense>\n          )}\n        </Flex>\n      </Box>\n    </Stack>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  ButtonGroup,\n  VStack,\n  Heading,\n  Button,\n  Image,\n  Box,\n  Text,\n  Link as CLink,\n  Divider,\n  Container,\n  HStack,\n  SimpleGrid,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { EditIcon, LinkIcon, UnlockIcon, SettingsIcon } from \"@chakra-ui/icons\";\nimport { Img } from \"../components/mdx-components\";\nimport { GitHubButton } from \"../components/Navigation\";\nimport { ColorSchemeSwitch } from \"../components/ColorSchemeSwitch\";\nimport { withBasePrefix } from \"../components/Image\";\nimport { PlayerDemo } from \"../components/player-demo/PlayerDemo\";\n\nconst TagLine = (props: {\n  title: React.ReactNode;\n  description: React.ReactNode;\n  // eslint-disable-next-line react/no-unused-prop-types\n  icon: typeof EditIcon;\n}) => {\n  return (\n    <Box>\n      <HStack>\n        <props.icon w={10} h={10} />\n        <Container w=\"sm\">\n          <Heading as=\"h3\" size=\"md\">\n            {props.title}\n          </Heading>\n          <Text>{props.description}</Text>\n        </Container>\n      </HStack>\n    </Box>\n  );\n};\n\nconst TagLines = () => {\n  return (\n    <SimpleGrid p=\"10\" spacing=\"10\" columns={{ base: 1, md: 2 }}>\n      <TagLine\n        icon={EditIcon}\n        title=\"Write once, render everywhere\"\n        description=\"Sharing content across platforms enables you to quickly release new\n        features, on all platforms, with just a simple content deployment.\"\n      />\n      <TagLine\n        icon={LinkIcon}\n        title=\"Bring your own design system\"\n        description={\n          <span>\n            Player works seamlessly with your existing UI components to fit\n            application. Define your own patterns through{\" \"}\n            <CLink as={Link} color=\"blue.600\" to=\"/assets\">\n              assets\n            </CLink>{\" \"}\n            and render them exactly as your designers intended.\n          </span>\n        }\n      />\n      <TagLine\n        icon={UnlockIcon}\n        title=\"Server Driven Navigation\"\n        description={\n          <span>\n            Need to figure out where go next? Chaining multiple pages together\n            with Player is a breeze. Check out the{\" \"}\n            <CLink\n              as={Link}\n              color=\"blue.600\"\n              to=\"/guides/multi-flow-experiences\"\n            >\n              docs\n            </CLink>{\" \"}\n            for more details.\n          </span>\n        }\n      />\n      <TagLine\n        icon={SettingsIcon}\n        title=\"Plugin Ready\"\n        description={\n          <span>\n            Player is designed from the ground up with plugins in mind.{\" \"}\n            <CLink as={Link} color=\"blue.600\" to=\"/plugins\">\n              Read more\n            </CLink>{\" \"}\n            about the 20+ provided plugins, or how to write your own.\n          </span>\n        }\n      />\n    </SimpleGrid>\n  );\n};\n\nconst Banner = () => {\n  const logoSrc = useColorModeValue(\n    withBasePrefix(\"/logo/logo-light-large.png\"),\n    withBasePrefix(\"/logo/logo-dark-large.png\"),\n  );\n\n  return (\n    <VStack w=\"100%\" p=\"10\">\n      <Image alt=\"Player Logo\" src={logoSrc} />\n      <Heading as=\"h1\" size=\"md\" mt=\"10\">\n        A cross-platform semantic rendering engine\n      </Heading>\n    </VStack>\n  );\n};\n\nconst Home = () => {\n  return (\n    <Box pb=\"40\">\n      {/* <Head>\n        <title>Player</title>\n      </Head> */}\n      <Box>\n        <HStack\n          px=\"6\"\n          minH=\"16\"\n          alignItems=\"center\"\n          justify=\"flex-end\"\n          spacing=\"4\"\n        >\n          <ColorSchemeSwitch />\n          <GitHubButton />\n        </HStack>\n      </Box>\n      <Divider />\n      <VStack pt=\"16\" gap=\"12\" width=\"100%\">\n        <VStack gap=\"8\">\n          <Banner />\n\n          <ButtonGroup spacing=\"6\" size=\"lg\">\n            <Link to=\"/about\">\n              <Button variant=\"outline\">Learn More</Button>\n            </Link>\n\n            <Link to=\"/getting-started\">\n              <Button variant=\"solid\">Get Started</Button>\n            </Link>\n          </ButtonGroup>\n        </VStack>\n        <Divider />\n        <Box>\n          <Img\n            alt=\"Player Platform Diagram\"\n            src=\"/platform_diagram.png?darkModeInvert\"\n          />\n        </Box>\n        <TagLines />\n        <Divider />\n\n        <Heading>See it in action</Heading>\n        <PlayerDemo />\n      </VStack>\n    </Box>\n  );\n};\n\nexport default Home;\n"],"names":["basicFlowManager","flows","next","async","previousResult","done","value","nextIndex","findIndex","v","id","flow","endState","outcome","length","time","Math","random","Promise","resolve","setTimeout","PlayerDemo","config","plugins","completed","setCompleted","currentFlow","setCurrentFlow","flowManager","prev","resp","undefined","gap","base","md","alignItems","direction","lg","w","customStyle","width","codeTagProps","style","height","language","JSON","stringify","views","map","a","title","borderWidth","borderColor","borderRadius","boxShadow","justifyContent","h","overflowY","p","colorScheme","variant","onClick","fallback","size","manager","onComplete","TagLine","props","icon","as","description","TagLines","spacing","columns","color","to","Banner","logoSrc","alt","src","mt","pb","px","minH","justify","ColorSchemeSwitch","pt"],"sourceRoot":""}