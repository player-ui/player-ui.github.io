"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[6721],{83190:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>m});var t=a(52112);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(a),y=l,m=u["".concat(p,".").concat(y)]||u[y]||d[y]||i;return a?t.createElement(m,r(r({ref:n},c),{},{components:a})):t.createElement(m,r({ref:n},c))}));function m(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},66721:(e,n,a)=>{a.r(n),a.d(n,{default:()=>p});a(52112);var t=a(83190),l=a(21525);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}const r={},o=(0,l.A)({title:"CLI",tableOfContents:[{text:"CLI",id:"cli",level:1},{text:"Config",id:"config",level:2},{text:"Plugins",id:"plugins",level:2},{text:"Commands",id:"commands",level:1}]});function p(e){let{components:n,...a}=e;return(0,t.yg)(o,i({},r,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"cli"},(0,t.yg)("a",{parentName:"h1",href:"#cli"},"CLI")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"CLI")," package is a simple way for users to interact with some of the build/validation tooling. As new capabilities are added to the ecosystem, they may be exposed via this cli to use of use for developers. "),(0,t.yg)("h2",{id:"config"},(0,t.yg)("a",{parentName:"h2",href:"#config"},"Config")),(0,t.yg)("p",null,"Config files are able to customize the behavior of the CLI commands without requiring args. Behavior specific to execution can leverage ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins"),", which can be composed together using ",(0,t.yg)("inlineCode",{parentName:"p"},"presets"),". Full configs can also be shared using ",(0,t.yg)("inlineCode",{parentName:"p"},"extensions"),"."),(0,t.yg)("p",null,"To resolve a full configuration, the ",(0,t.yg)("inlineCode",{parentName:"p"},"extension")," is taken as the base, the ",(0,t.yg)("inlineCode",{parentName:"p"},"presets")," are applied in order, then local ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins"),".\nThe format is similar to ",(0,t.yg)("inlineCode",{parentName:"p"},"eslint"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"babel")," and other .rc/json/js based approaches."),(0,t.yg)("p",null,"Config files are searched using cosmiconfig, which will look for:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"a ",(0,t.yg)("inlineCode",{parentName:"li"},"player")," property in package.json"),(0,t.yg)("li",{parentName:"ul"},"a ",(0,t.yg)("inlineCode",{parentName:"li"},".playerrc")," file in JSON or YAML format"),(0,t.yg)("li",{parentName:"ul"},"a ",(0,t.yg)("inlineCode",{parentName:"li"},".player.json"),", ",(0,t.yg)("inlineCode",{parentName:"li"},".playerrc.yaml"),", ",(0,t.yg)("inlineCode",{parentName:"li"},".playerrc.yml"),", ",(0,t.yg)("inlineCode",{parentName:"li"},".playerrc.js"),", or ",(0,t.yg)("inlineCode",{parentName:"li"},".playerrc.cjs")," file"),(0,t.yg)("li",{parentName:"ul"},"a ",(0,t.yg)("inlineCode",{parentName:"li"},"player.config.js")," or ",(0,t.yg)("inlineCode",{parentName:"li"},"player.config.cjs")," CommonJS module exporting an object")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  extends: '@my-scope/base',\n  plugins: [\n    'plugin-npm-package',\n    ['some-plugin-with-config', { config: true }],\n    {\n      // Plugins can also be defined inline\n      handler: () => {},\n    },\n  ],\n};\n")),(0,t.yg)("p",null,"Options defined via the CLI arguments will take precedence over the config files (for things that overlap)."),(0,t.yg)("h2",{id:"plugins"},(0,t.yg)("a",{parentName:"h2",href:"#plugins"},"Plugins")),(0,t.yg)("p",null,"Plugins are the way to change runtime behavior of the CLI actions. This includes augmenting the behavior of the DSL compiler, language-service, and more."),(0,t.yg)("h1",{id:"commands"},(0,t.yg)("a",{parentName:"h1",href:"#commands"},"Commands")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#player-dsl-compile"},(0,t.yg)("inlineCode",{parentName:"a"},"player dsl compile")),"\nCompile Player DSL files into JSON after running TSC compiler against Typescript files")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"USAGE\n  $ player dsl compile -i <value> [-c <value>] [-o <value>] [--skip-validation]\n\nFLAGS\n  -c, --config=<value>  Path to a specific config file to load.\n                        By default, will automatically search for an rc or config file to load\n  -i, --input=<value>   (required) An input directory to compile.\n                        Any jsx/ts/tsx files will be loaded via babel-require automatically.\n  -o, --output=<value>  [default: _out] Output directory to write results to\n  --skip-validation     Option to skip validating the generated JSON\n\nDESCRIPTION\n  Compile Player DSL files into JSON after running TSC compiler against Typescript files\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#player-dsl-validate"},(0,t.yg)("inlineCode",{parentName:"a"},"player dsl validate")),"\nRuns isolated TSC compiler on authored Player DSL Typescript files.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"USAGE\n  $ player dsl validate [-f <value>] [-c <value>] \n\nFLAGS\n  -c, --config=<value>  Path to a specific config file to load.\n                        By default, will automatically search for an rc or config file to load\n  -f, --files=<value>...  A list of files or globs to validate\n\nDESCRIPTION\n  Runs isolated TSC compiler on authored Player DSL Typescript files.\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#player-json-validate"},(0,t.yg)("inlineCode",{parentName:"a"},"player json validate")),"\nValidate Player JSON content")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"USAGE\n  $ player json validate -f <value> [-c <value>]\n\nFLAGS\n  -c, --config=<value>    Path to a specific config file to load.\n                          By default, will automatically search for an rc or config file to load\n  -f, --files=<value>...  (required) A list of files or globs to validate\n\nDESCRIPTION\n  Validate Player JSON content\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#player-dependency-versions-check"},(0,t.yg)("inlineCode",{parentName:"a"},"player dependency-versions check")),"\nChecks for ",(0,t.yg)("inlineCode",{parentName:"li"},"@player-ui/@player-tools")," dependency version mismatches and issues warnings/solutions accordingly")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"USAGE\n  $ player dependency-versions check [-c <value>] [-v] [-p] [-i <value>]\nFLAGS\n  -c, --config=<value>     Path to a specific config file to load.\n                           By default, will automatically search for an rc or config file to load\n  -i, --ignore=<value>...  Ignore the specified pattern(s) when outputting results. Note multiple patterns can be passed\n  -p, --path               Outputs full path to dependency\n  -v, --verbose            Give verbose description\nDESCRIPTION\n  Checks for `@player-ui/@player-tools` dependency version mismatches and issues warnings/solutions accordingly\n  Consider the following:\n  - The interpretation of TOP-LEVEL and NESTED dependencies is as follows:\n  a. TOP-LEVEL dependencies only have one 'node_modules' in their path\n  b. NESTED dependencies have more than one 'node_modules' in their path\n  - `@player-ui/@player-tools` dependencies are fetched not only from inside the 'node_modules' at the top of the repository in which it is run but also from 'node_modules' in sub-directories.\n  For example, if you have some 'node_modules' inside of a 'packages' folder that contains `@player-ui/@player-tools` dependencies, then these will also be fetched.\n  The display of such dependencies also depends on the first bullet point.\n")),(0,t.yg)("hr",null),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/tools/cli.mdx"},"Help to improve this page")))}p.isMDXComponent=!0},21525:(e,n,a)=>{a.d(n,{A:()=>x});var t=a(52112),l=a(9495),i=a(32532),r=a(83190),o=a(37766),p=a(90283),s=a(14769),c=a(63420),u=a(23013),d=a(47482),y=a(52947),m=a(53868),f=a(13516),g="chakra-skip-nav";function h(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var v=(0,u.R)((function(e,n){const a=(0,d.Vl)("SkipLink",e),{id:t=g,...l}=(0,y.MN)(e);return(0,f.jsx)(m.B.a,{...l,ref:n,href:`#${t}`,__css:h(a)})}));v.displayName="SkipNavLink";var b=(0,u.R)((function(e,n){const{id:a=g,...t}=e;return(0,f.jsx)(m.B.div,{ref:n,id:a,tabIndex:-1,style:{outline:0},...t})}));b.displayName="SkipNavContent";var N=a(43298),C=a(2063);const E=e=>t.createElement(p.az,{display:{base:"none",xl:"block"}},"Table Of Contents",t.createElement(s._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>t.createElement("li",{key:e.text},t.createElement("a",{href:`#${e.id}`},e.text)))))),O=e=>{const{bannerExpanded:n}=t.useContext(N.BR),a="72px",i=`calc(100vh - 88px - ${n?a:"0px"})`,r=`calc(100vh - 88px - 105px - ${n?a:"0px"})`;return t.createElement(p.az,{minH:"100vh"},t.createElement(v,null,"Skip to Main Content"),t.createElement(l.s,{flexDir:"column",padding:"2"},t.createElement(C.IS,null),t.createElement(c.c,null),t.createElement(l.s,null,t.createElement(p.az,{as:"main",w:"100%",mx:"auto"},t.createElement(p.az,{display:{md:"flex"}},t.createElement(p.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4"},t.createElement(C.E1,null)),t.createElement(p.az,{flex:"1",minW:"0",overflow:"auto",maxH:i},t.createElement(p.az,{minH:r},t.createElement(b,null),e.children),t.createElement(p.az,{pt:"20"},t.createElement(C.wi,null))),e.tableOfContents&&t.createElement(E,{tableOfContents:e.tableOfContents}))))))};function x(e){return e=>t.createElement(O,null,t.createElement(l.s,{alignItems:"center"},t.createElement(i.m,{maxW:"container.lg"},t.createElement(r.xA,{components:o.Ul},e.children))))}}}]);
//# sourceMappingURL=6721.71da147a26981b580f3e.js.map