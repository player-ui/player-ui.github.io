"use strict";(self.webpackChunk_player_ui_docs=self.webpackChunk_player_ui_docs||[]).push([[1505],{83190:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>d});var r=t(52112);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,d=u["".concat(c,".").concat(g)]||u[g]||m[g]||i;return t?r.createElement(d,l(l({ref:n},s),{},{components:t})):r.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},61505:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});t(52112);var r=t(83190),a=t(60742);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}const l=(o="PlatformTabs",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var o;const c={},p=(0,a.A)({title:"Metrics",platform:"core,react,ios,android",tableOfContents:[{text:"Metrics Plugin",id:"metrics-plugin",level:1},{text:"Usage",id:"usage",level:2},{text:"Using a custom timer",id:"using-a-custom-timer",level:2},{text:"Measuring Render Time",id:"measuring-render-time",level:2},{text:"CocoaPods",id:"cocoapods",level:3},{text:"Swift Usage",id:"swift-usage",level:3},{text:"Beaconing",id:"beaconing",level:2}]});function s(e){let{components:n,...t}=e;return(0,r.yg)(p,i({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"metrics-plugin"},(0,r.yg)("a",{parentName:"h1",href:"#metrics-plugin"},"Metrics Plugin")),(0,r.yg)("p",null,"The Metrics Plugin is used to gather timing information about Player’s execution of a flow. There are also platform specific integrations to include ",(0,r.yg)("inlineCode",{parentName:"p"},"render")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," times."),(0,r.yg)("p",null,"The diagram below illistrates some of the timing information gathered:"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"/metrics-timing.png?darkModeInvert",alt:"Metrics Timing Diagram"})),(0,r.yg)("h2",{id:"usage"},(0,r.yg)("a",{parentName:"h2",href:"#usage"},"Usage")),(0,r.yg)(l,{mdxType:"PlatformTabs"},(0,r.yg)("core",null,(0,r.yg)("p",null,"Add the plugin to Player:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import { Player } from '@player-ui/player';\nimport { MetricsPlugin } from '@player-ui/metrics-plugin';\n\nconst player = new Player({\n  plugins: [\n    new MetricsPlugin({\n      onUpdate: (metrics) => {\n        // Handle the update\n      }\n    })\n  ]\n})\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"onUpdate")," callback will be invoked for any update to the metrics. There are also callbacks for finer-grained events (",(0,r.yg)("inlineCode",{parentName:"p"},"onRenderEnd"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"onInteractive"),", etc), as well as a ",(0,r.yg)("inlineCode",{parentName:"p"},"hooks")," based API for even more control."),(0,r.yg)("h2",{id:"using-a-custom-timer"},(0,r.yg)("a",{parentName:"h2",href:"#using-a-custom-timer"},"Using a custom timer")),(0,r.yg)("p",null,"By default, all time is measured in ms using ",(0,r.yg)("inlineCode",{parentName:"p"},"performance.now()")," with a fallback to the less-accurate ",(0,r.yg)("inlineCode",{parentName:"p"},"Date.now()"),".\nIf you wish to supply your own timer, simply use the ",(0,r.yg)("inlineCode",{parentName:"p"},"getTime")," option to set the function to use."),(0,r.yg)("h2",{id:"measuring-render-time"},(0,r.yg)("a",{parentName:"h2",href:"#measuring-render-time"},"Measuring Render Time")),(0,r.yg)("p",null,"For extensions of this plugin that wish to track the render (and update) times of nodes, add the ",(0,r.yg)("inlineCode",{parentName:"p"},"trackRenderTime")," flag to ",(0,r.yg)("inlineCode",{parentName:"p"},"options"),". You must then call ",(0,r.yg)("inlineCode",{parentName:"p"},"metrics.renderEnd()")," to denote when content is painted on the screen. This is automatically handled for the platform specific versions of this plugin.")),(0,r.yg)("react",null,(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"react")," version of the Metrics Plugin adds support for ",(0,r.yg)("inlineCode",{parentName:"p"},"render")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," times to events. The API mirrors that of the core version:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import { ReactPlayer } from '@player-ui/react';\nimport { MetricsPlugin } from '@player-ui/metrics-plugin-react';\n\nconst player = new ReactPlayer({\n  plugins: [\n    new MetricsPlugin({\n      onUpdate: (metrics) => {\n        // Handle the update\n      }\n    })\n  ]\n})\n"))),(0,r.yg)("ios",null,(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ios")," version of the Metrics Plugin will track initial render time for each view in a flow. Due to current SwiftUI limitations, update time can’t be tracked yet. It can be used in conjunction with a core plugin that utilizes the events, through ",(0,r.yg)("inlineCode",{parentName:"p"},"findPlugin"),", or standalone."),(0,r.yg)("h3",{id:"cocoapods"},(0,r.yg)("a",{parentName:"h3",href:"#cocoapods"},"CocoaPods")),(0,r.yg)("p",null,"Add the subspec to your ",(0,r.yg)("inlineCode",{parentName:"p"},"Podfile")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ruby"},"pod 'PlayerUI/MetricsPlugin'\n")),(0,r.yg)("h3",{id:"swift-usage"},(0,r.yg)("a",{parentName:"h3",href:"#swift-usage"},"Swift Usage")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-swift"},"var body: some View {\n  SwiftUIPlayer(\n    flow: flow,\n    plugins: [\n      // Tracking render time can be controlled with a parameter\n      MetricsPlugin(trackRenderTime: true) { timing, nodeMetrics, flowMetrics in\n        // Handle metrics payload\n        log(timing.duration ?? -1)\n      }\n    ],\n    result: $resultBinding\n  )\n}\n"))),(0,r.yg)("android",null,(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"JVM")," Metrics plugin can track render time for views in a flow."),(0,r.yg)("p",null,"In build.gradle"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-kotlin"},'implementation "com.intuit.playerui.plugins:metrics:$PLAYER_VERSION"\n')),(0,r.yg)("p",null,"In Player constructor"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-kotlin"},"import com.intuit.playerui.plugins.expression.ExpressionPlugin\n\nval metricsPlugin = MetricsPlugin { timing, renderMetrics, flowMetrics ->\n  ...\n}\nAndroidPlayer(metricsPlugin)\n")))),(0,r.yg)("h2",{id:"beaconing"},(0,r.yg)("a",{parentName:"h2",href:"#beaconing"},"Beaconing")),(0,r.yg)(l,{mdxType:"PlatformTabs"},(0,r.yg)("core",null,(0,r.yg)("p",null,"The Metrics Plugin also includes a plugin for the Beacon Plugin that adds render time to the hook context for ",(0,r.yg)("inlineCode",{parentName:"p"},"viewed")," beacons send for views. This plugin is automatically registered to the Beacon Plugin if the ",(0,r.yg)("inlineCode",{parentName:"p"},"trackRenderTime")," option is enabled."),(0,r.yg)("p",null,"In order to ",(0,r.yg)("em",{parentName:"p"},"actually")," include the render-time in a beacon, you must create a ",(0,r.yg)("inlineCode",{parentName:"p"},"BeaconPluginPlugin")," that maps the renderTime from the hook’s context to the actual beacon object. It can be accessed through the ",(0,r.yg)("inlineCode",{parentName:"p"},"MetricsViewBeaconPluginContextSymbol")," key:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { MetricsViewBeaconPluginContextSymbol } from '@player-ui/metrics-plugin';\nimport { BeaconPluginPlugin } from '@player-ui/beacon-plugin';\n\nclass MyBeaconPluginPlugin implements BeaconPluginPlugin {\n  apply(beaconPlugin: BeaconPlugin) {\n    beaconPlugin.hooks.buildBeacon.tap(\n      { name: 'my-beacon-plugin', context: true } as Tap,\n      async (context, beacon) => {\n        const { renderTime } =\n          (await (context as any)[MetricsViewBeaconPluginContextSymbol]) || {};\n\n        return {\n          ...beacon,\n          ...(renderTime && { renderTime }),\n        };\n      }\n    );\n  }\n")),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"./beacon"},"Beacon Plugin")," for more info."))),(0,r.yg)("hr",null),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.dev/player-ui/player/blob/main/docs/site/pages/plugins/metrics.mdx"},"Help to improve this page")))}s.isMDXComponent=!0},60742:(e,n,t)=>{t.d(n,{A:()=>C});var r=t(52112),a=t(9495),i=t(32532),l=t(83190),o=t(48884),c=t(90283),p=t(14769),s=t(63420),u=t(23013),m=t(47482),g=t(52947),d=t(4380),y=t(13516),f="chakra-skip-nav";function h(e){return{userSelect:"none",border:"0",height:"1px",width:"1px",margin:"-1px",padding:"0",outline:"0",overflow:"hidden",position:"absolute",clip:"rect(0 0 0 0)",...e,_focus:{clip:"auto",width:"auto",height:"auto",...e._focus}}}var b=(0,u.R)((function(e,n){const t=(0,m.Vl)("SkipLink",e),{id:r=f,...a}=(0,g.MN)(e);return(0,y.jsx)(d.B.a,{...a,ref:n,href:`#${r}`,__css:h(t)})}));b.displayName="SkipNavLink";var v=(0,u.R)((function(e,n){const{id:t=f,...r}=e;return(0,y.jsx)(d.B.div,{ref:n,id:t,tabIndex:-1,style:{outline:0},...r})}));v.displayName="SkipNavContent";var P=t(67435),w=t(63192);const x=e=>r.createElement(c.az,{display:{base:"none",xl:"block"}},"Table Of Contents",r.createElement(p._J,{spacing:1,ml:"0",mt:"4",styleType:"none"},e.tableOfContents?.map((e=>r.createElement("li",{key:e.text},r.createElement("a",{href:`#${e.id}`},e.text)))))),N=e=>{const{bannerExpanded:n}=r.useContext(P.BR),t="72px",i=`calc(100vh - 88px - ${n?t:"0px"})`,l=`calc(100vh - 88px - 105px - ${n?t:"0px"})`;return r.createElement(c.az,{minH:"100vh"},r.createElement(b,null,"Skip to Main Content"),r.createElement(a.s,{flexDir:"column",padding:"2"},r.createElement(w.IS,null),r.createElement(s.c,null),r.createElement(a.s,null,r.createElement(c.az,{as:"main",w:"100%",mx:"auto"},r.createElement(c.az,{display:{md:"flex"}},r.createElement(c.az,{display:{base:"none",md:"block"},overflow:"auto",maxH:i,pr:"8",ml:"4"},r.createElement(w.E1,null)),r.createElement(c.az,{flex:"1",minW:"0",overflow:"auto",maxH:i},r.createElement(c.az,{minH:l},r.createElement(v,null),e.children),r.createElement(c.az,{pt:"20"},r.createElement(w.wi,null))),e.tableOfContents&&r.createElement(x,{tableOfContents:e.tableOfContents}))))))};function C(e){return e=>r.createElement(N,null,r.createElement(a.s,{alignItems:"center"},r.createElement(i.m,{maxW:"container.lg"},r.createElement(l.xA,{components:o.Ul},e.children))))}}}]);
//# sourceMappingURL=1505.003b47b41f5faea6148d.js.map